<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSharp.DSL</name>
    </assembly>
    <members>
        <member name="M:MSharp.AssociationFormElement.MasterDetailsDeleteTolerance(System.Nullable{System.Int32})">
            <summary>
            TODO: Describe...<para/>
            ======== DEFAULT ================================<para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            TODO: Describe...<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            In this example, ....<para/>
            Example 2<para/>
            In this example, ....<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.AfterControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.MaximumOptions(System.Nullable{System.Int32})">
            <summary>
            The number value specified in this attribute will enforce the minim numbers of relations records that must be added. This value overrides the number set in modal.<para/>
            ======== DEFAULT ================================<para/>
            0 or as specified in Modal<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to enforce minimum numbers if relational records<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.MaxCardinality(System.Nullable{System.Int32})">
            <summary>
            The number value specified in this attribute will limit the maximum numbers of relations records that can be added. Add button for relation data grid will be made hidden once the number of records specified in this attribute is reached.<para/>
            This value overrides the value set in Modal<para/>
            ======== DEFAULT ================================<para/>
            10 or as sepecified in Modal<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to limit the insertion of maximum numbers of relational records<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.CustomDataSave(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate the related entity property when saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic specific to UI for saving the input data especially based on custom added control on the form. Any Business logic must be written in Modal.<para/>
            ======== EXAMPLES ===============================<para/>
            this.User = App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.InitialCardinality(System.Nullable{System.Int32})">
            <summary>
            This attribute controls the number of rows shown in the grid of relational object instances initially<para/>
            e.g. Specify a value of 1 will make the first row of relational data grid visible and so on for other numbers<para/>
            ======== DEFAULT ================================<para/>
            0<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to show rows of relation data grid. This is also useful to display rows for minimum cardinality<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify required field validation message for the element<para/>
            ======== DEFAULT ================================<para/>
            Please provide a value for [Form Element Name]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a custom required field message<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Name field is required.<para/>
            C# Expression:<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.MinCardinality(System.Nullable{System.Int32})">
            <summary>
            TODO: Describe...<para/>
            ======== DEFAULT ================================<para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            TODO: Describe...<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            In this example, ....<para/>
            Example 2<para/>
            In this example, ....<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.DisplayFormat(System.String)">
            <summary>
            In this field you can specify the format expression for this element. It is only used in ReadOnly mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom format expression for this element.<para/>
            ======== EXAMPLES ===============================<para/>
            h2&gt;<para/>
            {0: d}<para/>
            {0: g}<para/>
            {0: c}<para/>
            c#: Item.GetFirstName()<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.SourceCriteria(System.String)">
            <summary>
            In this field you can specify a criteria which act as a where clause on options data source.<para/>
            Note:<para/>
            This field will be ignored for master-detail relations.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to filter data source for the association<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            each.IsActive<para/>
            Example 2<para/>
            each.IsActive &amp;&amp; each.Country == Country<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.BeforeLabel(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the label of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.<para/>
            ======== EXAMPLES ===============================<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.DeleteIconUrl(System.String)">
            <summary>
            In this field you can specify a custom delete image URL for delete button for the relational data entry field.<para/>
            ======== DEFAULT ================================<para/>
            images/icons/delete.png<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to provide a delete image url for the relation data entry field.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            images/interactive/delete.png<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.AddButtonImageUrl(System.String)">
            <summary>
            In this field you can specify a custom image URL for the AddButton of the relation data entry field.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to provide a custom image URL for the AddButton of the relation data entry field.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            /Images/Buttons/custom-add.gif<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.AddButtonText(System.String)">
            <summary>
            In this field you can specify a custom AddButton text for the relation data entry field.<para/>
            ======== BY DEFAULT THE NAME OF THE BUTTON IS INFERRED FROM THE NAME OF THE RELATION. <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to provide a custom custom text for the AddButton of the relation.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            &quot;Add a relation&quot;<para/>
            Example 2<para/>
            c#: &quot;Add a &quot; + Item.Name<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.AfterControlContainer(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control container element of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Password Strength<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.BeforeControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button before Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.DisplayExpression(System.String)">
            <summary>
            A string C# statement to represent each item in the list.<para/>
            ======== DEFAULT ================================<para/>
            By default the ToString() value of each item is represented in the list.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to represent each item in the list with a custom string format.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            In this example, ....<para/>
            Example 2<para/>
            item.FirstName + &quot; &quot; + item.LastName + &quot; registered at &quot; + item.RegDate<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.DataSource(System.String)">
            <summary>
            This field is a C# expression that requires a collection type objects.<para/>
            If this field is not set all instances of the type will be shown as option.<para/>
            These lookup up options will be shown as the options to add a relation.<para/>
            Note:<para/>
            For master detail forms this field is ignored.<para/>
            ======== DEFAULT ================================<para/>
            All instance of the associated type are loaded<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            You can use this attribute to provide filtered Dataset<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            Item.Languages;<para/>
            Example 2<para/>
            Item.MostVisitedcategories()<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.GenerateDetailsColumnHeaders(System.Nullable{System.Boolean})">
            <summary>
            IF set to False, header for the grid of the relation object instances will not be shown.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute to show / hide the headers for the grid of the relation object instances.<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.HeaderText(System.String)">
            <summary>
            In this field you can specify a static contents or C# expression which appear just above for form element container.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display contents as heading of the element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Contents<para/>
            ======== PERSONAL DETAILS =======================<para/>
            C# Expression<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.Label(System.String)">
            <summary>
            In this field you can specify the label text for this form element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.SortFormula(System.String)">
            <summary>
            In this field you can specify the sort expression for the relation data.<para/>
            Supported formats:<para/>
            -<para/>
            Property name<para/>
            - Any C# expression using &quot;item&quot; object.<para/>
            Tips:<para/>
            - Use &quot;|&quot; to seperate multiple sort expressions.<para/>
            -<para/>
            You can add &quot; DESC&quot; to the end of each phrase to specify descending sort.<para/>
            ======== DEFAULT ================================<para/>
            By default items in this form element will be sorted based on the same as the default sort order of the &quot;Referenced type by this association&quot;.<para/>
            That is, either by an explicitly defined SortOrder on that Type, or the ToString() of the objects.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the items to be sorted in this form element (dropdown list, etc) differently from the default setting of the referenced type.<para/>
            ======== EXAMPLES ===============================<para/>
            LastName<para/>
            item.LastName<para/>
            item.GetLastName()<para/>
            item.GetLastName() DESC<para/>
            item.LastName + &quot;, &quot; + item.FirstName<para/>
            LastName DESC | item.GetSomething()<para/>
            FirstName DESC | LastName | MyModuleMethod(item) DESC<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.IsMerged(System.Boolean)">
            <summary>
            If this field is checked the following scenario will be run:<para/>
            The form supposed that only ONE relation entry is required and adds the relation entry within the form entry form. (not as a separate form).<para/>
            Note:<para/>
            In this case the end user will be unable to add more than one relation to the entity and only one relation will be added to the entity.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to merge the relation form intro parent form<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.HelpText(System.String)">
            <summary>
            In this field you can specify the instructions to show to the user for this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to show some instruction/help text for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            Password should be at least 8 characters long.<para/>
            c#: string.Format(&quot;Help for {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.NumberOfColumns(System.Nullable{System.Int32})">
            <summary>
            TODO: Describe...<para/>
            ======== DEFAULT ================================<para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            TODO: Describe...<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            In this example, ....<para/>
            Example 2<para/>
            In this example, ....<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.ControlCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the control.<para/>
            ======== EXAMPLES ===============================<para/>
            rounded-textbox<para/>
            short-textbox rounded-textbox<para/>
            c#: (Case != null) ? &quot;selected-textbox&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.Control(MSharp.ControlType)">
            <summary>
            In this field, you can select a control type from a wide range of control types for the input control e.g AutoComplete, Textbox, Checkbox List etc<para/>
            ======== DEFAULT ================================<para/>
            Textbox for string or numeric fields<para/>
            Dropdown List for collection type associations and nullable Boolean field<para/>
            Checkbox for radio button<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the type of input control for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            For Boolean type fields, Checkbox is displayed by default but you can select Radio Button with Yes / No option<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.WatermarkText(System.String)">
            <summary>
            In this field you can specify text for watermark which hovered above the input control.  This field supports both static text and C# expression.<para/>
            Note:<para/>
            - This attribute is ignored for some of the control types e.g. Dropdown lists, Checkboxes etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to hover some information to educate user about the form field which disappareas as the field is focused<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.ToolTip(System.String)">
            <summary>
            The text or markup to use for the tooltip of the control. You can use static or C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display tooltip for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Valid Email address<para/>
            Example 2<para/>
            c#: App.Settings.Current.EmailAddressTooltip<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.Readonly(System.Boolean)">
            <summary>
            When set, a literal will be generated instead of a data entry control.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you intend to just display the data for read only purposes<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property the value of which is automatically generated and you just want to display the generated value on the Form.<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in element section. On selecting a box, the form element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display form elements in groups with a heading<para/>
            You need to display form elements in left and right combinations<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the input control will cause postback.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable the postback behaviour of the input control<para/>
            ======== EXAMPLES ===============================<para/>
            Dropdown lists for data filtering<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.ChangeEventHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of the input control<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a form  element<para/>
            ======== EXAMPLES ===============================<para/>
            Filtering products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify the code to be added to the control markup.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            TextMode=&quot;Password&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.ItemCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            c#: (Case != null) ? &quot;case-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.Mandatory(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to make a form element mandatory or optional. This attribute overrides behaviour set in Modal.<para/>
            Note:<para/>
            If you change a form element which was marked as mandatory in Modal to optional  by setting this attribute to False. Then the element will not be validated on client side but server side validation will take place as set.<para/>
            ======== AS SET IN MODAL AT THE TIME OF CREATING PROPERTY <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a form element mandatory on UI.<para/>
            ======== EXAMPLES ===============================<para/>
            You have an option comment field but want to make it mandatory for a specific form<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.CustomInitializer(System.String)">
            <summary>
            In this field, you can specify a C# expression to initialize the input control. The expression specified here will be used to populate input control on page load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios when you need to initialize the input control especially custom control added on the form.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to load Categories for a custom added dropdown list<para/>
            lstCategories.DataSource = Categories;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.LabelCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this label.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the label<para/>
            ======== EXAMPLES ===============================<para/>
            test-label<para/>
            short-label test-label<para/>
            c#: (Case != null) ? &quot;case-label&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.ControlWrapperCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of the input control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the data entry control for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-wrapper<para/>
            leftside<para/>
            add-user-wrapper<para/>
            c#: (Case != null) ? &quot;case-user-wrapper&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.CustomDataLoad(System.String)">
            <summary>
            In this field you can write a custom c# code which loads the element before data entry.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to replace the default data load with custom expression for the input control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtCaseCount = App.Context.User.Cases.Count();<para/>
            </summary>
        </member>
        <member name="M:MSharp.AssociationFormElement.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to to specify the auto focus behaviour of the input control<para/>
            Often on lengthy pages if form is below the browser normal window and control focus causes unnecessary page scroll to show the default focused element you can use this property to set the<para/>
            AutoFocus to False. which will prevent page to scroll on load<para/>
            ======== DEFAULT ================================<para/>
            First element of the form receives the focus when the page is loaded.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the control Auto focus<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomaticPropertySetter.Value(System.String)">
            <summary>
            A C# expression, the result of which will be set to the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to initialize the property using c# expression other than the QueryString<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            App.User.Current<para/>
            Example 2<para/>
            App.Language.Default<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomaticPropertySetter.FromRequestParam(System.String)">
            <summary>
            In this field you must specify QueryString key, if you want the property to be set using the QueryString value,<para/>
            ======== DEFAULT ================================<para/>
            .[EntityTypeName]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set / populate the property using QueryString Key<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            .Country<para/>
            Example 2<para/>
            .Person<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomaticPropertySetter.MustSet(System.Boolean)">
            <summary>
            This field works only with QueryString value. When set to True, it directly extracts the value from the QuerySting without performing a null check<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to make sure that this property must be populated when using QuerString<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomaticPropertySetter.SetInPostback(System.Boolean)">
            <summary>
            When set to False, the property will not be initialized postback. !IsPostBack condition is applied.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            You can use this property to allow / disallow initializing during postback<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomaticPropertySetter.OnlyIf(System.String)">
            <summary>
            A c# expression which specifies a criteria in which this automatic property setting will be done.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            You can use this field to restrict the automatic property setting in different scenarios e.g. when you add a new record or an existing<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            Item.IsNew<para/>
            Example 2<para/>
            App.Context.Member != null<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.ShowViewLink(System.Boolean)">
            <summary>
            When set to True, enables the end user to see the preview of the existing file uploaded for this field.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to hide the link to the binary file<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.AfterControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.CustomDataSave(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate the related entity property when saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic specific to UI for saving the input data especially based on custom added control on the form. Any Business logic must be written in Modal.<para/>
            ======== EXAMPLES ===============================<para/>
            this.User = App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify required field validation message for the element<para/>
            ======== DEFAULT ================================<para/>
            Please provide a value for [Form Element Name]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a custom required field message<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Name field is required.<para/>
            C# Expression:<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.DisplayFormat(System.String)">
            <summary>
            In this field you can specify the format expression for this element. It is only used in ReadOnly mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom format expression for this element.<para/>
            ======== EXAMPLES ===============================<para/>
            h2&gt;<para/>
            {0: d}<para/>
            {0: g}<para/>
            {0: c}<para/>
            c#: Item.GetFirstName()<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.BeforeLabel(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the label of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.<para/>
            ======== EXAMPLES ===============================<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.AfterControlContainer(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control container element of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Password Strength<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.BeforeControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button before Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.HeaderText(System.String)">
            <summary>
            In this field you can specify a static contents or C# expression which appear just above for form element container.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display contents as heading of the element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Contents<para/>
            ======== PERSONAL DETAILS =======================<para/>
            C# Expression<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.Label(System.String)">
            <summary>
            In this field you can specify the label text for this form element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.HelpText(System.String)">
            <summary>
            In this field you can specify the instructions to show to the user for this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to show some instruction/help text for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            Password should be at least 8 characters long.<para/>
            c#: string.Format(&quot;Help for {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.ControlCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the control.<para/>
            ======== EXAMPLES ===============================<para/>
            rounded-textbox<para/>
            short-textbox rounded-textbox<para/>
            c#: (Case != null) ? &quot;selected-textbox&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.Control(MSharp.ControlType)">
            <summary>
            In this field, you can select a control type from a wide range of control types for the input control e.g AutoComplete, Textbox, Checkbox List etc<para/>
            ======== DEFAULT ================================<para/>
            Textbox for string or numeric fields<para/>
            Dropdown List for collection type associations and nullable Boolean field<para/>
            Checkbox for radio button<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the type of input control for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            For Boolean type fields, Checkbox is displayed by default but you can select Radio Button with Yes / No option<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.WatermarkText(System.String)">
            <summary>
            In this field you can specify text for watermark which hovered above the input control.  This field supports both static text and C# expression.<para/>
            Note:<para/>
            - This attribute is ignored for some of the control types e.g. Dropdown lists, Checkboxes etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to hover some information to educate user about the form field which disappareas as the field is focused<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.ToolTip(System.String)">
            <summary>
            The text or markup to use for the tooltip of the control. You can use static or C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display tooltip for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Valid Email address<para/>
            Example 2<para/>
            c#: App.Settings.Current.EmailAddressTooltip<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.Readonly(System.Boolean)">
            <summary>
            When set, a literal will be generated instead of a data entry control.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you intend to just display the data for read only purposes<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property the value of which is automatically generated and you just want to display the generated value on the Form.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in element section. On selecting a box, the form element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display form elements in groups with a heading<para/>
            You need to display form elements in left and right combinations<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the input control will cause postback.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable the postback behaviour of the input control<para/>
            ======== EXAMPLES ===============================<para/>
            Dropdown lists for data filtering<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.ChangeEventHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of the input control<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a form  element<para/>
            ======== EXAMPLES ===============================<para/>
            Filtering products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify the code to be added to the control markup.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            TextMode=&quot;Password&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.ItemCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            c#: (Case != null) ? &quot;case-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.Mandatory(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to make a form element mandatory or optional. This attribute overrides behaviour set in Modal.<para/>
            Note:<para/>
            If you change a form element which was marked as mandatory in Modal to optional  by setting this attribute to False. Then the element will not be validated on client side but server side validation will take place as set.<para/>
            ======== AS SET IN MODAL AT THE TIME OF CREATING PROPERTY <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a form element mandatory on UI.<para/>
            ======== EXAMPLES ===============================<para/>
            You have an option comment field but want to make it mandatory for a specific form<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.CustomInitializer(System.String)">
            <summary>
            In this field, you can specify a C# expression to initialize the input control. The expression specified here will be used to populate input control on page load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios when you need to initialize the input control especially custom control added on the form.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to load Categories for a custom added dropdown list<para/>
            lstCategories.DataSource = Categories;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.LabelCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this label.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the label<para/>
            ======== EXAMPLES ===============================<para/>
            test-label<para/>
            short-label test-label<para/>
            c#: (Case != null) ? &quot;case-label&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.ControlWrapperCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of the input control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the data entry control for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-wrapper<para/>
            leftside<para/>
            add-user-wrapper<para/>
            c#: (Case != null) ? &quot;case-user-wrapper&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.CustomDataLoad(System.String)">
            <summary>
            In this field you can write a custom c# code which loads the element before data entry.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to replace the default data load with custom expression for the input control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtCaseCount = App.Context.User.Cases.Count();<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryFormElement.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to to specify the auto focus behaviour of the input control<para/>
            Often on lengthy pages if form is below the browser normal window and control focus causes unnecessary page scroll to show the default focused element you can use this property to set the<para/>
            AutoFocus to False. which will prevent page to scroll on load<para/>
            ======== DEFAULT ================================<para/>
            First element of the form receives the focus when the page is loaded.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the control Auto focus<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.TrueText(System.String)">
            <summary>
            In this attribute you can specify a text for the &quot;True&quot; state of a Boolean element. This value overrides the same attribute value specified in Modal.<para/>
            Note:<para/>
            M# displays a checkbox input control by default for bool properties. But, when the value for this attribute is specified then a radio button input control is rendered with the specified text.<para/>
            ======== DEFAULT ================================<para/>
            Yes<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to show a radio button with the text for &quot;True&quot; state of a bool value<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.AfterControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.FalseText(System.String)">
            <summary>
            In this field you can specify a text for the &quot;False&quot; state of the Boolean element. This value overrides the same attribute value specified in Modal<para/>
            Note:<para/>
            M# displays a checkbox input control by default for bool properties. But, when the value for this attribute is specified then a radio button input control is rendered with the specified text.<para/>
            ======== DEFAULT ================================<para/>
            No<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to render radio button with the custom text on &quot;False&quot; State of bool element<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.NullText(System.String)">
            <summary>
            This attribute works will nullable bool type. You can specify a text for the UNKNOWN state of the element. This value overrides the same attribute value specified in Modal<para/>
            Note:<para/>
            M# displays a checkbox input control by default for nullable bool properties. But, when the value for this attribute is specified then a dropdown list is rendered with the specified text.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want textual representation of a nullable bool element when the state is null / unknown<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.CustomDataSave(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate the related entity property when saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic specific to UI for saving the input data especially based on custom added control on the form. Any Business logic must be written in Modal.<para/>
            ======== EXAMPLES ===============================<para/>
            this.User = App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify required field validation message for the element<para/>
            ======== DEFAULT ================================<para/>
            Please provide a value for [Form Element Name]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a custom required field message<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Name field is required.<para/>
            C# Expression:<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.DisplayFormat(System.String)">
            <summary>
            In this field you can specify the format expression for this element. It is only used in ReadOnly mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom format expression for this element.<para/>
            ======== EXAMPLES ===============================<para/>
            h2&gt;<para/>
            {0: d}<para/>
            {0: g}<para/>
            {0: c}<para/>
            c#: Item.GetFirstName()<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.BeforeLabel(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the label of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.<para/>
            ======== EXAMPLES ===============================<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.AfterControlContainer(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control container element of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Password Strength<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.BeforeControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button before Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.HeaderText(System.String)">
            <summary>
            In this field you can specify a static contents or C# expression which appear just above for form element container.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display contents as heading of the element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Contents<para/>
            ======== PERSONAL DETAILS =======================<para/>
            C# Expression<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.Label(System.String)">
            <summary>
            In this field you can specify the label text for this form element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.HelpText(System.String)">
            <summary>
            In this field you can specify the instructions to show to the user for this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to show some instruction/help text for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            Password should be at least 8 characters long.<para/>
            c#: string.Format(&quot;Help for {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.ControlCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the control.<para/>
            ======== EXAMPLES ===============================<para/>
            rounded-textbox<para/>
            short-textbox rounded-textbox<para/>
            c#: (Case != null) ? &quot;selected-textbox&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.Control(MSharp.ControlType)">
            <summary>
            In this field, you can select a control type from a wide range of control types for the input control e.g AutoComplete, Textbox, Checkbox List etc<para/>
            ======== DEFAULT ================================<para/>
            Textbox for string or numeric fields<para/>
            Dropdown List for collection type associations and nullable Boolean field<para/>
            Checkbox for radio button<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the type of input control for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            For Boolean type fields, Checkbox is displayed by default but you can select Radio Button with Yes / No option<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.WatermarkText(System.String)">
            <summary>
            In this field you can specify text for watermark which hovered above the input control.  This field supports both static text and C# expression.<para/>
            Note:<para/>
            - This attribute is ignored for some of the control types e.g. Dropdown lists, Checkboxes etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to hover some information to educate user about the form field which disappareas as the field is focused<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.ToolTip(System.String)">
            <summary>
            The text or markup to use for the tooltip of the control. You can use static or C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display tooltip for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Valid Email address<para/>
            Example 2<para/>
            c#: App.Settings.Current.EmailAddressTooltip<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.Readonly(System.Boolean)">
            <summary>
            When set, a literal will be generated instead of a data entry control.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you intend to just display the data for read only purposes<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property the value of which is automatically generated and you just want to display the generated value on the Form.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in element section. On selecting a box, the form element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display form elements in groups with a heading<para/>
            You need to display form elements in left and right combinations<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the input control will cause postback.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable the postback behaviour of the input control<para/>
            ======== EXAMPLES ===============================<para/>
            Dropdown lists for data filtering<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.ChangeEventHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of the input control<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a form  element<para/>
            ======== EXAMPLES ===============================<para/>
            Filtering products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify the code to be added to the control markup.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            TextMode=&quot;Password&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.ItemCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            c#: (Case != null) ? &quot;case-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.Mandatory(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to make a form element mandatory or optional. This attribute overrides behaviour set in Modal.<para/>
            Note:<para/>
            If you change a form element which was marked as mandatory in Modal to optional  by setting this attribute to False. Then the element will not be validated on client side but server side validation will take place as set.<para/>
            ======== AS SET IN MODAL AT THE TIME OF CREATING PROPERTY <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a form element mandatory on UI.<para/>
            ======== EXAMPLES ===============================<para/>
            You have an option comment field but want to make it mandatory for a specific form<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.CustomInitializer(System.String)">
            <summary>
            In this field, you can specify a C# expression to initialize the input control. The expression specified here will be used to populate input control on page load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios when you need to initialize the input control especially custom control added on the form.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to load Categories for a custom added dropdown list<para/>
            lstCategories.DataSource = Categories;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.LabelCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this label.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the label<para/>
            ======== EXAMPLES ===============================<para/>
            test-label<para/>
            short-label test-label<para/>
            c#: (Case != null) ? &quot;case-label&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.ControlWrapperCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of the input control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the data entry control for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-wrapper<para/>
            leftside<para/>
            add-user-wrapper<para/>
            c#: (Case != null) ? &quot;case-user-wrapper&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.CustomDataLoad(System.String)">
            <summary>
            In this field you can write a custom c# code which loads the element before data entry.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to replace the default data load with custom expression for the input control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtCaseCount = App.Context.User.Cases.Count();<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanFormElement.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to to specify the auto focus behaviour of the input control<para/>
            Often on lengthy pages if form is below the browser normal window and control focus causes unnecessary page scroll to show the default focused element you can use this property to set the<para/>
            AutoFocus to False. which will prevent page to scroll on load<para/>
            ======== DEFAULT ================================<para/>
            First element of the form receives the focus when the page is loaded.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the control Auto focus<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.MinuteIntervals(System.String)">
            <summary>
            In this attribute you can specify a numeric value  between 0 - 59. which is used to display minutes in  dropdown list with the intervals specified.<para/>
            Supports<para/>
            1. Static Numeric Expression<para/>
            2. C# Expression<para/>
            ======== DEFAULT ================================<para/>
            1<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display minutes in a different interval than the original e.g. appointments, events etc.<para/>
            ======== EXAMPLES ===============================<para/>
            Static numeric value<para/>
            20<para/>
            C# Expression<para/>
            App.Settings.Current.AppointmentTimeinterval<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.AfterControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.HourFormatString(System.String)">
            <summary>
            In this attribute you can specify format for the Hour of DateTime field<para/>
            ======== DEFAULT ================================<para/>
            hh tt<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display hour in a different format e.g 24Hr Format<para/>
            ======== EXAMPLES ===============================<para/>
            HH<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.MinimumMinute(System.String)">
            <summary>
            In this field you can specify starting number of hour in the hour dropdown list between 0 - 23<para/>
            Supports<para/>
            1. Static Numeric Expression<para/>
            2. C# Expression<para/>
            ======== DEFAULT ================================<para/>
            0<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is useful in cases when you want to start the hour control with a higher number than the default e.g. Appointment Opening hour<para/>
            ======== EXAMPLES ===============================<para/>
            Static Expression<para/>
            09<para/>
            C# Expression<para/>
            App.Settings.Current.AppointmentOpeningHour<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.CustomDataSave(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate the related entity property when saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic specific to UI for saving the input data especially based on custom added control on the form. Any Business logic must be written in Modal.<para/>
            ======== EXAMPLES ===============================<para/>
            this.User = App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.MinimumHour(System.String)">
            <summary>
            In this field you can specify starting number of minutes in the minute dropdown list between 0 - 59<para/>
            Supports<para/>
            1. Static Numeric Expression<para/>
            2. C# Expression<para/>
            ======== DEFAULT ================================<para/>
            0<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is useful in cases when you want to start the minutes with a higher number than the default e.g. Appointment Opening Time<para/>
            ======== EXAMPLES ===============================<para/>
            Static Expression<para/>
            10<para/>
            C# Expression<para/>
            App.Settings.Current.AppointmentOpeningMinute<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify required field validation message for the element<para/>
            ======== DEFAULT ================================<para/>
            Please provide a value for [Form Element Name]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a custom required field message<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Name field is required.<para/>
            C# Expression:<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.MaximumMinute(System.String)">
            <summary>
            In this field you can specify ending number of minutes that should be displayed in a the minute dropdown list between 0 - 59<para/>
            Supports<para/>
            1. Static Numeric Expression<para/>
            2. C# Expression<para/>
            ======== DEFAULT ================================<para/>
            59<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to reduce the number of minutes displayed e.g. order reservation time<para/>
            ======== EXAMPLES ===============================<para/>
            Static numeric value<para/>
            20<para/>
            C# Expression<para/>
            App.Settings.Current.OrderReservationMinutes<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.DisplayFormat(System.String)">
            <summary>
            In this field you can specify the format expression for this element. It is only used in ReadOnly mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom format expression for this element.<para/>
            ======== EXAMPLES ===============================<para/>
            h2&gt;<para/>
            {0: d}<para/>
            {0: g}<para/>
            {0: c}<para/>
            c#: Item.GetFirstName()<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.MaximumHour(System.String)">
            <summary>
            In this field you can specify starting number of hours that should be displayed in a the hour dropdown list between 0 - 23<para/>
            Supports<para/>
            1. Static Numeric Expression<para/>
            2. C# Expression<para/>
            ======== DEFAULT ================================<para/>
            23<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to reduce the maximum number of hour e.g. office times, appointment times etc<para/>
            ======== EXAMPLES ===============================<para/>
            Static numeric value<para/>
            18<para/>
            C# Expression<para/>
            App.Settings.Current.AppointmentClosingHour<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.BeforeLabel(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the label of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.<para/>
            ======== EXAMPLES ===============================<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.AfterControlContainer(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control container element of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Password Strength<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.BeforeControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button before Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.HeaderText(System.String)">
            <summary>
            In this field you can specify a static contents or C# expression which appear just above for form element container.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display contents as heading of the element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Contents<para/>
            ======== PERSONAL DETAILS =======================<para/>
            C# Expression<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.Label(System.String)">
            <summary>
            In this field you can specify the label text for this form element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.HelpText(System.String)">
            <summary>
            In this field you can specify the instructions to show to the user for this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to show some instruction/help text for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            Password should be at least 8 characters long.<para/>
            c#: string.Format(&quot;Help for {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.ControlCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the control.<para/>
            ======== EXAMPLES ===============================<para/>
            rounded-textbox<para/>
            short-textbox rounded-textbox<para/>
            c#: (Case != null) ? &quot;selected-textbox&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.Control(MSharp.ControlType)">
            <summary>
            In this field, you can select a control type from a wide range of control types for the input control e.g AutoComplete, Textbox, Checkbox List etc<para/>
            ======== DEFAULT ================================<para/>
            Textbox for string or numeric fields<para/>
            Dropdown List for collection type associations and nullable Boolean field<para/>
            Checkbox for radio button<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the type of input control for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            For Boolean type fields, Checkbox is displayed by default but you can select Radio Button with Yes / No option<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.WatermarkText(System.String)">
            <summary>
            In this field you can specify text for watermark which hovered above the input control.  This field supports both static text and C# expression.<para/>
            Note:<para/>
            - This attribute is ignored for some of the control types e.g. Dropdown lists, Checkboxes etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to hover some information to educate user about the form field which disappareas as the field is focused<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.ToolTip(System.String)">
            <summary>
            The text or markup to use for the tooltip of the control. You can use static or C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display tooltip for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Valid Email address<para/>
            Example 2<para/>
            c#: App.Settings.Current.EmailAddressTooltip<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.Readonly(System.Boolean)">
            <summary>
            When set, a literal will be generated instead of a data entry control.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you intend to just display the data for read only purposes<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property the value of which is automatically generated and you just want to display the generated value on the Form.<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in element section. On selecting a box, the form element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display form elements in groups with a heading<para/>
            You need to display form elements in left and right combinations<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the input control will cause postback.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable the postback behaviour of the input control<para/>
            ======== EXAMPLES ===============================<para/>
            Dropdown lists for data filtering<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.ChangeEventHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of the input control<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a form  element<para/>
            ======== EXAMPLES ===============================<para/>
            Filtering products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify the code to be added to the control markup.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            TextMode=&quot;Password&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.ItemCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            c#: (Case != null) ? &quot;case-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.Mandatory(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to make a form element mandatory or optional. This attribute overrides behaviour set in Modal.<para/>
            Note:<para/>
            If you change a form element which was marked as mandatory in Modal to optional  by setting this attribute to False. Then the element will not be validated on client side but server side validation will take place as set.<para/>
            ======== AS SET IN MODAL AT THE TIME OF CREATING PROPERTY <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a form element mandatory on UI.<para/>
            ======== EXAMPLES ===============================<para/>
            You have an option comment field but want to make it mandatory for a specific form<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.CustomInitializer(System.String)">
            <summary>
            In this field, you can specify a C# expression to initialize the input control. The expression specified here will be used to populate input control on page load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios when you need to initialize the input control especially custom control added on the form.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to load Categories for a custom added dropdown list<para/>
            lstCategories.DataSource = Categories;<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.LabelCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this label.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the label<para/>
            ======== EXAMPLES ===============================<para/>
            test-label<para/>
            short-label test-label<para/>
            c#: (Case != null) ? &quot;case-label&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.ControlWrapperCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of the input control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the data entry control for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-wrapper<para/>
            leftside<para/>
            add-user-wrapper<para/>
            c#: (Case != null) ? &quot;case-user-wrapper&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.CustomDataLoad(System.String)">
            <summary>
            In this field you can write a custom c# code which loads the element before data entry.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to replace the default data load with custom expression for the input control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtCaseCount = App.Context.User.Cases.Count();<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeFormElement.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to to specify the auto focus behaviour of the input control<para/>
            Often on lengthy pages if form is below the browser normal window and control focus causes unnecessary page scroll to show the default focused element you can use this property to set the<para/>
            AutoFocus to False. which will prevent page to scroll on load<para/>
            ======== DEFAULT ================================<para/>
            First element of the form receives the focus when the page is loaded.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the control Auto focus<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.AfterControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.CustomDataSave(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate the related entity property when saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic specific to UI for saving the input data especially based on custom added control on the form. Any Business logic must be written in Modal.<para/>
            ======== EXAMPLES ===============================<para/>
            this.User = App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify required field validation message for the element<para/>
            ======== DEFAULT ================================<para/>
            Please provide a value for [Form Element Name]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a custom required field message<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Name field is required.<para/>
            C# Expression:<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.DisplayFormat(System.String)">
            <summary>
            In this field you can specify the format expression for this element. It is only used in ReadOnly mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom format expression for this element.<para/>
            ======== EXAMPLES ===============================<para/>
            h2&gt;<para/>
            {0: d}<para/>
            {0: g}<para/>
            {0: c}<para/>
            c#: Item.GetFirstName()<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.BeforeLabel(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the label of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.<para/>
            ======== EXAMPLES ===============================<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.AfterControlContainer(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control container element of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Password Strength<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.BeforeControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button before Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.HeaderText(System.String)">
            <summary>
            In this field you can specify a static contents or C# expression which appear just above for form element container.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display contents as heading of the element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Contents<para/>
            ======== PERSONAL DETAILS =======================<para/>
            C# Expression<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.Label(System.String)">
            <summary>
            In this field you can specify the label text for this form element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.HelpText(System.String)">
            <summary>
            In this field you can specify the instructions to show to the user for this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to show some instruction/help text for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            Password should be at least 8 characters long.<para/>
            c#: string.Format(&quot;Help for {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.ControlCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the control.<para/>
            ======== EXAMPLES ===============================<para/>
            rounded-textbox<para/>
            short-textbox rounded-textbox<para/>
            c#: (Case != null) ? &quot;selected-textbox&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.Control(MSharp.ControlType)">
            <summary>
            In this field, you can select a control type from a wide range of control types for the input control e.g AutoComplete, Textbox, Checkbox List etc<para/>
            ======== DEFAULT ================================<para/>
            Textbox for string or numeric fields<para/>
            Dropdown List for collection type associations and nullable Boolean field<para/>
            Checkbox for radio button<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the type of input control for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            For Boolean type fields, Checkbox is displayed by default but you can select Radio Button with Yes / No option<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.WatermarkText(System.String)">
            <summary>
            In this field you can specify text for watermark which hovered above the input control.  This field supports both static text and C# expression.<para/>
            Note:<para/>
            - This attribute is ignored for some of the control types e.g. Dropdown lists, Checkboxes etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to hover some information to educate user about the form field which disappareas as the field is focused<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.ToolTip(System.String)">
            <summary>
            The text or markup to use for the tooltip of the control. You can use static or C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display tooltip for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Valid Email address<para/>
            Example 2<para/>
            c#: App.Settings.Current.EmailAddressTooltip<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.Readonly(System.Boolean)">
            <summary>
            When set, a literal will be generated instead of a data entry control.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you intend to just display the data for read only purposes<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property the value of which is automatically generated and you just want to display the generated value on the Form.<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in element section. On selecting a box, the form element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display form elements in groups with a heading<para/>
            You need to display form elements in left and right combinations<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the input control will cause postback.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable the postback behaviour of the input control<para/>
            ======== EXAMPLES ===============================<para/>
            Dropdown lists for data filtering<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.ChangeEventHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of the input control<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a form  element<para/>
            ======== EXAMPLES ===============================<para/>
            Filtering products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify the code to be added to the control markup.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            TextMode=&quot;Password&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.ItemCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            c#: (Case != null) ? &quot;case-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.Mandatory(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to make a form element mandatory or optional. This attribute overrides behaviour set in Modal.<para/>
            Note:<para/>
            If you change a form element which was marked as mandatory in Modal to optional  by setting this attribute to False. Then the element will not be validated on client side but server side validation will take place as set.<para/>
            ======== AS SET IN MODAL AT THE TIME OF CREATING PROPERTY <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a form element mandatory on UI.<para/>
            ======== EXAMPLES ===============================<para/>
            You have an option comment field but want to make it mandatory for a specific form<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.CustomInitializer(System.String)">
            <summary>
            In this field, you can specify a C# expression to initialize the input control. The expression specified here will be used to populate input control on page load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios when you need to initialize the input control especially custom control added on the form.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to load Categories for a custom added dropdown list<para/>
            lstCategories.DataSource = Categories;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.LabelCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this label.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the label<para/>
            ======== EXAMPLES ===============================<para/>
            test-label<para/>
            short-label test-label<para/>
            c#: (Case != null) ? &quot;case-label&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.ControlWrapperCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of the input control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the data entry control for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-wrapper<para/>
            leftside<para/>
            add-user-wrapper<para/>
            c#: (Case != null) ? &quot;case-user-wrapper&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.CustomDataLoad(System.String)">
            <summary>
            In this field you can write a custom c# code which loads the element before data entry.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to replace the default data load with custom expression for the input control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtCaseCount = App.Context.User.Cases.Count();<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElement.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to to specify the auto focus behaviour of the input control<para/>
            Often on lengthy pages if form is below the browser normal window and control focus causes unnecessary page scroll to show the default focused element you can use this property to set the<para/>
            AutoFocus to False. which will prevent page to scroll on load<para/>
            ======== DEFAULT ================================<para/>
            First element of the form receives the focus when the page is loaded.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the control Auto focus<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElementFilterTrigger.Criteria(System.String)">
            <summary>
            In this field you can specify the criteria which should be applied to every element of the dependant data source to filter instances which are shown on dependant control.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to filter instances which are shown on dependant control based on one or more criteria.<para/>
            ======== EXAMPLES ===============================<para/>
            Product &gt; Category<para/>
            item.Category == category<para/>
            City &gt; Country<para/>
            item.Country = country<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElementFilterTrigger.DependantSource(System.String)">
            <summary>
            In this field you can specify the data source of the dependant element.<para/>
            ======== DEFAULT ================================<para/>
            All the dependant type instances are filtered based on specified critical or all instances if no criteria is specified<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to define custom data source with complex filtration which cannot be accomplished using &quot;Filter criteria&quot; attribute<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property implement on UI Properties Section which you want to specify as the data source<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormElementFilterTrigger.MasterIsMandatory(System.Boolean)">
            <summary>
            If set to False, and no master object is selected, the details dropdown will be emptied.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the master element is not mandatory you can set this to False to make the child null<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.DataLoadCriteria(System.String)">
            <summary>
            In this field you can specify the criteria in which you want to load the data into the form.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to load the data into the form only if one or more criteria are met.<para/>
            ======== EXAMPLES ===============================<para/>
            App.Context.User == null<para/>
            App.Context.User != null &amp;&amp; App.Context.User.IsInRole(&quot;Admin&quot;)<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.Footer(System.String)">
            <summary>
            In this field you can specify the footer for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the bottom of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;The End!&quot;<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.RequestParam(System.String)">
            <summary>
            In this field you can specify a QueryString key which is used to retrieve the &quot;ID&quot; of the instance which needs to be edited on the page.<para/>
            Tips:<para/>
            - use QueryString Keys without prefixing with  &quot;.&quot; when you need to load an instance which will be directly consumed on the form.<para/>
            - Prefixing QueryString keys with  &quot;.&quot; when you need to load an instance which will be used indirectly on the form e.g. in order to populate a form field<para/>
            ======== DEFAULT ================================<para/>
            Id<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you as using more than one forms on the page and cannot use &quot;id&quot; as the QueryString to load instances for both forms.<para/>
            ======== EXAMPLES ===============================<para/>
            product<para/>
            member<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.ValidationStyle(MSharp.ValidationStyle[])">
            <summary>
            This attribute lets to choose the warning style(s) for validation message. You can use combination of styles.<para/>
            ======== DEFAULT ================================<para/>
            After Control and Message Box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to select a different warning style for making validation warnings more sophisticated<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.KeepOriginalFormatting(System.Boolean)">
            <summary>
            When set to True, the generated code will not be formatted and will be generated left aligned.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is recommended to not to set it True, because it keeping the original formatting will make it difficult to read an understand<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.Multi_Lingual(System.Nullable{System.Boolean})">
            <summary>
            If set to True, Phrases on static phrases i.e. Label Text, Heading, columns, button texts will be translated by selected language<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable multi-lingual support on a single module. Please not that if the Multi-Lingual option in project settings is set then you do not need to set it explicitly.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.HeaderText(System.String)">
            <summary>
            In this field you can specify heading for the module. All contents are placed inside h2 tag.<para/>
            ======== DEFAULT ================================<para/>
            Inferred from the entity and type of module<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you wan to specify just the heading contents<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Employee Details<para/>
            C# Expression<para/>
            c#:Item.Name + &quot; Details&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.Orientation(MSharp.Orientation)">
            <summary>
            In this attribute you can select the orientation of the form elements<para/>
            ======== DEFAULT ================================<para/>
            Vertical<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            when you need to change the orientation of the form elements<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.DataSource(System.String)">
            <summary>
            The C# code that returns an object which will be edited on this form.<para/>
            ======== DEFAULT ================================<para/>
            New instance of the entity type if supports adding new instances<para/>
            Existing instance loaded with QueryString key &quot;id&quot; if only supports editing<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need the form only for editing purpose and not for saving new instances<para/>
            ======== EXAMPLES ===============================<para/>
            A form to edit logged in user<para/>
            App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.Name(System.String)">
            <summary>
            In this field you should enter the name of the module you want to create. This name should be a unique name for the module you have created.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field for the module.<para/>
            ======== EXAMPLES ===============================<para/>
            Form: User signup<para/>
            List: Content blocks<para/>
            View: User details<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.SupportsEdit(System.Nullable{System.Boolean})">
            <summary>
            If Set to False, the form will only support adding new instances<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to restrict the form to adding only new instances<para/>
            ======== EXAMPLES ===============================<para/>
            Rating forms<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.SupportsAdd(System.Nullable{System.Boolean})">
            <summary>
            If set to False, The form will not support adding new instances.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need you form for editing purposes<para/>
            ======== EXAMPLES ===============================<para/>
            Form for currently logged in user<para/>
            Single instance entities like &quot;Settings&quot; entity type<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.GenerateSaveInDatabase(System.Nullable{System.Boolean})">
            <summary>
            If set to true, a method  SaveInDatanase()  will be generated which will call the  Database.Save()  on the instance of the form&apos;s entity type<para/>
            Note:<para/>
            This attribute is ignored if any of the Supports Edit or Supports Add attribute are set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is used to explicitly enforce generation of SaveInDatabase() method when both &quot;Support Edit&quot; and &quot;Support Add&quot; attributes are set to false.<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.Header(System.String)">
            <summary>
            The markup to add at the beginning of this module&amp;#39;s content.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the top of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            Simple Markup<para/>
            Simple Heading!<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.NamespaceImports(MSharp.NamespaceImport[])">
            <summary>
            In this field you can choose namespace(s) you need to import in the page backend.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to work with a class frequently and the namespace is not imported by default<para/>
            ======== EXAMPLES ===============================<para/>
            you need to extract web control in the backend file of a list module in order to  manipulate the data<para/>
            System.Web.UI.WebControls<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.IsInUse(System.Nullable{System.Boolean})">
            <summary>
            In this field you can specify if the module is used and should be build or not.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If your module is used in a page directly, it will be built in build actions automatically.<para/>
            If your module is not used in a page directly, but you still want it to be built, you should check this property.<para/>
            ======== EXAMPLES ===============================<para/>
            Menu Modules<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.ControllerInterfaces(System.String)">
            <summary>
            The interfaces that this user control (module) should implement.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is particularly useful when using ICallbackEventHandler interface for AJAX call backs.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;ICallbackEventHandler, IAnotherInterface&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.MarkupWrapper(System.String)">
            <summary>
            In this field you can specify a wrapper template for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When want to customize the appearance of the module by adding extra markup around it.<para/>
            ======== EXAMPLES ===============================<para/>
            [#MODULE#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.FormModule`1.RootCssClass(System.String)">
            <summary>
            In this field you can enter the css class of the module.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply some css to the module.<para/>
            ======== EXAMPLES ===============================<para/>
            twtwo-column-form<para/>
            compact-view user-order-view<para/>
            c#: (Case != null) ? &quot;progress-list&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="P:MSharp.FormModule`1.info">
            <summary>
            A helper for intellisense.
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.Data_loadCode(System.String)">
            <summary>
            In this field you can write a C# expression which populates custom control from Model object on load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to load a modal object data for the custom form element control.<para/>
            ======== EXAMPLES ===============================<para/>
            Loading data for custom Textbox Email<para/>
            txtEmail.Text = this.Member.Email;<para/>
            Loading data for custom Textbox Email from query string<para/>
            txtEmail.Text = Request[&quot;email&quot;]<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.AfterControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.Data_SaveCode(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate form object property from custom element control before saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to save data entered by user in the custom element control<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            this.User.Email = txtEmail.Text.Trim();<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.ControlMarkup(System.String)">
            <summary>
            In this field you can specify markup for the custom form element control e.g. Textbox, Dropdown list etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When pre-defined controls available in &quot;Control type&quot;  doesn&apos;t fulfil requirement<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.CustomDataSave(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate the related entity property when saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic specific to UI for saving the input data especially based on custom added control on the form. Any Business logic must be written in Modal.<para/>
            ======== EXAMPLES ===============================<para/>
            this.User = App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.PropertyName(System.String)">
            <summary>
            In this field you can specify &quot;ID&quot; of the custom control which will be used to access the control in server side<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have created a custom form element and have selected a control type.<para/>
            ======== EXAMPLES ===============================<para/>
            txtEmail<para/>
            lstCountries<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify required field validation message for the element<para/>
            ======== DEFAULT ================================<para/>
            Please provide a value for [Form Element Name]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a custom required field message<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Name field is required.<para/>
            C# Expression:<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.DisplayFormat(System.String)">
            <summary>
            In this field you can specify the format expression for this element. It is only used in ReadOnly mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom format expression for this element.<para/>
            ======== EXAMPLES ===============================<para/>
            h2&gt;<para/>
            {0: d}<para/>
            {0: g}<para/>
            {0: c}<para/>
            c#: Item.GetFirstName()<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.BeforeLabel(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the label of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.<para/>
            ======== EXAMPLES ===============================<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.AfterControlContainer(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control container element of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Password Strength<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.BeforeControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button before Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.HeaderText(System.String)">
            <summary>
            In this field you can specify a static contents or C# expression which appear just above for form element container.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display contents as heading of the element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Contents<para/>
            ======== PERSONAL DETAILS =======================<para/>
            C# Expression<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.Label(System.String)">
            <summary>
            In this field you can specify the label text for this form element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.HelpText(System.String)">
            <summary>
            In this field you can specify the instructions to show to the user for this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to show some instruction/help text for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            Password should be at least 8 characters long.<para/>
            c#: string.Format(&quot;Help for {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.ControlCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the control.<para/>
            ======== EXAMPLES ===============================<para/>
            rounded-textbox<para/>
            short-textbox rounded-textbox<para/>
            c#: (Case != null) ? &quot;selected-textbox&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.Control(MSharp.ControlType)">
            <summary>
            In this field, you can select a control type from a wide range of control types for the input control e.g AutoComplete, Textbox, Checkbox List etc<para/>
            ======== DEFAULT ================================<para/>
            Textbox for string or numeric fields<para/>
            Dropdown List for collection type associations and nullable Boolean field<para/>
            Checkbox for radio button<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the type of input control for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            For Boolean type fields, Checkbox is displayed by default but you can select Radio Button with Yes / No option<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.WatermarkText(System.String)">
            <summary>
            In this field you can specify text for watermark which hovered above the input control.  This field supports both static text and C# expression.<para/>
            Note:<para/>
            - This attribute is ignored for some of the control types e.g. Dropdown lists, Checkboxes etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to hover some information to educate user about the form field which disappareas as the field is focused<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.ToolTip(System.String)">
            <summary>
            The text or markup to use for the tooltip of the control. You can use static or C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display tooltip for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Valid Email address<para/>
            Example 2<para/>
            c#: App.Settings.Current.EmailAddressTooltip<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.Readonly(System.Boolean)">
            <summary>
            When set, a literal will be generated instead of a data entry control.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you intend to just display the data for read only purposes<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property the value of which is automatically generated and you just want to display the generated value on the Form.<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in element section. On selecting a box, the form element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display form elements in groups with a heading<para/>
            You need to display form elements in left and right combinations<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the input control will cause postback.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable the postback behaviour of the input control<para/>
            ======== EXAMPLES ===============================<para/>
            Dropdown lists for data filtering<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.ChangeEventHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of the input control<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a form  element<para/>
            ======== EXAMPLES ===============================<para/>
            Filtering products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify the code to be added to the control markup.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            TextMode=&quot;Password&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.ItemCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            c#: (Case != null) ? &quot;case-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.Mandatory(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to make a form element mandatory or optional. This attribute overrides behaviour set in Modal.<para/>
            Note:<para/>
            If you change a form element which was marked as mandatory in Modal to optional  by setting this attribute to False. Then the element will not be validated on client side but server side validation will take place as set.<para/>
            ======== AS SET IN MODAL AT THE TIME OF CREATING PROPERTY <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a form element mandatory on UI.<para/>
            ======== EXAMPLES ===============================<para/>
            You have an option comment field but want to make it mandatory for a specific form<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.CustomInitializer(System.String)">
            <summary>
            In this field, you can specify a C# expression to initialize the input control. The expression specified here will be used to populate input control on page load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios when you need to initialize the input control especially custom control added on the form.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to load Categories for a custom added dropdown list<para/>
            lstCategories.DataSource = Categories;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.LabelCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this label.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the label<para/>
            ======== EXAMPLES ===============================<para/>
            test-label<para/>
            short-label test-label<para/>
            c#: (Case != null) ? &quot;case-label&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.ControlWrapperCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of the input control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the data entry control for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-wrapper<para/>
            leftside<para/>
            add-user-wrapper<para/>
            c#: (Case != null) ? &quot;case-user-wrapper&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.CustomDataLoad(System.String)">
            <summary>
            In this field you can write a custom c# code which loads the element before data entry.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to replace the default data load with custom expression for the input control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtCaseCount = App.Context.User.Cases.Count();<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFormElement.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to to specify the auto focus behaviour of the input control<para/>
            Often on lengthy pages if form is below the browser normal window and control focus causes unnecessary page scroll to show the default focused element you can use this property to set the<para/>
            AutoFocus to False. which will prevent page to scroll on load<para/>
            ======== DEFAULT ================================<para/>
            First element of the form receives the focus when the page is loaded.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the control Auto focus<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.EnableNullSelection(System.Nullable{System.Boolean})">
            <summary>
            If set to true, null vale will  be allowed to select from the populated list items<para/>
            Tips:<para/>
            This attribute works in junction with populate Items Codes<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you display a list of option using populate items code and want to display a null option<para/>
            ======== EXAMPLES ===============================<para/>
            You have a nullable field in a survey form and want to allow user to select no option<para/>
            You have form for profile management and display a list of secondary language as the nullable field<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.AfterControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.DataSource(System.String)">
            <summary>
            In this field you can add C# code which adds ListItem objects to a collection called &quot;result&quot;. E.g:<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display textual options for a numeric form element e.g. Rating options<para/>
            ======== EXAMPLES ===============================<para/>
            result.Add(&quot;my option&quot;,&quot;3&quot;);<para/>
            result.Add(&quot;Excellent&quot;,&quot;5&quot;);<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.CustomDataSave(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate the related entity property when saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic specific to UI for saving the input data especially based on custom added control on the form. Any Business logic must be written in Modal.<para/>
            ======== EXAMPLES ===============================<para/>
            this.User = App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify required field validation message for the element<para/>
            ======== DEFAULT ================================<para/>
            Please provide a value for [Form Element Name]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a custom required field message<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Name field is required.<para/>
            C# Expression:<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.DisplayFormat(System.String)">
            <summary>
            In this field you can specify the format expression for this element. It is only used in ReadOnly mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom format expression for this element.<para/>
            ======== EXAMPLES ===============================<para/>
            h2&gt;<para/>
            {0: d}<para/>
            {0: g}<para/>
            {0: c}<para/>
            c#: Item.GetFirstName()<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.BeforeLabel(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the label of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.<para/>
            ======== EXAMPLES ===============================<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.AfterControlContainer(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control container element of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Password Strength<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.BeforeControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button before Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.HeaderText(System.String)">
            <summary>
            In this field you can specify a static contents or C# expression which appear just above for form element container.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display contents as heading of the element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Contents<para/>
            ======== PERSONAL DETAILS =======================<para/>
            C# Expression<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.Label(System.String)">
            <summary>
            In this field you can specify the label text for this form element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.HelpText(System.String)">
            <summary>
            In this field you can specify the instructions to show to the user for this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to show some instruction/help text for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            Password should be at least 8 characters long.<para/>
            c#: string.Format(&quot;Help for {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.ControlCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the control.<para/>
            ======== EXAMPLES ===============================<para/>
            rounded-textbox<para/>
            short-textbox rounded-textbox<para/>
            c#: (Case != null) ? &quot;selected-textbox&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.Control(MSharp.ControlType)">
            <summary>
            In this field, you can select a control type from a wide range of control types for the input control e.g AutoComplete, Textbox, Checkbox List etc<para/>
            ======== DEFAULT ================================<para/>
            Textbox for string or numeric fields<para/>
            Dropdown List for collection type associations and nullable Boolean field<para/>
            Checkbox for radio button<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the type of input control for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            For Boolean type fields, Checkbox is displayed by default but you can select Radio Button with Yes / No option<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.WatermarkText(System.String)">
            <summary>
            In this field you can specify text for watermark which hovered above the input control.  This field supports both static text and C# expression.<para/>
            Note:<para/>
            - This attribute is ignored for some of the control types e.g. Dropdown lists, Checkboxes etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to hover some information to educate user about the form field which disappareas as the field is focused<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.ToolTip(System.String)">
            <summary>
            The text or markup to use for the tooltip of the control. You can use static or C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display tooltip for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Valid Email address<para/>
            Example 2<para/>
            c#: App.Settings.Current.EmailAddressTooltip<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.Readonly(System.Boolean)">
            <summary>
            When set, a literal will be generated instead of a data entry control.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you intend to just display the data for read only purposes<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property the value of which is automatically generated and you just want to display the generated value on the Form.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in element section. On selecting a box, the form element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display form elements in groups with a heading<para/>
            You need to display form elements in left and right combinations<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the input control will cause postback.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable the postback behaviour of the input control<para/>
            ======== EXAMPLES ===============================<para/>
            Dropdown lists for data filtering<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.ChangeEventHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of the input control<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a form  element<para/>
            ======== EXAMPLES ===============================<para/>
            Filtering products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify the code to be added to the control markup.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            TextMode=&quot;Password&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.ItemCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            c#: (Case != null) ? &quot;case-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.Mandatory(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to make a form element mandatory or optional. This attribute overrides behaviour set in Modal.<para/>
            Note:<para/>
            If you change a form element which was marked as mandatory in Modal to optional  by setting this attribute to False. Then the element will not be validated on client side but server side validation will take place as set.<para/>
            ======== AS SET IN MODAL AT THE TIME OF CREATING PROPERTY <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a form element mandatory on UI.<para/>
            ======== EXAMPLES ===============================<para/>
            You have an option comment field but want to make it mandatory for a specific form<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.CustomInitializer(System.String)">
            <summary>
            In this field, you can specify a C# expression to initialize the input control. The expression specified here will be used to populate input control on page load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios when you need to initialize the input control especially custom control added on the form.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to load Categories for a custom added dropdown list<para/>
            lstCategories.DataSource = Categories;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.LabelCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this label.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the label<para/>
            ======== EXAMPLES ===============================<para/>
            test-label<para/>
            short-label test-label<para/>
            c#: (Case != null) ? &quot;case-label&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.ControlWrapperCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of the input control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the data entry control for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-wrapper<para/>
            leftside<para/>
            add-user-wrapper<para/>
            c#: (Case != null) ? &quot;case-user-wrapper&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.CustomDataLoad(System.String)">
            <summary>
            In this field you can write a custom c# code which loads the element before data entry.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to replace the default data load with custom expression for the input control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtCaseCount = App.Context.User.Cases.Count();<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberFormElement.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to to specify the auto focus behaviour of the input control<para/>
            Often on lengthy pages if form is below the browser normal window and control focus causes unnecessary page scroll to show the default focused element you can use this property to set the<para/>
            AutoFocus to False. which will prevent page to scroll on load<para/>
            ======== DEFAULT ================================<para/>
            First element of the form receives the focus when the page is loaded.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the control Auto focus<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.AfterControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.CustomDataSave(System.String)">
            <summary>
            In this field, you can specify a C# expression which will be used to populate the related entity property when saving form data<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic specific to UI for saving the input data especially based on custom added control on the form. Any Business logic must be written in Modal.<para/>
            ======== EXAMPLES ===============================<para/>
            this.User = App.Context.User<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify required field validation message for the element<para/>
            ======== DEFAULT ================================<para/>
            Please provide a value for [Form Element Name]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a custom required field message<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Name field is required.<para/>
            C# Expression:<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.DisplayFormat(System.String)">
            <summary>
            In this field you can specify the format expression for this element. It is only used in ReadOnly mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom format expression for this element.<para/>
            ======== EXAMPLES ===============================<para/>
            h2&gt;<para/>
            {0: d}<para/>
            {0: g}<para/>
            {0: c}<para/>
            c#: Item.GetFirstName()<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.BeforeLabel(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the label of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.<para/>
            ======== EXAMPLES ===============================<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.AfterControlContainer(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control container element of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button after Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Password Strength<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.BeforeControl(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just before the input control of this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special design requirements.You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            Placing the Find Button before Postcode textbox<para/>
            [#BUTTONS(Find)#]<para/>
            Suggesting Mandatory Fields with an asterix (*)<para/>
            (*)<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.HeaderText(System.String)">
            <summary>
            In this field you can specify a static contents or C# expression which appear just above for form element container.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display contents as heading of the element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Contents<para/>
            ======== PERSONAL DETAILS =======================<para/>
            C# Expression<para/>
            ========  =======================================<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.Label(System.String)">
            <summary>
            In this field you can specify the label text for this form element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.HelpText(System.String)">
            <summary>
            In this field you can specify the instructions to show to the user for this form element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to show some instruction/help text for the form element.<para/>
            ======== EXAMPLES ===============================<para/>
            Password should be at least 8 characters long.<para/>
            c#: string.Format(&quot;Help for {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.ControlCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the control.<para/>
            ======== EXAMPLES ===============================<para/>
            rounded-textbox<para/>
            short-textbox rounded-textbox<para/>
            c#: (Case != null) ? &quot;selected-textbox&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.Control(MSharp.ControlType)">
            <summary>
            In this field, you can select a control type from a wide range of control types for the input control e.g AutoComplete, Textbox, Checkbox List etc<para/>
            ======== DEFAULT ================================<para/>
            Textbox for string or numeric fields<para/>
            Dropdown List for collection type associations and nullable Boolean field<para/>
            Checkbox for radio button<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the type of input control for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            For Boolean type fields, Checkbox is displayed by default but you can select Radio Button with Yes / No option<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.WatermarkText(System.String)">
            <summary>
            In this field you can specify text for watermark which hovered above the input control.  This field supports both static text and C# expression.<para/>
            Note:<para/>
            - This attribute is ignored for some of the control types e.g. Dropdown lists, Checkboxes etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to hover some information to educate user about the form field which disappareas as the field is focused<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.ToolTip(System.String)">
            <summary>
            The text or markup to use for the tooltip of the control. You can use static or C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display tooltip for the form element<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Valid Email address<para/>
            Example 2<para/>
            c#: App.Settings.Current.EmailAddressTooltip<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.Readonly(System.Boolean)">
            <summary>
            When set, a literal will be generated instead of a data entry control.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you intend to just display the data for read only purposes<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property the value of which is automatically generated and you just want to display the generated value on the Form.<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in element section. On selecting a box, the form element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display form elements in groups with a heading<para/>
            You need to display form elements in left and right combinations<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the input control will cause postback.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable the postback behaviour of the input control<para/>
            ======== EXAMPLES ===============================<para/>
            Dropdown lists for data filtering<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.ChangeEventHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of the input control<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a form  element<para/>
            ======== EXAMPLES ===============================<para/>
            Filtering products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify the code to be added to the control markup.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            TextMode=&quot;Password&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.ItemCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            c#: (Case != null) ? &quot;case-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.Mandatory(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to make a form element mandatory or optional. This attribute overrides behaviour set in Modal.<para/>
            Note:<para/>
            If you change a form element which was marked as mandatory in Modal to optional  by setting this attribute to False. Then the element will not be validated on client side but server side validation will take place as set.<para/>
            ======== AS SET IN MODAL AT THE TIME OF CREATING PROPERTY <para/>
            TODO: Describe...<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a form element mandatory on UI.<para/>
            ======== EXAMPLES ===============================<para/>
            You have an option comment field but want to make it mandatory for a specific form<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.CustomInitializer(System.String)">
            <summary>
            In this field, you can specify a C# expression to initialize the input control. The expression specified here will be used to populate input control on page load.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios when you need to initialize the input control especially custom control added on the form.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to load Categories for a custom added dropdown list<para/>
            lstCategories.DataSource = Categories;<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.LabelCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this label.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the label<para/>
            ======== EXAMPLES ===============================<para/>
            test-label<para/>
            short-label test-label<para/>
            c#: (Case != null) ? &quot;case-label&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.ControlWrapperCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of the input control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the data entry control for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-wrapper<para/>
            leftside<para/>
            add-user-wrapper<para/>
            c#: (Case != null) ? &quot;case-user-wrapper&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.CustomDataLoad(System.String)">
            <summary>
            In this field you can write a custom c# code which loads the element before data entry.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to replace the default data load with custom expression for the input control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtCaseCount = App.Context.User.Cases.Count();<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringFormElement.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
            This attribute allows to to specify the auto focus behaviour of the input control<para/>
            Often on lengthy pages if form is below the browser normal window and control focus causes unnecessary page scroll to show the default focused element you can use this property to set the<para/>
            AutoFocus to False. which will prevent page to scroll on load<para/>
            ======== DEFAULT ================================<para/>
            First element of the form receives the focus when the page is loaded.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the control Auto focus<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.BackGradientStyle(System.String)">
            <summary>
            In this field you can specify the style of background gradient colour. you can specify one of the below styles<para/>
            - TopBottom<para/>
            - BottomTop<para/>
            - LeftRight<para/>
            - RightLeft<para/>
            ======== DEFAULT ================================<para/>
            TopBottom<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the gradient style in order to acquire special appearance style<para/>
            ======== EXAMPLES ===============================<para/>
            LeftRight<para/>
            BottomTop<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.BackColor(System.String)">
            <summary>
            In this field you can specify the Hex code of a colour for the chart background<para/>
            ======== DEFAULT ================================<para/>
            #D3DFF0<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special appearance style<para/>
            ======== EXAMPLES ===============================<para/>
            #D3DdF0<para/>
            #FFFFF<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.BackSecondaryColor(System.String)">
            <summary>
            In this field you should specify the Hex code of a secondary colour for the chart background in gradient style<para/>
            ======== DEFAULT ================================<para/>
            #FFFFFF<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special appearance style<para/>
            ======== EXAMPLES ===============================<para/>
            #D3DdF0<para/>
            #000000<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.LegendSettings(System.String)">
            <summary>
            In this field you can specify attributes for the asp.net legend control<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customise the legend using extra attributes<para/>
            ======== EXAMPLES ===============================<para/>
            BackColor=&quot;Transparent&quot;<para/>
            IsTextAutoFit=&quot;True&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.BorderWidth(System.String)">
            <summary>
            In this field you can specify a numeric value for the width of the chart border<para/>
            ======== DEFAULT ================================<para/>
            2<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customise the chart in order to acquire special appearance style<para/>
            ======== EXAMPLES ===============================<para/>
            1<para/>
            3<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.Palette(System.String)">
            <summary>
            In this field you can specify one of the following colour palette  (Colour scheme of the chart)<para/>
            - Berry<para/>
            - Bright<para/>
            - Bright Pastel<para/>
            - Chocolate<para/>
            - Earth Tones<para/>
            - Excel<para/>
            - Fire<para/>
            - GrayScale<para/>
            - Light<para/>
            - Pastel<para/>
            - Sea Green<para/>
            - Semi Transparent<para/>
            ======== DEFAULT ================================<para/>
            Bright Pastel<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want apply special design style<para/>
            ======== EXAMPLES ===============================<para/>
            Chocolate<para/>
            Excel<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.Name(System.String)">
            <summary>
            In this field you can specify the name of chart which is used to generate the Id of the asp.net chart control with a prefix of &quot;Chart&quot;<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory field .<para/>
            ======== EXAMPLES ===============================<para/>
            Pie chart<para/>
            Daily Sale Line Chart<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.DisplayLegends(System.Boolean)">
            <summary>
            If set to False, The legends text will not be shown on the side of the chart<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to display the legends text. This can also be used to have extra space for the chart<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.AutosizeLegendFont(System.Boolean)">
            <summary>
            If set to False, the font of the chart legend will not be sized automatically based on the space available<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is recommended to keep this setting as it makes chart more readable and avoid text overlapping as much possible<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.BorderSkin(MSharp.ChartBorderSkin)">
            <summary>
            This attribute provides border options of which you can choose one to set the border skin  of the chart<para/>
            ======== DEFAULT ================================<para/>
            Sunken<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to acquire special appearance style<para/>
            ======== EXAMPLES ===============================<para/>
            Raised<para/>
            FrameTitle1<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.Width(System.Int32)">
            <summary>
            In this field you can specify a numeric value for the width of the chart<para/>
            ======== DEFAULT ================================<para/>
            412<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customise the chart in order to acquire special appearance style<para/>
            ======== EXAMPLES ===============================<para/>
            300<para/>
            500<para/>
            </summary>
        </member>
        <member name="M:MSharp.Chart.Height(System.Int32)">
            <summary>
            In this field you can specify a numeric value for the height of the chart<para/>
            ======== DEFAULT ================================<para/>
            296<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customise the chart in order to acquire special appearance style<para/>
            ======== EXAMPLES ===============================<para/>
            300<para/>
            500<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartSerie.CustomSettings(System.String)">
            <summary>
            In this field you can specify C# expression to define properties of data point.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customise the series data points<para/>
            ======== EXAMPLES ===============================<para/>
            ToolTip = item.description<para/>
            ToolTip = item.description,<para/>
            LabelAngle = 45,<para/>
            AxisLabel = axisLabel,<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartSerie.Name(System.String)">
            <summary>
            In this field you can specify name of the chart series<para/>
            ======== DEFAULT ================================<para/>
            Default<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Comments pie chart<para/>
            Sales Line Chart<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartSerie.DataSource(System.String)">
            <summary>
            In this field you can provide a collection type object as the DataSource of the chart<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory field<para/>
            ======== EXAMPLES ===============================<para/>
            You want to use the same DataSource as of List Module<para/>
            GetDataSource()<para/>
            You need to provide a custom DataSource<para/>
            Sales.DailyReport()<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartSerie.AxisTextExpression(System.String)">
            <summary>
            A c# expression which returns a string value for the x-axis label of the data point.<para/>
            Tips:<para/>
            - use &quot;item&quot; to reference each element in the DataSource sequence<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use when you need assign data point label at runtime<para/>
            ======== EXAMPLES ===============================<para/>
            item.DayOfWeek<para/>
            (item.NumberOfComments / TotalComments ) * 100 + &quot;%&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartSerie.ValueExpression(System.String)">
            <summary>
            A C# expression that returns a double value. Which is used to draw each data point<para/>
            Tips:<para/>
            - use &quot;item&quot; to reference each element in the DataSource sequence<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            item.CalculateValue()<para/>
            item.NumberofNewFeeds<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartSerie.LabelExpression(System.String)">
            <summary>
            In this field you can specify c# Expression to specify a string type value for the text of each data point in the plot. This will override the axis text expression attribute<para/>
            Tips:<para/>
            - use &quot;item&quot; to reference each element in the DataSource sequence<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this to display text for data point label in the plot<para/>
            ======== EXAMPLES ===============================<para/>
            item.DayOfWeek<para/>
            (item.Sales / 1000).Round(0) + &quot;K&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartSerie.LegendTextExpression(System.String)">
            <summary>
            In this field you can specify a C# expression which must return a string value to display the series legend for each data point<para/>
            Tips:<para/>
            - use &quot;item&quot; to reference each element in the DataSource sequence<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use when you need assign data point label at runtime<para/>
            ======== EXAMPLES ===============================<para/>
            item.Category.Name<para/>
            item.Name<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartSerie.LegendText(System.String)">
            <summary>
            In this field you can specify a tax for the series legend.<para/>
            Tips:<para/>
            - Use Legend Text expression to specify dynamic text<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to specify static text for the series legend<para/>
            ======== EXAMPLES ===============================<para/>
            Members<para/>
            Products By Dates<para/>
            </summary>
        </member>
        <member name="M:MSharp.ChartTitle.Text(System.String)">
            <summary>
            You should enter the display text of the chart in this field.This text is displayed above the chart as heading of the chart<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            To set the display text of the chart<para/>
            ======== EXAMPLES ===============================<para/>
            New Feeds by Tags<para/>
            c#: string.Format(&quot;chart{0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.MemoryFilterCode(System.String)">
            <summary>
            In this field you can specify any dynamic logic scenario using C# expression. You must using &quot;result&quot; object to specify any lambda or custom expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply complex filter expression.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            result = results.Where(x=&gt; x.Products.Any());<para/>
            Example 2<para/>
            result = results.Where(x=&gt; txtPostCode.Text.HasValue() &amp;&amp;  x.Address.PostCode = txtPostcode.Text.Trim());<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.WatermarkText(System.String)">
            <summary>
            In this field you can specify contents which appear on the input control as watermark text<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Usually when you want to display a help text or any contents to inform user about something<para/>
            ======== EXAMPLES ===============================<para/>
            Please enter email address ere<para/>
            Postcode with without space e.g. AB12CD<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.DatabaseFilterCode(System.String)">
            <summary>
            In this C# expression field, you can specify a custom filter. This filter expression is added to Search Filters which are applied on dataset for this list module.<para/>
            Tips:<para/>
            You must use write expression like AddFilter(u=&gt; Your Filter expression on each instance)<para/>
            ======== DEFAULT ================================<para/>
            M# generates appropriate filter (Except Custom search Element)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If the property is persistent in DB and you want add a custom logic filter<para/>
            ======== EXAMPLES ===============================<para/>
            Filter for email property<para/>
            if (txtEmail.Text.HasValue())<para/>
            {<para/>
            AddFilter(u =&gt; u.Email.Contains(txtEmail.Text.Trim(), false));<para/>
            }<para/>
            Filter for Postcode property<para/>
            if (txtPostcode.Text.HasValue())<para/>
            {<para/>
            AddFilter(u =&gt; u.Postcode = txtEmail.Text.Trim());<para/>
            }<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.AfterInput(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this search filter.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need customise the filter control by adding contents after input control.<para/>
            You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to display help text using custom html markup and static text and JQuery<para/>
            Please enter email address you want to search<para/>
            Placing the search Button<para/>
            [#BUTTONS(Search)#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.Label(System.String)">
            <summary>
            In this field you can specify static text or C# expression for label of the input control.<para/>
            Tips:<para/>
            - use keyword [#EMPTY#], if you don&apos;t want to display the label<para/>
            ======== DEFAULT ================================<para/>
            Property Name<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to customise the Label associated to filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Don&apos;t display label<para/>
            [#EMPTY#]<para/>
            Static Text<para/>
            Email:<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify pre-defined or custom attributes for input control of this filter element.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            OnSelectedIndexChanged=&quot;control_SelectedIndexChanged&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.ValueChangedHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of a filter element<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Loading products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.RowCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this filter element.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When a special appearance style is needed for the filter element..<para/>
            ======== EXAMPLES ===============================<para/>
            narrow-item<para/>
            narrow-item long-item<para/>
            c#: (Case != null) ? &quot;selected-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in search section. On selecting a box, the filter element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonFilterElement`1.NoLabel">
            <summary>
            Sets the label of this element to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.FilterElement`1.MemoryFilterCode(System.String)">
            <summary>
            In this field you can specify any dynamic logic scenario using C# expression. You must using &quot;result&quot; object to specify any lambda or custom expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply complex filter expression.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            result = results.Where(x=&gt; x.Products.Any());<para/>
            Example 2<para/>
            result = results.Where(x=&gt; txtPostCode.Text.HasValue() &amp;&amp;  x.Address.PostCode = txtPostcode.Text.Trim());<para/>
            </summary>
        </member>
        <member name="M:MSharp.FilterElement`1.WatermarkText(System.String)">
            <summary>
            In this field you can specify contents which appear on the input control as watermark text<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Usually when you want to display a help text or any contents to inform user about something<para/>
            ======== EXAMPLES ===============================<para/>
            Please enter email address ere<para/>
            Postcode with without space e.g. AB12CD<para/>
            </summary>
        </member>
        <member name="M:MSharp.FilterElement`1.DatabaseFilterCode(System.String)">
            <summary>
            In this C# expression field, you can specify a custom filter. This filter expression is added to Search Filters which are applied on dataset for this list module.<para/>
            Tips:<para/>
            You must use write expression like AddFilter(u=&gt; Your Filter expression on each instance)<para/>
            ======== DEFAULT ================================<para/>
            M# generates appropriate filter (Except Custom search Element)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If the property is persistent in DB and you want add a custom logic filter<para/>
            ======== EXAMPLES ===============================<para/>
            Filter for email property<para/>
            if (txtEmail.Text.HasValue())<para/>
            {<para/>
            AddFilter(u =&gt; u.Email.Contains(txtEmail.Text.Trim(), false));<para/>
            }<para/>
            Filter for Postcode property<para/>
            if (txtPostcode.Text.HasValue())<para/>
            {<para/>
            AddFilter(u =&gt; u.Postcode = txtEmail.Text.Trim());<para/>
            }<para/>
            </summary>
        </member>
        <member name="M:MSharp.FilterElement`1.AfterInput(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this search filter.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need customise the filter control by adding contents after input control.<para/>
            You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to display help text using custom html markup and static text and JQuery<para/>
            Please enter email address you want to search<para/>
            Placing the search Button<para/>
            [#BUTTONS(Search)#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.FilterElement`1.Label(System.String)">
            <summary>
            In this field you can specify static text or C# expression for label of the input control.<para/>
            Tips:<para/>
            - use keyword [#EMPTY#], if you don&apos;t want to display the label<para/>
            ======== DEFAULT ================================<para/>
            Property Name<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to customise the Label associated to filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Don&apos;t display label<para/>
            [#EMPTY#]<para/>
            Static Text<para/>
            Email:<para/>
            </summary>
        </member>
        <member name="M:MSharp.FilterElement`1.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify pre-defined or custom attributes for input control of this filter element.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            OnSelectedIndexChanged=&quot;control_SelectedIndexChanged&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FilterElement`1.ValueChangedHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of a filter element<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Loading products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FilterElement`1.RowCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this filter element.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When a special appearance style is needed for the filter element..<para/>
            ======== EXAMPLES ===============================<para/>
            narrow-item<para/>
            narrow-item long-item<para/>
            c#: (Case != null) ? &quot;selected-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.FilterElement`1.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in search section. On selecting a box, the filter element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.ViewModelName(System.String)">
            <summary>
            In this field you can specify ID of the custom control which will be used to access the control in server side<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have created a custom filter element and have selected a control type.<para/>
            ======== EXAMPLES ===============================<para/>
            txtEmail<para/>
            lstCategories<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.ControlType(MSharp.ControlType)">
            <summary>
            This attribute lets to choose the control type for the custom filter element server control<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is recommended to use it always when you use custom filter element<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.MemoryFilterCode(System.String)">
            <summary>
            In this field you can specify any dynamic logic scenario using C# expression. You must using &quot;result&quot; object to specify any lambda or custom expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply complex filter expression.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            result = results.Where(x=&gt; x.Products.Any());<para/>
            Example 2<para/>
            result = results.Where(x=&gt; txtPostCode.Text.HasValue() &amp;&amp;  x.Address.PostCode = txtPostcode.Text.Trim());<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.ControlMarkup(System.String)">
            <summary>
            In this field you can specify markup for the filter element control e.g. Textbox, Dropdown list etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When pre-defined controls available in &quot;Control type&quot;  doesn&apos;t fulfil requirement<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.WatermarkText(System.String)">
            <summary>
            In this field you can specify contents which appear on the input control as watermark text<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Usually when you want to display a help text or any contents to inform user about something<para/>
            ======== EXAMPLES ===============================<para/>
            Please enter email address ere<para/>
            Postcode with without space e.g. AB12CD<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.DatabaseFilterCode(System.String)">
            <summary>
            In this C# expression field, you can specify a custom filter. This filter expression is added to Search Filters which are applied on dataset for this list module.<para/>
            Tips:<para/>
            You must use write expression like AddFilter(u=&gt; Your Filter expression on each instance)<para/>
            ======== DEFAULT ================================<para/>
            M# generates appropriate filter (Except Custom search Element)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If the property is persistent in DB and you want add a custom logic filter<para/>
            ======== EXAMPLES ===============================<para/>
            Filter for email property<para/>
            if (txtEmail.Text.HasValue())<para/>
            {<para/>
            AddFilter(u =&gt; u.Email.Contains(txtEmail.Text.Trim(), false));<para/>
            }<para/>
            Filter for Postcode property<para/>
            if (txtPostcode.Text.HasValue())<para/>
            {<para/>
            AddFilter(u =&gt; u.Postcode = txtEmail.Text.Trim());<para/>
            }<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.ControlResetStatement(System.String)">
            <summary>
            In this field you can specify C# expression to reset the custom filter element control<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need reset the custom filter control after search is performed<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.AfterInput(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this search filter.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need customise the filter control by adding contents after input control.<para/>
            You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to display help text using custom html markup and static text and JQuery<para/>
            Please enter email address you want to search<para/>
            Placing the search Button<para/>
            [#BUTTONS(Search)#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.Label(System.String)">
            <summary>
            In this field you can specify static text or C# expression for label of the input control.<para/>
            Tips:<para/>
            - use keyword [#EMPTY#], if you don&apos;t want to display the label<para/>
            ======== DEFAULT ================================<para/>
            Property Name<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to customise the Label associated to filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Don&apos;t display label<para/>
            [#EMPTY#]<para/>
            Static Text<para/>
            Email:<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify pre-defined or custom attributes for input control of this filter element.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            OnSelectedIndexChanged=&quot;control_SelectedIndexChanged&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.ValueChangedHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of a filter element<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Loading products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.RowCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this filter element.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When a special appearance style is needed for the filter element..<para/>
            ======== EXAMPLES ===============================<para/>
            narrow-item<para/>
            narrow-item long-item<para/>
            c#: (Case != null) ? &quot;selected-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in search section. On selecting a box, the filter element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericFilterElement`1.NoLabel">
            <summary>
            Sets the label of this element to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.ListButton`1.HeaderTemplate(System.String)">
            <summary>
            The markup to appear in the header template of the button element in the list.<para/>
            List elements including button and custom elements are placed inside   tag of the grid view control.<para/>
            Markup / Template specified in this field  will be places in   of the respective   tag<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to add a custom markup for the footer of the element in the list.<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            ======== HEADING ================================<para/>
            C# Expression<para/>
            [*Name*]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.RepeatDataSource(System.String)">
            <summary>
            This is a C# expression field. In this field you can specify a collection type data source.<para/>
            If the data source is specified, M# generates an asp.net &quot;Repeater Control&quot; with the specified &quot;DataSource&quot; and placed the button as the &quot;ItemTemplate&quot; of the &quot;Repeater Control&quot;<para/>
            Tip:<para/>
            - You can access each public property / method of each element of the data source sequence in other attributes of the same button e.g. Image URL, Text etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This attribute is very useful when you want to render multiple button based on a “DataSource” e.g. List of users to link their profiles or Products of a category<para/>
            ======== EXAMPLES ===============================<para/>
            You want to render buttons for all the active users with FullName as the button text<para/>
            Repeat data source: Item.GetActiveEmployees()<para/>
            Text: C#: (Container.DataItem as Employee).FullName<para/>
            You want to render buttons for a category products with thumbnail images and link to the View Page<para/>
            Repeat data source: Item.Products<para/>
            Image URL: C#: (Container.DataItem as Product).Photo.Url()<para/>
            Query String: C#: (Container.DataItem as Product).ID<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.Text(System.String)">
            <summary>
            You should enter the display text of the button in this field.<para/>
            Supported formats:<para/>
            - Plain text<para/>
            - c# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            To set the display text of the button.<para/>
            ======== EXAMPLES ===============================<para/>
            Add user<para/>
            c#: string.Format(&quot;Add {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.ExcelTemplate(System.String)">
            <summary>
            Specifies an alternative output format when this field is exported to Excel.<para/>
            By default every field is exported to Excel as it is displayed on the screen.<para/>
            This field allows you to use an alternative format for the Excel file.<para/>
            ======== DEFAULT ================================<para/>
            By default the Excel format of a field is the same as the format of the field itself.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you one to specify a different format string for the field when it&apos;s formatted to Excel.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;{0:d}&quot;.FormatWith(Item.CreatedDate)<para/>
            Using a custom date format<para/>
            &quot;Unexportable&quot;<para/>
            A literal string<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.CausesValidation(System.Boolean)">
            <summary>
            If set to True, the Validation will be performed on the module when the button is clicked.<para/>
            ======== DEFAULT ================================<para/>
            True (Except Cancel Button which is generated at the time of creating a module)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to perform validation on button click.<para/>
            ======== EXAMPLES ===============================<para/>
            For cancel button which you don&apos;t want to validate the page and just leave it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.DisplayMode(MSharp.DisplayMode)">
            <summary>
            This property sets the visibility options of a column in a list module. If at least one column in a list has a display mode value other than default, then it would become possible for the users to select the columns they would like to see in the list.<para/>
            There are four possible options for this attribute:<para/>
            1. Always: means this column must be always visible and users can not hide it<para/>
            2. Default: the default behaviour means it will be visible, but users can hide it<para/>
            3. Selectable: means this column will be initially hidden, but users can make it visible<para/>
            4. Hidden: means this column will be hidden and users will not be able to make it visible.<para/>
            ======== DEFAULT ================================<para/>
            &quot;Default&quot; means it will be visible, but users can hide/unhide it.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If you set the Display mode of one single columns, you will change the behaviour of the whole module.<para/>
            Use this field when you have too many columns in a list view and want to make the visibility of some of the columns optional.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.IsDefault(System.Nullable{System.Boolean})">
            <summary>
            If Set to True, the button is made the default button on the page which is triggered when the return key is pressed.<para/>
            Note:<para/>
            You can only have one button as the default button in a module.<para/>
            When a button is set as Default button using this attribute then this attribute is set as False for all the other buttons<para/>
            ======== DEFAULT ================================<para/>
            False (Except Save button which is generated at the time of creating a Form Module )<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set the button as the default focused button.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.HeaderText(System.String)">
            <summary>
            In this field you specify the text displayed for the button. You can specify static text or C# expression in this attribute<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory field which is specified at the time of creating  a button<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Send Message<para/>
            C# Expression<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.ConfirmQuestion(System.String)">
            <summary>
            If you enter a text in this field, the system will show a confirmation message to the end user when they click this button.<para/>
            If the user then selects No, the operation will be terminated and the button workflow will not run.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to confirm something when users clicks the button.<para/>
            It&amp;#39;s used mostly in Delete operations or any other sensitive action.<para/>
            ======== EXAMPLES ===============================<para/>
            Are you sure?<para/>
            c#: &quot;Are you sure you want to delete &quot; + Item + &quot;?&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.SortKey(System.String)">
            <summary>
            In this attribute you can specify a sort key for this button&amp;#39;s sort command.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to enable sorting or want to apply same key for other elements or want to make it unique<para/>
            ======== EXAMPLES ===============================<para/>
            MaximumRIO<para/>
            Email<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.ImageUrl(System.String)">
            <summary>
            In this field you can set as Image URL for the button.<para/>
            Tips:<para/>
            - If this field is set, then the type of the button will be automatically set to Image.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify an image for the button.<para/>
            ======== EXAMPLES ===============================<para/>
            icons/delete.gif<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.GridColumnCssClass(System.String)">
            <summary>
            In this field, you can apply css classes for this button&apos;s element column in the list.<para/>
            The list is generated as HTML Table element and this class is applied to the &quot;td&quot; tag of the respective element<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the button element column.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-button<para/>
            add-button add-user-button<para/>
            c#: (Case != null) ? &quot;selected-button&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.SortingStatement(System.String)">
            <summary>
            Use this field if you can specify a sort statement (C# expression )for this element other than the default sort statement.<para/>
            This sorting statement is executed when you click on the button column header for ASC or DESC sort<para/>
            Tips:<para/>
            - Use &quot;|&quot; to separate multiple sort expressions.<para/>
            - Sort key attribute must be defined in order to enable sorting<para/>
            ======== DEFAULT ================================<para/>
            By default, the items in the List Module will be sorted based on the the default sort order of the Type.<para/>
            i.e. Either by an explicitly defined SortOrder on that Type, or the ToString() of the object.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the items in the list to be sorted differently from the default setting of the type based on this element.<para/>
            ======== EXAMPLES ===============================<para/>
            item.LastName DESC<para/>
            item.Order<para/>
            item.Name | Item.Email<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.ExportToExcelAsHyperlink(System.Boolean)">
            <summary>
            A Boolean value to specify if you want this field to be included when exporting the list to Excel file.<para/>
            ======== DEFAULT ================================<para/>
            &quot;True&quot; (which means this column will be included when exporting the list to Excel.)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If you do not wish a certain column to be exported to Excel<para/>
            ======== EXAMPLES ===============================<para/>
            Does not export to Excel<para/>
            False<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.MarkupTemplate(System.String)">
            <summary>
            In this field you can specify custom markup to wrap or place this button as required<para/>
            Note:<para/>
            You must use [#Button#] keyword to place the button in required position in the markup specified<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to implement custom markup to design a button look-n-feel<para/>
            ======== EXAMPLES ===============================<para/>
            [#Button#]<para/>
            [#Button#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.FooterTemplate(System.String)">
            <summary>
            The markup to appear in the footer template of the button element in the list.<para/>
            List elements including button and custom elements are placed inside   tag of the grid view control.<para/>
            Markup / Template specified in this field  will be places in   of the respective   tag<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to add a custom markup for the footer of the element in the list.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;test template&quot;<para/>
            [*Name*]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.Style(MSharp.ButtonStyle)">
            <summary>
            In this field you can specify type of appearance for the button.<para/>
            Note:<para/>
            -<para/>
            If the text is set by c# expressions, the type can not be Image.<para/>
            ======== DEFAULT ================================<para/>
            If not set, the system automatically decides which type it should use.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a specific type of button.<para/>
            ======== EXAMPLES ===============================<para/>
            Set to &quot;Link&quot; if you want the button to be a link.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.Tooltip(System.String)">
            <summary>
            In this field you can specify contents which are shown as the tooltip of the button<para/>
            Supports:<para/>
            1. Static Text<para/>
            2. C# Expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display a tooltip for a button<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Add new user&quot;<para/>
            C#:Item.Summary()<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.SeperatorTemplate(System.String)">
            <summary>
            This property is used in junction with the previous property &quot;Repeat Data source&quot;.<para/>
            Contents specified in this property are places in the &quot;SeparatorTemplate&quot; of &quot;Asp.Net Repeater&quot; control.<para/>
            You can specify static or dynamic mark-up contents in this field.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to visually separate the button control to make it more detailed and sophisticated.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.Name(System.String)">
            <summary>
            In this field you specify the Name of the button.<para/>
            Tip:<para/>
            - The name should not begin with keyword &quot;btn&quot; as this is automatically applied<para/>
            - The Name must be given without spaces and in camel casing<para/>
            Default<para/>
            The text specified at the time of creating button.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to rename the button.<para/>
            ======== EXAMPLES ===============================<para/>
            AddNewEmployee<para/>
            ProcessPayment<para/>
            Cancel<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.CssClass(System.String)">
            <summary>
            In this field, You can apply a css class for this button.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Used when an special appearance style is needed for the button.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-button<para/>
            add-button add-user-button<para/>
            c#: (Case != null) ? &quot;selected-button&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.ExtraTagAttributes(System.String)">
            <summary>
            In this field you can specify attributes pre-defined / custom attributes for the buttons<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is rarely used, only when an extra attribute(s) are needed which cannot be specified using other attributes.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            OnClientClick=&quot;return btnCancel_Clicked(this);&quot;<para/>
            Example 2<para/>
            PostBackUrl=&quot;~/Pages/Members/Enter.aspx&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.Icon(System.String)">
            <summary>
            In this field you specify an icon for the button.<para/>
            Tip:<para/>
            - Font Awesome is supported.<para/>
            - Select your icon:  browse icons<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the button to look more user-friendly.<para/>
            ======== EXAMPLES ===============================<para/>
            fa-edit<para/>
            fa-edit fa-2x  (Note: for larger icon use fa-3x, fa-4x,...)<para/>
            myIconFile.png  (Note: Picked up from /public/img/icons/myIconFile.png<para/>
            /my/full/path/file.png<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListButton`1.NoHeaderText">
            <summary>
            Sets the header text of this element to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.ListGroupingExpression`1.Title(System.String)">
            <summary>
            In this attribute you can specify the title of the group i.e. Logical Name of the group.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property which is set on the time of created a group<para/>
            ======== EXAMPLES ===============================<para/>
            Group By Registration Date<para/>
            In this example, ....<para/>
            Email<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListGroupingExpression`1.IsDefault(System.Boolean)">
            <summary>
            If set to True, the list will be grouped by this grouping expression by default when the page is loaded<para/>
            ======== DEFAULT ================================<para/>
            True  (For the First Grouping Expression)<para/>
            False (False for all other Grouping Expressions)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is useful in cases where more than one grouping expressions is specified. Set it to True when you want to group list initially based on this grouping expression.<para/>
            ======== EXAMPLES ===============================<para/>
            You have specified Name and Email as two grouping  expression and want to set The Email as the default grouping expression when pages is loaded<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListGroupingExpression`1.DisplayExpression(System.String)">
            <summary>
            In this field you can specify a c# expression for the group which appears as the heading<para/>
            Tips:<para/>
            - Use &quot;GROUP&quot; to reference each group.<para/>
            - You can use html markup to customise c# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have implemented grouping and want to display a heading for each group<para/>
            ======== EXAMPLES ===============================<para/>
            You want to group employees by FirstName string type Property which we also want to display as group heading<para/>
            You have grouped products based on category (complex type) and want to display Category Name as heading<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListGroupingExpression`1.ValueExpression(System.String)">
            <summary>
            In this attribute you can specify a C# expression  which is used to group the elements in a list<para/>
            Tips:<para/>
            - Use &quot;item&quot; to point to each item. E.g. &quot;item.School&quot;<para/>
            - This attribute cannot be used when &quot;Property&quot; attribute is specified<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            You should only use it when need complex goring expression which cannot be satisfied using &quot;Property&quot; attribute<para/>
            ======== EXAMPLES ===============================<para/>
            item.City.Name<para/>
            item.ToString().Length<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListGroupingExpression`1.EmptyTemplate(System.String)">
            <summary>
            Use this field to specify what should be displayed when the value for this field is empty.<para/>
            ======== DEFAULT ================================<para/>
            By default, the group will be displayed as empty list with the group header.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to show a custom text or markup when the group is empty.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;There is no case in this group.&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListGroupingExpression`1.SortOrder(System.String)">
            <summary>
            In this field you can specify a C# expression to sort the groups.<para/>
            Tips:<para/>
            Use &quot;group&quot; to reference each group object. E.g: &quot;group.Title&quot; or &quot;group.Length | group.Title DESC&quot;.<para/>
            Please note that the data type of &quot;group&quot; is different from the data type of the list module.<para/>
            The data type will come from the &quot;value expression&quot; or &quot;property&quot; on which the group is defined.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to sort the elements in a group<para/>
            ======== EXAMPLES ===============================<para/>
            group.Title<para/>
            group.ActivatedOn<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.SearchBoxCssClass(System.String)">
            <summary>
            In this field, you can set a css class for the search box.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== DEFAULT ================================<para/>
            By default the search box will have a css class of &quot;search&quot;.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When a special appearance style is needed for the element.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-button<para/>
            add-button add-user-button<para/>
            c#: (Case != null) ? &quot;case-delete-button&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.Markup(System.String)">
            <summary>
            The Html which specifies the template of the object view.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need a custom markup for the object view that cannot be achieved only by adding the elements to the object view.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;test template&quot;<para/>
            [*Name*]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.Footer(System.String)">
            <summary>
            In this field you can specify the footer for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the bottom of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;The End!&quot;<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.WrapListItemTemplate(System.Boolean)">
            <summary>
            If set to true, a wrapper (span element ) with the css class &quot;list-item-wrapper&quot; will be generated for each item<para/>
            Tips<para/>
            - You can define the &quot;list-item-wrapper&quot; class in you css file to make the list look n feel more elegant<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Set to False, When you don&apos;t want to generate the wrapper around each list item.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.RequestParam(System.String)">
            <summary>
            In this field you can specify a QueryString key which is used to fetch the record from the database<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have passed id of the entity type instance based on which you want to display the view<para/>
            ======== EXAMPLES ===============================<para/>
            id<para/>
            product<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.SelectCheckboxColumnIndex(System.Nullable{System.Int32})">
            <summary>
            In this field you can specify the index of the column in the grid view where you want to display the select checkbox for the row.<para/>
            Note:<para/>
            - This attribute works when Select checkbox attribute of list module is set to True<para/>
            ======== DEFAULT ================================<para/>
            First Column / Index 0<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display select checkbox in a different column than the default first column<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.KeepOriginalFormatting(System.Boolean)">
            <summary>
            When set to True, the generated code will not be formatted and will be generated left aligned.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is recommended to not to set it True, because it keeping the original formatting will make it difficult to read an understand<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.SearchBoxVisibleIf(System.String)">
            <summary>
            In this field you can specify the criteria in which you want the search box to be visible.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the search box to be visible only if one or more criteria are satisfied .<para/>
            ======== EXAMPLES ===============================<para/>
            App.Context.User == null<para/>
            App.Context.User != null &amp;&amp; App.Context.User.IsInRole(&quot;Admin&quot;)<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.EmptyMarkup(System.String)">
            <summary>
            The html to show when the view is empty.<para/>
            Use [#EMPTY#] if you don&amp;#39;t want a system generated text.<para/>
            Usage:Supports:Example:<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to show a custom text or markup when the view is empty.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;There is no employee to display.&quot;<para/>
            [#EMPTY#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.Multi_Lingual(System.Nullable{System.Boolean})">
            <summary>
            If set to True, Phrases on static phrases i.e. Label Text, Heading, columns, button texts will be translated by selected language<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable multi-lingual support on a single module. Please not that if the Multi-Lingual option in project settings is set then you do not need to set it explicitly.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.ItemsToFetch(System.String)">
            <summary>
            In this field, you can use a static or C# expression based numeric value to specify the number of the number records needs to be fetched in DataSource.<para/>
            The numeric value specified here is Converted to IEnumerable.Take(Number of record) Linq expression<para/>
            ======== DEFAULT ================================<para/>
            All - All Records of specified DataSource are displayed<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you only need to fetch few records based on the requirement. This attribute is useful if used in junction with Sort Expression to.<para/>
            ======== EXAMPLES ===============================<para/>
            Static Numeric Value<para/>
            6<para/>
            C# Expression<para/>
            App.Settings.NumberOfMostViewedRecord<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.DataSource(System.String)">
            <summary>
            This field is a C# expression that requires an complex type object.  This object is used to display elements of the type<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to supply QueryString Key and want to specify a custom fetch object<para/>
            ======== EXAMPLES ===============================<para/>
            Database.Find ()<para/>
            Lesson.Default<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.HeaderText(System.String)">
            <summary>
            In this field you can specify heading for the module. All contents are placed inside h2 tag.<para/>
            ======== DEFAULT ================================<para/>
            Inferred from the entity and type of module<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you wan to specify just the heading contents<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Employee Details<para/>
            C# Expression<para/>
            c#:Item.Name + &quot; Details&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.SourceCriteria(System.String)">
            <summary>
            In this field you can specify a criteria which act as a where clause for the the DataSource of the list.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to filter the DataSource base on some criteria.<para/>
            ======== EXAMPLES ===============================<para/>
            each .Language == Language.English The generated code will be: Where(each=&gt; each.Language == Language.English) .<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.SourceEvaluationCriteria(System.String)">
            <summary>
            Sometimes the DataSource of a module can only be evaluated in a special condition or otherwise it will throw an exception.<para/>
            You can write such condition here, so that if your specified criteria is not met, then the DataSource expression is not even evaluated.<para/>
            ======== EXAMPLE ================================<para/>
            Category != null<para/>
            Let&apos;s say your DataSource is «Category.Items», while sometimes Category can be null. In that case the DataSource would throw an exception if you didn&apos;t have this SourceEvaluationCriteria.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.Name(System.String)">
            <summary>
            In this field you should enter the name of the module you want to create. This name should be a unique name for the module you have created.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field for the module.<para/>
            ======== EXAMPLES ===============================<para/>
            Form: User signup<para/>
            List: Content blocks<para/>
            View: User details<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.HideEmptyElements(System.Boolean)">
            <summary>
            If set to True, the elements which are null or empty will not be displayed<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.RenderMode(MSharp.ListRenderMode)">
            <summary>
            This field let&apos;s you choose the server control to render the data in a list module.<para/>
            Options:<para/>
            - Grid: A GridView control will be generated to display data<para/>
            - List: A ListView  control will be generated to display data<para/>
            ======== DEFAULT ================================<para/>
            Grid<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display data using ListView<para/>
            ======== EXAMPLES ===============================<para/>
            When you need to render list of products using Product thumbnail with little description in a list style<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.SortingStatement(System.String)">
            <summary>
            In this field you can specify the sort expression for the list.<para/>
            Supported formats:<para/>
            -<para/>
            Property name<para/>
            - Any C# expression using &quot;item&quot; object.<para/>
            Tips:<para/>
            - Use &quot;|&quot; to separate multiple sort expressions.<para/>
            -<para/>
            You can add &quot; DESC&quot; to the end of each phrase to specify descending sort.<para/>
            ======== DEFAULT ================================<para/>
            By default items in the List Module will be sorted based on the the default sort order of the Type.<para/>
            That is, either by an explicitly defined SortOrder on that Type, or the ToString() of the object.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the items in the list to be sorted differently from the default setting of the type.<para/>
            ======== EXAMPLES ===============================<para/>
            LastName<para/>
            item.LastName<para/>
            item.GetLastName()<para/>
            item.LastName + &quot;, &quot; + item.FirstName<para/>
            LastName DESC | item.GetSomething()<para/>
            FirstName DESC | LastName | MyModuleMethod(item) DESC<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.ItemsHeader(System.String)">
            <summary>
            In this attribute, you can specify custom markup which is displayed just above the gird header<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            You can use this attribute to implement any design related markup<para/>
            ======== EXAMPLES ===============================<para/>
            You can display referenced element e.g menus, Forms, or event just textual description<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.StartUpBehaviour(MSharp.OnStart)">
            <summary>
            In this attribute you can select the preferred start up behaviour of the list. This affects how the result set will be loaded for the first time.<para/>
            Load List: List will be populated based on the specified DataSource<para/>
            Auto Search: List will be populated based on the specified DataSource but the DataSource will be filtered based on the search elements default set values<para/>
            Wait for Search: List will not be populated unless a postback happens on the page<para/>
            ======== DEFAULT ================================<para/>
            Load List<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a very useful attribute in situation where you have pre-set search elements and want to display results based on the search elements pre-set selected values<para/>
            Or, You want the user to get the results based on the search criteria.<para/>
            ======== EXAMPLES ===============================<para/>
            You display product catalogue with options to filter products. You need to display products based on the default set filters e.g. Most Reviewed, Most Rated etc.<para/>
            In this case you can use Auto Search option to automatically filter result set initially<para/>
            You need to display a batch of payment which needs to be verified at the month end which has huge number of records. Showing all the results could take longer to bind data grid.<para/>
            In this case you can use Wait for search to display only the records which need to be managed by thier status<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.Header(System.String)">
            <summary>
            The markup to add at the beginning of this module&amp;#39;s content.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the top of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            Simple Markup<para/>
            Simple Heading!<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.SearchAreaHeader(System.String)">
            <summary>
            In this field you can specify custom mark which appears as the heading of the search box on a list module. The markup will be displayed only when search section contains at least one element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display something in the header of the search box or need to implement special design requirement<para/>
            ======== EXAMPLES ===============================<para/>
            Static Markup<para/>
            Search Members<para/>
            C# Expression<para/>
            &amp;lt%=App.Context.Settings.SearchHeading&gt;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.TableCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this grid.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the grid.<para/>
            ======== EXAMPLES ===============================<para/>
            users-grid<para/>
            users-grid wide-users-grid<para/>
            c#: (Case != null) ? &quot;case-users-grid&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.PagerPosition(MSharp.PagerAt)">
            <summary>
            Pager position let&apos;s to choose the position of the pager in the list module<para/>
            ======== DEFAULT ================================<para/>
            Bottom<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change the position of the pager<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.NamespaceImports(MSharp.NamespaceImport[])">
            <summary>
            In this field you can choose namespace(s) you need to import in the page backend.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to work with a class frequently and the namespace is not imported by default<para/>
            ======== EXAMPLES ===============================<para/>
            you need to extract web control in the backend file of a list module in order to  manipulate the data<para/>
            System.Web.UI.WebControls<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.IsInUse(System.Nullable{System.Boolean})">
            <summary>
            In this field you can specify if the module is used and should be build or not.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If your module is used in a page directly, it will be built in build actions automatically.<para/>
            If your module is not used in a page directly, but you still want it to be built, you should check this property.<para/>
            ======== EXAMPLES ===============================<para/>
            Menu Modules<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.DisplayHeaderWhenEmpty(System.Boolean)">
            <summary>
            If set to True, the item header will always be displayed even if the data yield no record. This attribute works in junction with &quot;Items header&quot; attribute<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display list header even if there are no records<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.ListContainerCssClasses(System.String)">
            <summary>
            A comma separated list of css classes which will be rendered as nested container spans around the list control.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap your list control with a span with the specified class(es) to be able to apply a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            list-container<para/>
            left-section list-container<para/>
            c#: (Case != null) ? &quot;case-users-container&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.ControllerInterfaces(System.String)">
            <summary>
            The interfaces that this user control (module) should implement.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is particularly useful when using ICallbackEventHandler interface for AJAX call backs.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;ICallbackEventHandler, IAnotherInterface&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.MarkupWrapper(System.String)">
            <summary>
            In this field you can specify a wrapper template for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When want to customize the appearance of the module by adding extra markup around it.<para/>
            ======== EXAMPLES ===============================<para/>
            [#MODULE#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.Sortable(System.Boolean)">
            <summary>
            If set to False, columns sorting option will be disabled and a simple text header will be generated for the list<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want sorting to be enabled on the header of a list especially when customized sorting formula is applied on result set<para/>
            or result set contains huge number of elements.<para/>
            ======== EXAMPLES ===============================<para/>
            You need to display customized list based on fixed sorting formula and don&apos;t want to allow users to sort the result set.<para/>
            You need to display large dataset and want to disable sorting on UI to restrict post back<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.ShowHeaderRow(System.Boolean)">
            <summary>
            If Set to False, Header row of the GridView will not be shown<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want a hander row to be generated on the list.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.ShowFooterRow(System.Boolean)">
            <summary>
            If set to True, a footer of the GridView will be shown<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a footer row to be generated on the list.<para/>
            ======== EXAMPLES ===============================<para/>
            When you need a footer row to show the SUM calculation of some numbers in the table.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.SelectCheckbox(System.Boolean)">
            <summary>
            If set to true, a server side checkbox will be generated for each row to select individual row and one in the header row to select all the rows.<para/>
            Tips:<para/>
            - Call &quot;GetSelectedItems()&quot; method to get all the rows selected in backend<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to implement row selection in a list<para/>
            ======== EXAMPLES ===============================<para/>
            You are displaying email messages and want to enable message selection for moving, archiving or deletion purpose<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.RootCssClass(System.String)">
            <summary>
            In this field you can enter the css class of the module.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply some css to the module.<para/>
            ======== EXAMPLES ===============================<para/>
            twtwo-column-form<para/>
            compact-view user-order-view<para/>
            c#: (Case != null) ? &quot;progress-list&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModule`1.PageSize(System.String)">
            <summary>
            In this attribute you can specify a numeric value for the page size. This will be the number of records shown on each page of the list<para/>
            ======== DEFAULT ================================<para/>
            10<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have large number of records and want to display them in chunks using grid view paging.<para/>
            This helps making records view more compact rather than displaying infinite scroll bar<para/>
            ======== EXAMPLES ===============================<para/>
            15<para/>
            20<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.Label(System.String)">
            <summary>
            In this field you can specify a manning full label for the list page which is displayed on the left of the pager control<para/>
            ======== DEFAULT ================================<para/>
            Results per page:<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to change it according to the design specifications<para/>
            ======== EXAMPLES ===============================<para/>
            Records per page:<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.Position(MSharp.PagerAt)">
            <summary>
            This attributes let&apos;s you choose the position of the paging options .<para/>
            Top: Pager is displayed above list header<para/>
            Bottom: Pager is displayed below the list<para/>
            Top &amp; bottom: Pager is displayed both top and at bottom<para/>
            ======== DEFAULT ================================<para/>
            Bottom<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display the pager at a different position on the list<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.AutoPostBack(System.Boolean)">
            <summary>
            If set to False, the pager control will not perform a postback on changing the page size.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want pager control to automatically postback and update the list records and need to implement custom postback control and<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.Key(System.String)">
            <summary>
            In this field you can specify a unique key for pager control. This key is prefixed with &quot;lstPageSize&quot; string to make the ID of the pager<para/>
            ======== DEFAULT ================================<para/>
            MainPager<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to define more than one pager on one list<para/>
            ======== EXAMPLES ===============================<para/>
            TopPager<para/>
            SidePager<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.OptionTextFormat(System.String)">
            <summary>
            In this field you can specify a format for the text display for each paging option<para/>
            Tips:<para/>
            - You must use {0} keyword to format each paging option<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize the text of each paging option<para/>
            ======== EXAMPLES ===============================<para/>
            You want to display text along each paging option i.e. Display 5 Item<para/>
            Display {0} Items<para/>
            Want to display custom text<para/>
            {0} Items per page<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.WrapperCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this pager.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== DEFAULT ================================<para/>
            By default the element will have a css class of &quot;item&quot;.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the pager.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-button<para/>
            add-button add-user-button<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.Options(System.String)">
            <summary>
            In this field you can specify paging options each on a new line. These paging options are displayed on the UI. You must enter numeric value.<para/>
            ======== DEFAULT ================================<para/>
            5<para/>
            10<para/>
            20<para/>
            50<para/>
            100<para/>
            200<para/>
            500<para/>
            All<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customise the paging size options<para/>
            ======== EXAMPLES ===============================<para/>
            5<para/>
            15<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.ResetsToFirstPage(System.Boolean)">
            <summary>
            If set to False, pager will not be reset to the first page and the pager index will remain at the position it was before changing the page size<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to reset the selected page index. The records per page will be changed but the pager index will remain same.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ListModulePager.NoLabel">
            <summary>
            Sets the label of this element to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.MemoryFilterCode(System.String)">
            <summary>
            In this field you can specify any dynamic logic scenario using C# expression. You must using &quot;result&quot; object to specify any lambda or custom expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply complex filter expression.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            result = results.Where(x=&gt; x.Products.Any());<para/>
            Example 2<para/>
            result = results.Where(x=&gt; txtPostCode.Text.HasValue() &amp;&amp;  x.Address.PostCode = txtPostcode.Text.Trim());<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.WatermarkText(System.String)">
            <summary>
            In this field you can specify contents which appear on the input control as watermark text<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Usually when you want to display a help text or any contents to inform user about something<para/>
            ======== EXAMPLES ===============================<para/>
            Please enter email address ere<para/>
            Postcode with without space e.g. AB12CD<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.ReloadOnChange(System.Boolean)">
            <summary>
            If set to True, the element will perform a postback for the configured postback events<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform server side execution whenever the value of the element is changed without clicking &quot;Search&quot; button explicitly. Especially to filet the list or other filter elements<para/>
            ======== EXAMPLES ===============================<para/>
            You have a search filter on category and sub category to filter a list of products. You can enable AutoPostBack of Category filter element to populate the Sub Categories in order to filter products eventually<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.DatabaseFilterCode(System.String)">
            <summary>
            In this C# expression field, you can specify a custom filter. This filter expression is added to Search Filters which are applied on dataset for this list module.<para/>
            Tips:<para/>
            You must use write expression like AddFilter(u=&gt; Your Filter expression on each instance)<para/>
            ======== DEFAULT ================================<para/>
            M# generates appropriate filter (Except Custom search Element)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If the property is persistent in DB and you want add a custom logic filter<para/>
            ======== EXAMPLES ===============================<para/>
            Filter for email property<para/>
            if (txtEmail.Text.HasValue())<para/>
            {<para/>
            AddFilter(u =&gt; u.Email.Contains(txtEmail.Text.Trim(), false));<para/>
            }<para/>
            Filter for Postcode property<para/>
            if (txtPostcode.Text.HasValue())<para/>
            {<para/>
            AddFilter(u =&gt; u.Postcode = txtEmail.Text.Trim());<para/>
            }<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.Control(MSharp.ControlType)">
            <summary>
            In this field you can choose the type of control for the filter element<para/>
            ======== DEFAULT ================================<para/>
            Based on filter type<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a different control for filter element then the default<para/>
            ======== EXAMPLES ===============================<para/>
            You display category filter element which is by default a dropdown list but you want to change it to display an AutoComplete to enable user to select by typing in.<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.AfterInput(System.String)">
            <summary>
            You can specify static contents or a C# expression which will be rendered just after the input control of this search filter.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need customise the filter control by adding contents after input control.<para/>
            You can also use this attribute to place module buttons.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to display help text using custom html markup and static text and JQuery<para/>
            Please enter email address you want to search<para/>
            Placing the search Button<para/>
            [#BUTTONS(Search)#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.DefaultValueExpression(System.String)">
            <summary>
            in this field you can specify the default select value using C# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to set a default selected value for filter element.<para/>
            ======== EXAMPLES ===============================<para/>
            You are filtering phrase by language and set the default language to show default phrase at first<para/>
            You have filter range on location search and want to set a default range to display the location at first<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.Label(System.String)">
            <summary>
            In this field you can specify static text or C# expression for label of the input control.<para/>
            Tips:<para/>
            - use keyword [#EMPTY#], if you don&apos;t want to display the label<para/>
            ======== DEFAULT ================================<para/>
            Property Name<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to customise the Label associated to filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Don&apos;t display label<para/>
            [#EMPTY#]<para/>
            Static Text<para/>
            Email:<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.DefaultFunction(System.String)">
            <summary>
            In this field you can specify the filter function for the element. You can supply one of the following<para/>
            - Is<para/>
            - IsNot<para/>
            - NUll<para/>
            - NotNUll<para/>
            - Contains<para/>
            - NotConstains<para/>
            - BeginsWith<para/>
            - EndWith<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to override the default filter function of an element<para/>
            ======== EXAMPLES ===============================<para/>
            You have a string filter element which by default implements contains filter functions but you wan to use &quot;IS&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.ExtraControlAttributes(System.String)">
            <summary>
            In this field you can specify pre-defined or custom attributes for input control of this filter element.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize input control markup with additional attributes not available in M#<para/>
            ======== EXAMPLES ===============================<para/>
            OnSelectedIndexChanged=&quot;control_SelectedIndexChanged&quot;<para/>
            EnableViewState=&quot;False&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.DataSource(System.String)">
            <summary>
            In this field you can provide the DataSource for collection type filter elements. This attribute is ignored for single value type element e.g. TextBox<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to provide custom DataSource for the filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Categories.SubCategires<para/>
            Enumerable.Range(0,10)<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.ValueChangedHandler(System.String)">
            <summary>
            In this field you can specify a C# expression to handle the change event of a filter element<para/>
            Tips:<para/>
            - Make sure the Post back attribute is set to True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom logic on change event of a filter element<para/>
            ======== EXAMPLES ===============================<para/>
            Loading products when category is changed<para/>
            lstProducts.Datasource = lstCategory.GetSelected ().Products;<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.SourceCriteria(System.String)">
            <summary>
            In this field you can specify a criteria which act as a where clause for the SataSource of the filter element.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to filter the DataSource of the filter element base on some criteria.<para/>
            ======== EXAMPLES ===============================<para/>
            The generated code will be: Where(each=&gt; each.Language == Language.English) .<para/>
            each .Language == Language.English<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.RowCssClass(System.String)">
            <summary>
            In this field, you can set a css class for this filter element.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When a special appearance style is needed for the filter element..<para/>
            ======== EXAMPLES ===============================<para/>
            narrow-item<para/>
            narrow-item long-item<para/>
            c#: (Case != null) ? &quot;selected-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can select a box available in search section. On selecting a box, the filter element will be placed inside that box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil custom design or want to group related search elements<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.DisplayExpression(System.String)">
            <summary>
            The expression to use for each item to display the text in the dropdown list<para/>
            ======== DEFAULT ================================<para/>
            ToString() expression of each instance<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display a custom text expression especially with combination of properties<para/>
            ======== EXAMPLES ===============================<para/>
            item.Firstname + &quot; &quot; + item.Lastname<para/>
            item.Name + &quot; (&quot; + item.Code + &quot; )&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.PropertyFilterElement`1.NoLabel">
            <summary>
            Sets the label of this element to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.Association.OnDelete(MSharp.CascadeAction)">
            <summary>
            You can use this property to select delete behaviour of an instance of this entity type.<para/>
            ======== DEFAULT ================================<para/>
            Throw Warning<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to allow cascade delete or custom delete behaviour<para/>
            ======== EXAMPLES ===============================<para/>
            A One to Many association between Order and OrderItems and want to delete all products when an Order is deleted, Use Cascade Delete<para/>
            A One to Many association between Category and Products and want to restrict deleting a category if is has  products, Use Throw Warning<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Name(System.String)">
            <summary>
            In this Property you specify the name of the property which is generated in Modal to access this property.<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in Camel case e.g. ResidenceAddress, ProductBatch, IsAllowed etc.<para/>
            ======== DEFAULT ================================<para/>
            It is inferred from the title of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            ResidenceAddress<para/>
            IsAllowed<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.ReferencedType(System.String)">
            <summary>
            This attribute lets you select the required entity type to create an association.<para/>
            ======== DEFAULT ================================<para/>
            The entity type selected at the time of creating association<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this property to change the association entity type<para/>
            Note:<para/>
            - M# doesn&apos;t allow to change the reference type if an inverse association exists<para/>
            - Changing reference type could cause data corruption<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Mandatory(System.Boolean)">
            <summary>
            If set to True, a required validation rule will be generated in Modal and a required field validation control will be generated on UI to require the input.<para/>
            This behaviour can be overridden in UI using same attribute of form element. But, if the property is marked as mandatory the rule will be applied in modal even if it is set to false in UI<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a field mandatory for an entity instance<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.MinCardinality(System.Int32)">
            <summary>
            You can use this attribute to enforce the lower limit of cardinality on an association. M# will enforce the minimum numbers of relational records on Form module.<para/>
            Note:<para/>
            - Specifying 0 as minimum cardinality will make the association optional<para/>
            - Specifying a value more than 0 will make the association mandatory and M# will generate validation message to require minimum cardinality<para/>
            ======== DEFAULT ================================<para/>
            0<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This attribute is useful when imposing minimum number of association relational records required at the time of saving<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Title(System.String)">
            <summary>
            In this Property you specify the title of the property which is generated as the label in the module<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in normal case e.g. Residence address, Product batch, Is allowed? etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Residence address<para/>
            Is allowed?<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.MaxCardinality(System.Nullable{System.Int32})">
            <summary>
            You can use this attribute to enforce the upper limit of cardinality. M# will restrict the maximum numbers of relational record on Form module.<para/>
            Note:<para/>
            Specifying bigger number will slow down the page rendering because UI form elements for relational data of One-to-Many associations are generated based on the number specified here.<para/>
            e.g. if you specify 100 for this value M# will render 100 rows of input controls to add relational data on Form Element.<para/>
            ======== DEFAULT ================================<para/>
            10<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute to limit the number of maximum relational records added for this association. This is useful to enforce data input restriction for underlying association.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Unique(System.Boolean)">
            <summary>
            If set to True, a unique validation rule for this property will generated in the Modal which will prevent duplicate values.<para/>
            Also, a static method will be generated which finds and retunes an instance from the database by the property&apos;s value<para/>
            The method name is inferred from the property name. e.g Marking a property &quot;Email&quot; as unique will generate a method &quot;FindByEmail&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute when you want to make a property value unique<para/>
            ======== EXAMPLES ===============================<para/>
            Email Address<para/>
            Telephone Numbers<para/>
            User IDs<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.LazyLoad(System.Boolean)">
            <summary>
            If set to &quot;True&quot; the association is loaded lazily i.e. on demand and cached afterwards<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This attribute is useful when boosting performance<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Notes(System.String)">
            <summary>
            A description for the property to document any notes. Make your descriptions as descriptive as possible as they will be helpful later on to understand the Business Logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Attributes(System.String)">
            <summary>
            In this field you can specify custom C# attribute(s) for the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply custom C# attributes on the property.<para/>
            ======== EXAMPLES ===============================<para/>
            [Serializable]<para/>
            [XmlIgnore]<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.XmlIgnore(System.Boolean)">
            <summary>
            When set to True, the property will not be serialized when xml serialization will be performed on the instance<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform XML serialization and When you want to omit the property value<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Override(System.Boolean)">
            <summary>
            If set to true, Override keyword will be generated for the property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined a virtual property in the base class and want to override the property in the derived class<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Virtual(System.Boolean)">
            <summary>
            If set to True, &quot;Virtual&quot; keyword will be generated in the property definition<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are defining a base class and want to override this property in derived classes<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify a message which is displayed when the property value is null<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the property name<para/>
            e.g. Please provide a value for Email<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a dynamic validation message which requires business logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.DatabaseIndex(System.Nullable{System.Boolean})">
            <summary>
            If set to True, database index is generated for the property. Index are created to boost up the speed of data retrieval but downgrades the data writing speed if used unnecessary.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the property is going to be used rigorously to retrieve data from the database.<para/>
            ======== EXAMPLES ===============================<para/>
            Unique fields which are going to be parameterised often in data retrieval<para/>
            Identity Fields<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Calculated(System.Boolean)">
            <summary>
            If set to True,  the property is only generated in Modal entity class and no respective column is generated in database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to generate calculated properties especially when you need to display the value on UI<para/>
            ======== EXAMPLES ===============================<para/>
            You have FirstName and LastName as separate properties and want to create a property FullName which retunes the concatenation of both the FirstName and LastName Properties<para/>
            You want to show Customer balance which required calculation you can implement a  private method to calculate the balance and call that in calculated property to display it on UI<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Documentation(System.String)">
            <summary>
            In this field you can specify contents which are generated in the documentation summary tag of the poetry<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good practice to provide documentation of properties to make it more useable for consumer of the property or the developer who are going to manipulate it later on.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.HelpText(System.String)">
            <summary>
            In this property you can specify contends which are displayed as the help text for the property.<para/>
            This property is also available in form module<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            When you need to display a dynamic help text property which requires Business Logic.<para/>
            Use Form Module element attribute &quot;help text &quot; to specify static help text with html markup.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Getter(System.String)">
            <summary>
            In this field you can specify a C# expression to implement the get accessory of a calculated property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have a calculated property and want to implement custom get accessor<para/>
            ======== EXAMPLES ===============================<para/>
            CalculateBalance()<para/>
            FirstName + &quot; &quot; + LastName<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.Default(System.String)">
            <summary>
            In this field you can specify a static or c# expression based value which is set as the default value of the property in entity class constructor<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a default vale for a property<para/>
            ======== EXAMPLES ===============================<para/>
            You have a DateTime field DateCreated<para/>
            LocalTime.Now<para/>
            You have a field DicountCode which you want auto generate<para/>
            GenerateDiscountCode()<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.DefaultFormatString(System.String)">
            <summary>
            In this field you can specify the string format for a property which will be used to format the string on UI.<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            It is useful in cases of specifying a default format for DateTime and Numeric value to be printed on the screen using a default format string.<para/>
            ======== EXAMPLES ===============================<para/>
            You have DateTime property DateCreated which you want to show only short date on UI<para/>
            d<para/>
            You have DateTime property DateCreated which you want to show custom date format<para/>
            dd/MMM/yyyy<para/>
            You have Numeric field and want to add leading zeros if the value is less than 4 digits<para/>
            D4<para/>
            </summary>
        </member>
        <member name="M:MSharp.Association.IsReadOnlyInterfaceProperty(System.Nullable{System.Boolean})">
            <summary>
            If set to True, only the get accessor will be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is useful in scenarios when you want to have field which needs to be initialized at runtime time which should not be changed.<para/>
            Although, Constant variables are used as well but they cannot have dynamic value or initialized at runtime<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.OptimizationQuality(System.Nullable{System.Int32})">
            <summary>
            This attribute works with image files. In this field you can specify optimization quality of an image from 0 to 100.<para/>
            ======== DEFAULT ================================<para/>
            70<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to adjust the quality of the image file in order to make it compact<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Name(System.String)">
            <summary>
            In this Property you specify the name of the property which is generated in Modal to access this property.<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in Camel case e.g. ResidenceAddress, ProductBatch, IsAllowed etc.<para/>
            ======== DEFAULT ================================<para/>
            It is inferred from the title of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            ResidenceAddress<para/>
            IsAllowed<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.IsImage(System.Boolean)">
            <summary>
            When set to True, the binary file is treated as an image file and optimization is performed if configured.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to manipulate binary files as image files.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Mandatory(System.Boolean)">
            <summary>
            If set to True, a required validation rule will be generated in Modal and a required field validation control will be generated on UI to require the input.<para/>
            This behaviour can be overridden in UI using same attribute of form element. But, if the property is marked as mandatory the rule will be applied in modal even if it is set to false in UI<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a field mandatory for an entity instance<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.AutoOptimize(System.Boolean)">
            <summary>
            This field only works with the image files. when set to true, images are optimized based on the default settings.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to optimize image using default settings The images quality set as 70%<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.ValidExtensions(System.String)">
            <summary>
            In this attribute, you can specify file extension which are validated at the time of uploading. You can specify comma spirited static or C# expression string.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to restrict the allowed files extension<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            &quot;.pdf&quot;, &quot;.xsl&quot;,&quot;.txt&quot;<para/>
            Example 2<para/>
            Config.Get(&quot;Allowed.Extensions&quot;)<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Title(System.String)">
            <summary>
            In this Property you specify the title of the property which is generated as the label in the module<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in normal case e.g. Residence address, Product batch, Is allowed? etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Residence address<para/>
            Is allowed?<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Width(System.Nullable{System.Int32})">
            <summary>
            This attribute works only on image files. In this attribute you can specify a numeric value to optimize the width of the original image<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When image optimization is required on the width of the original image<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Height(System.Nullable{System.Int32})">
            <summary>
            This attribute only works with IsImage attribute. In this field you can specify any numeric value for image height which is used during image optimization<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to change the height of the original image during optimization e.g when generating thumbnail images, to adjust profile images etc.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            250<para/>
            Example 2<para/>
            300<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Unique(System.Boolean)">
            <summary>
            If set to True, a unique validation rule for this property will generated in the Modal which will prevent duplicate values.<para/>
            Also, a static method will be generated which finds and retunes an instance from the database by the property&apos;s value<para/>
            The method name is inferred from the property name. e.g Marking a property &quot;Email&quot; as unique will generate a method &quot;FindByEmail&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute when you want to make a property value unique<para/>
            ======== EXAMPLES ===============================<para/>
            Email Address<para/>
            Telephone Numbers<para/>
            User IDs<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.DefaultValueUrl(System.String)">
            <summary>
            This attribute works IsImage attribute. In this field you can display the default image URL which is displayed when no image is available<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display a default image when no image available e.g. profile Images<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            Images/profile/no-image.png<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.SecureAccess(System.Boolean)">
            <summary>
            When set to True, the files are uploaded to a secure folder and are displayed using secure link. For more information pleas read tutorial  File Security<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want implement secure access on files<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Notes(System.String)">
            <summary>
            A description for the property to document any notes. Make your descriptions as descriptive as possible as they will be helpful later on to understand the Business Logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.PreserveTransparency(System.Boolean)">
            <summary>
            This attribute works only with image files. When set to True, transparency of the png and gif files are maintained during optimization<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to preserve the transparency of images<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Attributes(System.String)">
            <summary>
            In this field you can specify custom C# attribute(s) for the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply custom C# attributes on the property.<para/>
            ======== EXAMPLES ===============================<para/>
            [Serializable]<para/>
            [XmlIgnore]<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.XmlIgnore(System.Boolean)">
            <summary>
            When set to True, the property will not be serialized when xml serialization will be performed on the instance<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform XML serialization and When you want to omit the property value<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Override(System.Boolean)">
            <summary>
            If set to true, Override keyword will be generated for the property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined a virtual property in the base class and want to override the property in the derived class<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Virtual(System.Boolean)">
            <summary>
            If set to True, &quot;Virtual&quot; keyword will be generated in the property definition<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are defining a base class and want to override this property in derived classes<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify a message which is displayed when the property value is null<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the property name<para/>
            e.g. Please provide a value for Email<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a dynamic validation message which requires business logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.DatabaseIndex(System.Nullable{System.Boolean})">
            <summary>
            If set to True, database index is generated for the property. Index are created to boost up the speed of data retrieval but downgrades the data writing speed if used unnecessary.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the property is going to be used rigorously to retrieve data from the database.<para/>
            ======== EXAMPLES ===============================<para/>
            Unique fields which are going to be parameterised often in data retrieval<para/>
            Identity Fields<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Calculated(System.Boolean)">
            <summary>
            If set to True,  the property is only generated in Modal entity class and no respective column is generated in database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to generate calculated properties especially when you need to display the value on UI<para/>
            ======== EXAMPLES ===============================<para/>
            You have FirstName and LastName as separate properties and want to create a property FullName which retunes the concatenation of both the FirstName and LastName Properties<para/>
            You want to show Customer balance which required calculation you can implement a  private method to calculate the balance and call that in calculated property to display it on UI<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Documentation(System.String)">
            <summary>
            In this field you can specify contents which are generated in the documentation summary tag of the poetry<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good practice to provide documentation of properties to make it more useable for consumer of the property or the developer who are going to manipulate it later on.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.HelpText(System.String)">
            <summary>
            In this property you can specify contends which are displayed as the help text for the property.<para/>
            This property is also available in form module<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            When you need to display a dynamic help text property which requires Business Logic.<para/>
            Use Form Module element attribute &quot;help text &quot; to specify static help text with html markup.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Getter(System.String)">
            <summary>
            In this field you can specify a C# expression to implement the get accessory of a calculated property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have a calculated property and want to implement custom get accessor<para/>
            ======== EXAMPLES ===============================<para/>
            CalculateBalance()<para/>
            FirstName + &quot; &quot; + LastName<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.Default(System.String)">
            <summary>
            In this field you can specify a static or c# expression based value which is set as the default value of the property in entity class constructor<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a default vale for a property<para/>
            ======== EXAMPLES ===============================<para/>
            You have a DateTime field DateCreated<para/>
            LocalTime.Now<para/>
            You have a field DicountCode which you want auto generate<para/>
            GenerateDiscountCode()<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.DefaultFormatString(System.String)">
            <summary>
            In this field you can specify the string format for a property which will be used to format the string on UI.<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            It is useful in cases of specifying a default format for DateTime and Numeric value to be printed on the screen using a default format string.<para/>
            ======== EXAMPLES ===============================<para/>
            You have DateTime property DateCreated which you want to show only short date on UI<para/>
            d<para/>
            You have DateTime property DateCreated which you want to show custom date format<para/>
            dd/MMM/yyyy<para/>
            You have Numeric field and want to add leading zeros if the value is less than 4 digits<para/>
            D4<para/>
            </summary>
        </member>
        <member name="M:MSharp.BinaryProperty.IsReadOnlyInterfaceProperty(System.Nullable{System.Boolean})">
            <summary>
            If set to True, only the get accessor will be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is useful in scenarios when you want to have field which needs to be initialized at runtime time which should not be changed.<para/>
            Although, Constant variables are used as well but they cannot have dynamic value or initialized at runtime<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.TrueText(System.String)">
            <summary>
            In this attribute you can specify a text for the &quot;True&quot; state of a Boolean element. When the Form is loaded for this type the text is displayed beside the input control<para/>
            Note:<para/>
            M# displays a checkbox input control by default for bool properties. But, when the value for this attribute is specified then a radio button input control is rendered with the specified text.<para/>
            ======== DEFAULT ================================<para/>
            Yes<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to show a radio button with the text for &quot;True&quot; state of a bool value<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Name(System.String)">
            <summary>
            In this Property you specify the name of the property which is generated in Modal to access this property.<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in Camel case e.g. ResidenceAddress, ProductBatch, IsAllowed etc.<para/>
            ======== DEFAULT ================================<para/>
            It is inferred from the title of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            ResidenceAddress<para/>
            IsAllowed<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.FalseText(System.String)">
            <summary>
            In this field you can specify a text for the &quot;False&quot; state of the Boolean element.<para/>
            Note:<para/>
            M# displays a checkbox input control by default for bool properties. But, when the value for this attribute is specified then a radio button input control is rendered with the specified text.<para/>
            ======== DEFAULT ================================<para/>
            No<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display a radio button input control with custom text on &quot;False&quot; State of bool element<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Mandatory(System.Boolean)">
            <summary>
            If set to True, a required validation rule will be generated in Modal and a required field validation control will be generated on UI to require the input.<para/>
            This behaviour can be overridden in UI using same attribute of form element. But, if the property is marked as mandatory the rule will be applied in modal even if it is set to false in UI<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a field mandatory for an entity instance<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.NullText(System.String)">
            <summary>
            This attribute works will nullable bool type. You can specify a text for the UNKNOWN state of the element.<para/>
            Note:<para/>
            M# displays a checkbox input control by default for nullable bool properties. But, when the value for this attribute is specified then a dropdown list is rendered with the specified text.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want textual representation of a nullable bool element when the state is null / unknown<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Title(System.String)">
            <summary>
            In this Property you specify the title of the property which is generated as the label in the module<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in normal case e.g. Residence address, Product batch, Is allowed? etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Residence address<para/>
            Is allowed?<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Unique(System.Boolean)">
            <summary>
            If set to True, a unique validation rule for this property will generated in the Modal which will prevent duplicate values.<para/>
            Also, a static method will be generated which finds and retunes an instance from the database by the property&apos;s value<para/>
            The method name is inferred from the property name. e.g Marking a property &quot;Email&quot; as unique will generate a method &quot;FindByEmail&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute when you want to make a property value unique<para/>
            ======== EXAMPLES ===============================<para/>
            Email Address<para/>
            Telephone Numbers<para/>
            User IDs<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Notes(System.String)">
            <summary>
            A description for the property to document any notes. Make your descriptions as descriptive as possible as they will be helpful later on to understand the Business Logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Attributes(System.String)">
            <summary>
            In this field you can specify custom C# attribute(s) for the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply custom C# attributes on the property.<para/>
            ======== EXAMPLES ===============================<para/>
            [Serializable]<para/>
            [XmlIgnore]<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.XmlIgnore(System.Boolean)">
            <summary>
            When set to True, the property will not be serialized when xml serialization will be performed on the instance<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform XML serialization and When you want to omit the property value<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Override(System.Boolean)">
            <summary>
            If set to true, Override keyword will be generated for the property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined a virtual property in the base class and want to override the property in the derived class<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Virtual(System.Boolean)">
            <summary>
            If set to True, &quot;Virtual&quot; keyword will be generated in the property definition<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are defining a base class and want to override this property in derived classes<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify a message which is displayed when the property value is null<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the property name<para/>
            e.g. Please provide a value for Email<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a dynamic validation message which requires business logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.DatabaseIndex(System.Nullable{System.Boolean})">
            <summary>
            If set to True, database index is generated for the property. Index are created to boost up the speed of data retrieval but downgrades the data writing speed if used unnecessary.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the property is going to be used rigorously to retrieve data from the database.<para/>
            ======== EXAMPLES ===============================<para/>
            Unique fields which are going to be parameterised often in data retrieval<para/>
            Identity Fields<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Calculated(System.Boolean)">
            <summary>
            If set to True,  the property is only generated in Modal entity class and no respective column is generated in database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to generate calculated properties especially when you need to display the value on UI<para/>
            ======== EXAMPLES ===============================<para/>
            You have FirstName and LastName as separate properties and want to create a property FullName which retunes the concatenation of both the FirstName and LastName Properties<para/>
            You want to show Customer balance which required calculation you can implement a  private method to calculate the balance and call that in calculated property to display it on UI<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Documentation(System.String)">
            <summary>
            In this field you can specify contents which are generated in the documentation summary tag of the poetry<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good practice to provide documentation of properties to make it more useable for consumer of the property or the developer who are going to manipulate it later on.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.HelpText(System.String)">
            <summary>
            In this property you can specify contends which are displayed as the help text for the property.<para/>
            This property is also available in form module<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            When you need to display a dynamic help text property which requires Business Logic.<para/>
            Use Form Module element attribute &quot;help text &quot; to specify static help text with html markup.<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Getter(System.String)">
            <summary>
            In this field you can specify a C# expression to implement the get accessory of a calculated property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have a calculated property and want to implement custom get accessor<para/>
            ======== EXAMPLES ===============================<para/>
            CalculateBalance()<para/>
            FirstName + &quot; &quot; + LastName<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.Default(System.String)">
            <summary>
            In this field you can specify a static or c# expression based value which is set as the default value of the property in entity class constructor<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a default vale for a property<para/>
            ======== EXAMPLES ===============================<para/>
            You have a DateTime field DateCreated<para/>
            LocalTime.Now<para/>
            You have a field DicountCode which you want auto generate<para/>
            GenerateDiscountCode()<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.DefaultFormatString(System.String)">
            <summary>
            In this field you can specify the string format for a property which will be used to format the string on UI.<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            It is useful in cases of specifying a default format for DateTime and Numeric value to be printed on the screen using a default format string.<para/>
            ======== EXAMPLES ===============================<para/>
            You have DateTime property DateCreated which you want to show only short date on UI<para/>
            d<para/>
            You have DateTime property DateCreated which you want to show custom date format<para/>
            dd/MMM/yyyy<para/>
            You have Numeric field and want to add leading zeros if the value is less than 4 digits<para/>
            D4<para/>
            </summary>
        </member>
        <member name="M:MSharp.BooleanProperty.IsReadOnlyInterfaceProperty(System.Nullable{System.Boolean})">
            <summary>
            If set to True, only the get accessor will be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is useful in scenarios when you want to have field which needs to be initialized at runtime time which should not be changed.<para/>
            Although, Constant variables are used as well but they cannot have dynamic value or initialized at runtime<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.ReturnType(System.String)">
            <summary>
            In this field you select the objet type which will be returned<para/>
            ======== DEFAULT ================================<para/>
            Type selected at the time of creating a property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property which is required at the time of creating a property<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            In this example, ....<para/>
            Example 2<para/>
            In this example, ....<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Name(System.String)">
            <summary>
            In this Property you specify the name of the property which is generated in Modal to access this property.<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in Camel case e.g. ResidenceAddress, ProductBatch, IsAllowed etc.<para/>
            ======== DEFAULT ================================<para/>
            It is inferred from the title of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            ResidenceAddress<para/>
            IsAllowed<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Mandatory(System.Boolean)">
            <summary>
            If set to True, a required validation rule will be generated in Modal and a required field validation control will be generated on UI to require the input.<para/>
            This behaviour can be overridden in UI using same attribute of form element. But, if the property is marked as mandatory the rule will be applied in modal even if it is set to false in UI<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a field mandatory for an entity instance<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Title(System.String)">
            <summary>
            In this Property you specify the title of the property which is generated as the label in the module<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in normal case e.g. Residence address, Product batch, Is allowed? etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Residence address<para/>
            Is allowed?<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Unique(System.Boolean)">
            <summary>
            If set to True, a unique validation rule for this property will generated in the Modal which will prevent duplicate values.<para/>
            Also, a static method will be generated which finds and retunes an instance from the database by the property&apos;s value<para/>
            The method name is inferred from the property name. e.g Marking a property &quot;Email&quot; as unique will generate a method &quot;FindByEmail&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute when you want to make a property value unique<para/>
            ======== EXAMPLES ===============================<para/>
            Email Address<para/>
            Telephone Numbers<para/>
            User IDs<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Notes(System.String)">
            <summary>
            A description for the property to document any notes. Make your descriptions as descriptive as possible as they will be helpful later on to understand the Business Logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Attributes(System.String)">
            <summary>
            In this field you can specify custom C# attribute(s) for the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply custom C# attributes on the property.<para/>
            ======== EXAMPLES ===============================<para/>
            [Serializable]<para/>
            [XmlIgnore]<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.XmlIgnore(System.Boolean)">
            <summary>
            When set to True, the property will not be serialized when xml serialization will be performed on the instance<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform XML serialization and When you want to omit the property value<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Override(System.Boolean)">
            <summary>
            If set to true, Override keyword will be generated for the property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined a virtual property in the base class and want to override the property in the derived class<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Virtual(System.Boolean)">
            <summary>
            If set to True, &quot;Virtual&quot; keyword will be generated in the property definition<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are defining a base class and want to override this property in derived classes<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify a message which is displayed when the property value is null<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the property name<para/>
            e.g. Please provide a value for Email<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a dynamic validation message which requires business logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.DatabaseIndex(System.Nullable{System.Boolean})">
            <summary>
            If set to True, database index is generated for the property. Index are created to boost up the speed of data retrieval but downgrades the data writing speed if used unnecessary.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the property is going to be used rigorously to retrieve data from the database.<para/>
            ======== EXAMPLES ===============================<para/>
            Unique fields which are going to be parameterised often in data retrieval<para/>
            Identity Fields<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Calculated(System.Boolean)">
            <summary>
            If set to True,  the property is only generated in Modal entity class and no respective column is generated in database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to generate calculated properties especially when you need to display the value on UI<para/>
            ======== EXAMPLES ===============================<para/>
            You have FirstName and LastName as separate properties and want to create a property FullName which retunes the concatenation of both the FirstName and LastName Properties<para/>
            You want to show Customer balance which required calculation you can implement a  private method to calculate the balance and call that in calculated property to display it on UI<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Documentation(System.String)">
            <summary>
            In this field you can specify contents which are generated in the documentation summary tag of the poetry<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good practice to provide documentation of properties to make it more useable for consumer of the property or the developer who are going to manipulate it later on.<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.HelpText(System.String)">
            <summary>
            In this property you can specify contends which are displayed as the help text for the property.<para/>
            This property is also available in form module<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            When you need to display a dynamic help text property which requires Business Logic.<para/>
            Use Form Module element attribute &quot;help text &quot; to specify static help text with html markup.<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Getter(System.String)">
            <summary>
            In this field you can specify a C# expression to implement the get accessory of a calculated property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have a calculated property and want to implement custom get accessor<para/>
            ======== EXAMPLES ===============================<para/>
            CalculateBalance()<para/>
            FirstName + &quot; &quot; + LastName<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.Default(System.String)">
            <summary>
            In this field you can specify a static or c# expression based value which is set as the default value of the property in entity class constructor<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a default vale for a property<para/>
            ======== EXAMPLES ===============================<para/>
            You have a DateTime field DateCreated<para/>
            LocalTime.Now<para/>
            You have a field DicountCode which you want auto generate<para/>
            GenerateDiscountCode()<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.DefaultFormatString(System.String)">
            <summary>
            In this field you can specify the string format for a property which will be used to format the string on UI.<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            It is useful in cases of specifying a default format for DateTime and Numeric value to be printed on the screen using a default format string.<para/>
            ======== EXAMPLES ===============================<para/>
            You have DateTime property DateCreated which you want to show only short date on UI<para/>
            d<para/>
            You have DateTime property DateCreated which you want to show custom date format<para/>
            dd/MMM/yyyy<para/>
            You have Numeric field and want to add leading zeros if the value is less than 4 digits<para/>
            D4<para/>
            </summary>
        </member>
        <member name="M:MSharp.CalculatedProperty.IsReadOnlyInterfaceProperty(System.Nullable{System.Boolean})">
            <summary>
            If set to True, only the get accessor will be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is useful in scenarios when you want to have field which needs to be initialized at runtime time which should not be changed.<para/>
            Although, Constant variables are used as well but they cannot have dynamic value or initialized at runtime<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.UseUtcDatetimeFormat(System.Nullable{System.Boolean})">
            <summary>
            When set to True, System.DateTime value of the current object is Converted the to Coordinated Universal Time (UTC).<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good to always store DateTime in UTC format for enterprise and globalized applications and display DateTime in local time zone.<para/>
            Use UTC especially in forums where you record DateTime automatically e.g. DatePosted, DateReplied etc. The benefit is that the records always sorted correctly<para/>
            ======== EXAMPLES ===============================<para/>
            You have a social website hosted on different servers in different zones and users around the world post contents using their local server.<para/>
            In this scenario, you should store DateTime in UTC format. This will help in keeping message threads in correct date order even the Time zone is different.<para/>
            But remember that you should always display dates in local time zone.<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Name(System.String)">
            <summary>
            In this Property you specify the name of the property which is generated in Modal to access this property.<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in Camel case e.g. ResidenceAddress, ProductBatch, IsAllowed etc.<para/>
            ======== DEFAULT ================================<para/>
            It is inferred from the title of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            ResidenceAddress<para/>
            IsAllowed<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.UpperBound(System.String)">
            <summary>
            In this attribute you can specify the maximum date system should accept.<para/>
            M# will generate validation code which will throw a validation exception, if the DateTime entered is later than the DateTime specified in this attribute<para/>
            Note:<para/>
            You must specify a DateTime object<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to impose a maximum DateTime validation rule.<para/>
            ======== EXAMPLES ===============================<para/>
            new DateTime(2014,01,25)<para/>
            LocalTime.Now.AddDays(6)<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Mandatory(System.Boolean)">
            <summary>
            If set to True, a required validation rule will be generated in Modal and a required field validation control will be generated on UI to require the input.<para/>
            This behaviour can be overridden in UI using same attribute of form element. But, if the property is marked as mandatory the rule will be applied in modal even if it is set to false in UI<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a field mandatory for an entity instance<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.LowerBound(System.String)">
            <summary>
            In this attribute you can specify the minimum date system should accept.<para/>
            M# will generate validation code which will throw a validation exception, if the DateTime entered is earlier than the DateTime specified in this attribute<para/>
            Note:<para/>
            You must specify a DateTime object<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to impose a minimum DateTime validation rule.<para/>
            ======== EXAMPLES ===============================<para/>
            new DateTime(2000,01,25)<para/>
            LocalTime.Now.AddDays(6)<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.HasDate(System.Boolean)">
            <summary>
            If set to False, only Time part of the DateTime will be rendered for input and output controls<para/>
            ======== DEFAULT ================================<para/>
            True  (When DateTime type is Select)<para/>
            False (When only Time type is Select)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to manipulate enable / disable Date aspect of a DateTime field<para/>
            ======== EXAMPLES ===============================<para/>
            When you want to handle Order reservation for limited time birth then Date doesn&apos;t matter<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Title(System.String)">
            <summary>
            In this Property you specify the title of the property which is generated as the label in the module<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in normal case e.g. Residence address, Product batch, Is allowed? etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Residence address<para/>
            Is allowed?<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.HasTime(System.Boolean)">
            <summary>
            If set to False, only Date part of the DateTime will be rendered for input and output controls<para/>
            ======== DEFAULT ================================<para/>
            True  (When DateTime type is Select)<para/>
            False (When only Date type is Select)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to enable / disable Time aspect of a DateTime field<para/>
            ======== EXAMPLES ===============================<para/>
            When you want to handle date of birth then time doesn&apos;t matter<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Unique(System.Boolean)">
            <summary>
            If set to True, a unique validation rule for this property will generated in the Modal which will prevent duplicate values.<para/>
            Also, a static method will be generated which finds and retunes an instance from the database by the property&apos;s value<para/>
            The method name is inferred from the property name. e.g Marking a property &quot;Email&quot; as unique will generate a method &quot;FindByEmail&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute when you want to make a property value unique<para/>
            ======== EXAMPLES ===============================<para/>
            Email Address<para/>
            Telephone Numbers<para/>
            User IDs<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Notes(System.String)">
            <summary>
            A description for the property to document any notes. Make your descriptions as descriptive as possible as they will be helpful later on to understand the Business Logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Attributes(System.String)">
            <summary>
            In this field you can specify custom C# attribute(s) for the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply custom C# attributes on the property.<para/>
            ======== EXAMPLES ===============================<para/>
            [Serializable]<para/>
            [XmlIgnore]<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.XmlIgnore(System.Boolean)">
            <summary>
            When set to True, the property will not be serialized when xml serialization will be performed on the instance<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform XML serialization and When you want to omit the property value<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Override(System.Boolean)">
            <summary>
            If set to true, Override keyword will be generated for the property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined a virtual property in the base class and want to override the property in the derived class<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Virtual(System.Boolean)">
            <summary>
            If set to True, &quot;Virtual&quot; keyword will be generated in the property definition<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are defining a base class and want to override this property in derived classes<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify a message which is displayed when the property value is null<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the property name<para/>
            e.g. Please provide a value for Email<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a dynamic validation message which requires business logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.DatabaseIndex(System.Nullable{System.Boolean})">
            <summary>
            If set to True, database index is generated for the property. Index are created to boost up the speed of data retrieval but downgrades the data writing speed if used unnecessary.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the property is going to be used rigorously to retrieve data from the database.<para/>
            ======== EXAMPLES ===============================<para/>
            Unique fields which are going to be parameterised often in data retrieval<para/>
            Identity Fields<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Calculated(System.Boolean)">
            <summary>
            If set to True,  the property is only generated in Modal entity class and no respective column is generated in database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to generate calculated properties especially when you need to display the value on UI<para/>
            ======== EXAMPLES ===============================<para/>
            You have FirstName and LastName as separate properties and want to create a property FullName which retunes the concatenation of both the FirstName and LastName Properties<para/>
            You want to show Customer balance which required calculation you can implement a  private method to calculate the balance and call that in calculated property to display it on UI<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Documentation(System.String)">
            <summary>
            In this field you can specify contents which are generated in the documentation summary tag of the poetry<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good practice to provide documentation of properties to make it more useable for consumer of the property or the developer who are going to manipulate it later on.<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.HelpText(System.String)">
            <summary>
            In this property you can specify contends which are displayed as the help text for the property.<para/>
            This property is also available in form module<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            When you need to display a dynamic help text property which requires Business Logic.<para/>
            Use Form Module element attribute &quot;help text &quot; to specify static help text with html markup.<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Getter(System.String)">
            <summary>
            In this field you can specify a C# expression to implement the get accessory of a calculated property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have a calculated property and want to implement custom get accessor<para/>
            ======== EXAMPLES ===============================<para/>
            CalculateBalance()<para/>
            FirstName + &quot; &quot; + LastName<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.Default(System.String)">
            <summary>
            In this field you can specify a static or c# expression based value which is set as the default value of the property in entity class constructor<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a default vale for a property<para/>
            ======== EXAMPLES ===============================<para/>
            You have a DateTime field DateCreated<para/>
            LocalTime.Now<para/>
            You have a field DicountCode which you want auto generate<para/>
            GenerateDiscountCode()<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.DefaultFormatString(System.String)">
            <summary>
            In this field you can specify the string format for a property which will be used to format the string on UI.<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            It is useful in cases of specifying a default format for DateTime and Numeric value to be printed on the screen using a default format string.<para/>
            ======== EXAMPLES ===============================<para/>
            You have DateTime property DateCreated which you want to show only short date on UI<para/>
            d<para/>
            You have DateTime property DateCreated which you want to show custom date format<para/>
            dd/MMM/yyyy<para/>
            You have Numeric field and want to add leading zeros if the value is less than 4 digits<para/>
            D4<para/>
            </summary>
        </member>
        <member name="M:MSharp.DateTimeProperty.IsReadOnlyInterfaceProperty(System.Nullable{System.Boolean})">
            <summary>
            If set to True, only the get accessor will be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is useful in scenarios when you want to have field which needs to be initialized at runtime time which should not be changed.<para/>
            Although, Constant variables are used as well but they cannot have dynamic value or initialized at runtime<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.LogEvents(System.Boolean)">
            <summary>
            When set to False, no log will be generated in ApplicationEvents on saving or deleting the entity&apos;s instance<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to log events for entities hold insensitive data.<para/>
            It is recommended not to disable it because it is very helpful in debugging.<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.TableName(System.String)">
            <summary>
            In this attribute, you can specify a name for the entity&apos;s database table.<para/>
            Tips:<para/>
            Always use Camel casing and Plural form<para/>
            ======== DEFAULT ================================<para/>
            Plural form of the entity name specified at the time of creation<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to alter the name of the respective database table for the entity.<para/>
            ======== EXAMPLES ===============================<para/>
            Categories<para/>
            EmailQueueItems<para/>
            NewFeeds<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.ClassName(System.String)">
            <summary>
            In this field you specify the Name  of the entity class.<para/>
            Tips:<para/>
            - Name your class based on the entity logic while focusing on real world objects<para/>
            - Avoid lengthy Names meaningless names<para/>
            - Using Camel case without spaces and in singular form<para/>
            ======== DEFAULT ================================<para/>
            Same as entity name, but in Camel casing without spaces<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to change the name of the entity class.<para/>
            ======== EXAMPLES ===============================<para/>
            ApplicationEvent<para/>
            Product<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Schema(System.String)">
            <summary>
            In this attribute you can specify schema of the database table related to the entity. Data access code for the entity uses the scheme specified in this attribute<para/>
            ======== DEFAULT ================================<para/>
            dbo<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have database table schema different than the default.<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.SortDescending(System.Boolean)">
            <summary>
            When set to true, the elements of then entity sequences are sorted in descending order based on the sort property specified or default property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to sort elements of a sequence in descending order<para/>
            ======== EXAMPLES ===============================<para/>
            Email by sentDate<para/>
            Payments By CreationDate<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.GenerateParseMethod(System.Boolean)">
            <summary>
            If set to True, a static method will be generated in entity class  which returns the entity instance that is textually represented with a specified string value, or null if no such object is found.<para/>
            Note:<para/>
            - ArgumentNullException is thrown if the string argument is null or empty<para/>
            - The text is compared with the default property as for entity type<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Usually in situations of maintaining interoperability. When dealing with XML data exchange to external system.<para/>
            ======== EXAMPLES ===============================<para/>
            You receive XML serialized data from an external application and want to parse each xml element as an Employee<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Sortable(System.Boolean)">
            <summary>
            When set to true, Entity definition will be amended with &quot;ISortable&quot; interface which will enable you to persist sort order<para/>
            Tips:<para/>
            You must implement an int type property named &quot;Order&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to persist sort order of an entity instances which can be changed as required<para/>
            ======== EXAMPLES ===============================<para/>
            Entity types instances displayed in menus<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Documentation(System.String)">
            <summary>
            A description for the entity type to document its purpose. Make your descriptions as descriptive as possible as they will be generated as Comments above the entity definition.<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Abstract(System.Boolean)">
            <summary>
            If set to True, entity class definition will be amended by Abstract keyword. Abstract type entities can not be instantiated and must be inherited in order to utilize the functionality.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to encapsulate generic properties and behaviours in an entity is partial in nature and must be inherited in order to create concrete objects by extending the properties and behaviours of an entity<para/>
            When you want to perform Polymorphism.<para/>
            ======== EXAMPLES ===============================<para/>
            User entity in M# which doesn&apos;t represent any concrete real world object but defines partial properties which are extended by inheriting it in other entities like Member, Employee or Admin<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Name(System.String)">
            <summary>
            In this field you specify the Name  of the entity.<para/>
            Tips:<para/>
            - Name your entity based on the business logic while focusing on real world objects<para/>
            - Avoid lengthy Names meaningless names<para/>
            - In M#, Always write name using Sentence case with spaces and in singular form<para/>
            Note:<para/>
            M# will generate entities and database tables using Camel case and plural form respectively<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field and is required at the time of creating an entity type<para/>
            ======== EXAMPLES ===============================<para/>
            Application event<para/>
            Product<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.PluralName(System.String)">
            <summary>
            In this field you can specify the plural name.<para/>
            ======== DEFAULT ================================<para/>
            M# generated plural name based on the entity name<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.InstanceAccessors(System.Boolean)">
            <summary>
            If set to True, a public static Property (accessor ) will be generated for each instance using the default property of the entity.<para/>
            Tips:<para/>
            - You should avoid setting this attribute when application supports globalization.<para/>
            - You must not set this attribute for an entity type which expects large number of records. You should<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to access instances of the entity type like an Enum type.<para/>
            ======== EXAMPLES ===============================<para/>
            You have OrderStatus entity and you want to access each instance to manage order stages<para/>
            OrderStatus.Pending<para/>
            OrderStatus.Completed<para/>
            OrderStatus.Dispatched<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Cachable(System.Nullable{System.Boolean})">
            <summary>
            If set to True, instances of the entity will be cached. All data access query will look in the cache first and then look in database tables<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to cache instances of the entity type having global scope in application in order to boost performance.<para/>
            Incorrect usage of this attribute could prove anti performance<para/>
            ======== EXAMPLES ===============================<para/>
            You have an ecommerce website which allows to filter products based on various attributes e.g. sizes, types, locations etc. You can mark the attribute related Entities cacheable.<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.SoftDelete(System.Boolean)">
            <summary>
            When set to True, entity instance are not deleted permanently rather a special database table column [.Deleted]  of type bit is marked.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to keep the log of deleted data for history and debugging in the same database table<para/>
            ======== EXAMPLES ===============================<para/>
            EmailQueueItem Entity<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.ToStringExpression(System.String)">
            <summary>
            This is a C# expression field. You can specify the ToString expression which is used for string representation of each instance of the entity.<para/>
            ======== DEFAULT ================================<para/>
            Default Property or the first string type property created<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            You want to represent each instance of the entity with a meaningful information on UI.<para/>
            We often use combination of properties to display an instance on UI which could become difficult to maintain afterwards if a change is required.<para/>
            Using this attribute you simple reference the instance and don&apos;t need to explicitly call properties and when a change is required you simply need to update this attribute.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to represent each instance of a User entity using its FirstName and LastName Property<para/>
            FirstName + &quot; &quot; + LastName<para/>
            You want to display an address entity instances<para/>
            new [] {BuildingNo, BuildingName, Street, City, Country, Postcode}.Except(string.Empty).ToString();<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.IsInterface(System.Boolean)">
            <summary>
            This attribute works in junction with Transient class.  If Set to True, the entity definition is &quot;Interface&quot;.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Interface are best suited when you want separate the definitions of objects from their implementation.<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.IsHirarchy(System.Boolean)">
            <summary>
            If set to True, the entity definition is extended with &quot;IHierarchy&quot; interface which is used to represent hierarchical data representation.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to manipulate hierarchal data especially when using tree view control to render data<para/>
            ======== EXAMPLES ===============================<para/>
            Categories with n level hierarchy.<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.TestInstanceNameExpression(System.String)">
            <summary>
            In this field you can specify a C# expression which will be used to generate the text instances. The expression must yield a unique name<para/>
            Tips:<para/>
            - use keyword &quot;each&quot; to reference each instance of the entity<para/>
            - Follow the C# variable naming convention<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to generate desired text instance to make them unique and more robust<para/>
            ======== EXAMPLES ===============================<para/>
            each.Name + &quot;_&quot; + each.Category<para/>
            each.Email<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Notes(System.String)">
            <summary>
            In this field you can comment any notes related to the entity regarding implementation or logic. Be as descriptive while specifying notes as possible.<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.EagerLoadData(System.Boolean)">
            <summary>
            If set to True, all the association will be loaded in the memory in one call<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It should be used very carefully as it could cause performance issues.<para/>
            You should only set it to True, when you are sure that you will consume the child collection fetched eagerly<para/>
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Associate(System.String,System.String,System.String,System.Int32)">
            <summary>
            Adds a many to one association to the specified type.
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Associate``1(System.String,System.String,System.Int32)">
            <summary>
            Adds a many to one association to the specified type.
            </summary>
        </member>
        <member name="M:MSharp.EntityType.AssociateMany``1(System.String,System.String,System.Int32)">
            <summary>
            Adds a many to many association to the specified type.
            </summary>
        </member>
        <member name="M:MSharp.EntityType.AssociateManyToMany``1(System.String,System.String,System.Int32)">
            <summary>
            Creates a junction entity with two associations: one to this type, and one to the specified target type.
            It also creates an inverse association to that in this type with the specified display name and suffix of Links.
            </summary>
        </member>
        <member name="M:MSharp.EntityType.Property(System.String)">
            <summary>
            Gets a property that is already defined on this type or any of its parent types.
            </summary>
        </member>
        <member name="M:MSharp.Namespace.LogicCodeFolder(System.String)">
            <summary>
            In this field you can specify the folder name which will be created inside Logic folder to keep partial class for business logic implementation<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to place the business logic logic classes in a custom sub-folder in the default folders i.e. Logic<para/>
            ======== EXAMPLES ===============================<para/>
            You need to create business logic classes for a referenced API and want to keep them in a separate folder<para/>
            </summary>
        </member>
        <member name="M:MSharp.Namespace.Name(System.String)">
            <summary>
            In this feed you can specify the name of the namespace which will be appeared in M# Modal section to logically group the entities<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field<para/>
            ======== EXAMPLES ===============================<para/>
            Payment<para/>
            Main<para/>
            </summary>
        </member>
        <member name="M:MSharp.Namespace.Schema(System.String)">
            <summary>
            In this attribute you can specify the schema of the database tables related to the entities created under this namespace<para/>
            ======== DEFAULT ================================<para/>
            dbo<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply a different scheme to database tables. All the database tables generated for entities will use this schema<para/>
            ======== EXAMPLES ===============================<para/>
            Person<para/>
            Language<para/>
            </summary>
        </member>
        <member name="M:MSharp.Namespace.CodeFolder(System.String)">
            <summary>
            In this field you can specify the folder name which will be created inside default to keep modal, mapping and Logic classes respectively<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to place the entity classes in a custom sub-folder in the default folders i.e. Entities, Mapping / DAL, Logic<para/>
            ======== EXAMPLES ===============================<para/>
            You need to create mock classes form a referenced API and want to keep them in a separate folder<para/>
            </summary>
        </member>
        <member name="M:MSharp.Namespace.ModelCodeFolder(System.String)">
            <summary>
            In this field you can specify the folder name which will be created inside default to keep modal and mapping classes respectively<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to place the entity classes in a custom sub-folder in the default folders i.e. Entities, Mapping<para/>
            ======== EXAMPLES ===============================<para/>
            You need to create mock classes form a referenced API and want to keep them in a separate folder<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.IsPercentage(System.Boolean)">
            <summary>
            If set to True, a percentage (%) sign is displayed along the property. The currency is set in project settings<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to use the property as percentage field<para/>
            ======== EXAMPLES ===============================<para/>
            You allow admin to supply discount rates<para/>
            You have a property VAT rate for calculating Vat %<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Name(System.String)">
            <summary>
            In this Property you specify the name of the property which is generated in Modal to access this property.<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in Camel case e.g. ResidenceAddress, ProductBatch, IsAllowed etc.<para/>
            ======== DEFAULT ================================<para/>
            It is inferred from the title of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            ResidenceAddress<para/>
            IsAllowed<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Scale(System.Int32)">
            <summary>
            In this field you can specify the scaling of a double type property after decimal point<para/>
            ======== DEFAULT ================================<para/>
            0<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to manipulate monetary field and need to scale the value according to business rules<para/>
            ======== EXAMPLES ===============================<para/>
            You have a product price which you want to scale up to 2 digits after decimal point<para/>
            2<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Mandatory(System.Boolean)">
            <summary>
            If set to True, a required validation rule will be generated in Modal and a required field validation control will be generated on UI to require the input.<para/>
            This behaviour can be overridden in UI using same attribute of form element. But, if the property is marked as mandatory the rule will be applied in modal even if it is set to false in UI<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a field mandatory for an entity instance<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Min(System.String)">
            <summary>
            In this attribute you can specify a numeric value which is treated as the minimum valid value for this property. A validation rule is generated in Modal and a validation control is generated on UI.<para/>
            ======== DEFAULT ================================<para/>
            0<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to impose a minimum valid value for a numeric field<para/>
            ======== EXAMPLES ===============================<para/>
            Static Expression<para/>
            10<para/>
            Dynamic Expression<para/>
            App.Settings.MiniumPayment<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Max(System.String)">
            <summary>
            In this attribute you can specify a numeric value which is treated as the maximum valid value for this property. A validation rule is generated in Modal and a validation control is generated on UI.<para/>
            ======== DEFAULT ================================<para/>
            Maximum value of the numeric type<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to impose a maximum valid value for a numeric field<para/>
            ======== EXAMPLES ===============================<para/>
            Static Expression<para/>
            10<para/>
            Dynamic Expression<para/>
            App.Settings.MaximumQuanity<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Title(System.String)">
            <summary>
            In this Property you specify the title of the property which is generated as the label in the module<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in normal case e.g. Residence address, Product batch, Is allowed? etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Residence address<para/>
            Is allowed?<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.IsCurrency(System.Boolean)">
            <summary>
            If set to True, a currency sign is displayed along the property. The currency is set in project settings<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to have the property as monetary field<para/>
            ======== EXAMPLES ===============================<para/>
            Price of a product<para/>
            Account Balance of a customer<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.AutoNumber(System.Boolean)">
            <summary>
            If set to True, the property will be treated as the auto number is database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to manage the numeric sequence when need to have an property as serial numbers<para/>
            ======== EXAMPLES ===============================<para/>
            You manage a books store and and want to assign a serial number using numeric auto number property<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Unique(System.Boolean)">
            <summary>
            If set to True, a unique validation rule for this property will generated in the Modal which will prevent duplicate values.<para/>
            Also, a static method will be generated which finds and retunes an instance from the database by the property&apos;s value<para/>
            The method name is inferred from the property name. e.g Marking a property &quot;Email&quot; as unique will generate a method &quot;FindByEmail&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute when you want to make a property value unique<para/>
            ======== EXAMPLES ===============================<para/>
            Email Address<para/>
            Telephone Numbers<para/>
            User IDs<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Notes(System.String)">
            <summary>
            A description for the property to document any notes. Make your descriptions as descriptive as possible as they will be helpful later on to understand the Business Logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Attributes(System.String)">
            <summary>
            In this field you can specify custom C# attribute(s) for the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply custom C# attributes on the property.<para/>
            ======== EXAMPLES ===============================<para/>
            [Serializable]<para/>
            [XmlIgnore]<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.XmlIgnore(System.Boolean)">
            <summary>
            When set to True, the property will not be serialized when xml serialization will be performed on the instance<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform XML serialization and When you want to omit the property value<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Override(System.Boolean)">
            <summary>
            If set to true, Override keyword will be generated for the property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined a virtual property in the base class and want to override the property in the derived class<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Virtual(System.Boolean)">
            <summary>
            If set to True, &quot;Virtual&quot; keyword will be generated in the property definition<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are defining a base class and want to override this property in derived classes<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify a message which is displayed when the property value is null<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the property name<para/>
            e.g. Please provide a value for Email<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a dynamic validation message which requires business logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.DatabaseIndex(System.Nullable{System.Boolean})">
            <summary>
            If set to True, database index is generated for the property. Index are created to boost up the speed of data retrieval but downgrades the data writing speed if used unnecessary.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the property is going to be used rigorously to retrieve data from the database.<para/>
            ======== EXAMPLES ===============================<para/>
            Unique fields which are going to be parameterised often in data retrieval<para/>
            Identity Fields<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Calculated(System.Boolean)">
            <summary>
            If set to True,  the property is only generated in Modal entity class and no respective column is generated in database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to generate calculated properties especially when you need to display the value on UI<para/>
            ======== EXAMPLES ===============================<para/>
            You have FirstName and LastName as separate properties and want to create a property FullName which retunes the concatenation of both the FirstName and LastName Properties<para/>
            You want to show Customer balance which required calculation you can implement a  private method to calculate the balance and call that in calculated property to display it on UI<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Documentation(System.String)">
            <summary>
            In this field you can specify contents which are generated in the documentation summary tag of the poetry<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good practice to provide documentation of properties to make it more useable for consumer of the property or the developer who are going to manipulate it later on.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.HelpText(System.String)">
            <summary>
            In this property you can specify contends which are displayed as the help text for the property.<para/>
            This property is also available in form module<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            When you need to display a dynamic help text property which requires Business Logic.<para/>
            Use Form Module element attribute &quot;help text &quot; to specify static help text with html markup.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Getter(System.String)">
            <summary>
            In this field you can specify a C# expression to implement the get accessory of a calculated property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have a calculated property and want to implement custom get accessor<para/>
            ======== EXAMPLES ===============================<para/>
            CalculateBalance()<para/>
            FirstName + &quot; &quot; + LastName<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.Default(System.String)">
            <summary>
            In this field you can specify a static or c# expression based value which is set as the default value of the property in entity class constructor<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a default vale for a property<para/>
            ======== EXAMPLES ===============================<para/>
            You have a DateTime field DateCreated<para/>
            LocalTime.Now<para/>
            You have a field DicountCode which you want auto generate<para/>
            GenerateDiscountCode()<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.DefaultFormatString(System.String)">
            <summary>
            In this field you can specify the string format for a property which will be used to format the string on UI.<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            It is useful in cases of specifying a default format for DateTime and Numeric value to be printed on the screen using a default format string.<para/>
            ======== EXAMPLES ===============================<para/>
            You have DateTime property DateCreated which you want to show only short date on UI<para/>
            d<para/>
            You have DateTime property DateCreated which you want to show custom date format<para/>
            dd/MMM/yyyy<para/>
            You have Numeric field and want to add leading zeros if the value is less than 4 digits<para/>
            D4<para/>
            </summary>
        </member>
        <member name="M:MSharp.NumberProperty.IsReadOnlyInterfaceProperty(System.Nullable{System.Boolean})">
            <summary>
            If set to True, only the get accessor will be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is useful in scenarios when you want to have field which needs to be initialized at runtime time which should not be changed.<para/>
            Although, Constant variables are used as well but they cannot have dynamic value or initialized at runtime<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.StyleRequiredFormElements(System.Boolean)">
            <summary>
            If set to True, a css class &quot;required-item&quot; is applied on the container html element of a form element which is marked as mandatory in Modal or UI.<para/>
            Note:<para/>
            - You must define &quot;required-item&quot; style in you css file according to you design requirement<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is very useful when you need to distinguish required fields on a form. It saves time by automatically applying css class rather you specify the css class on individual element.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.Encoding(System.String)">
            <summary>
            In this field you can specify the default encoding which is also used to as the default encoding for CSV and excel data handling<para/>
            ======== DEFAULT ================================<para/>
            UTF-8<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Although, the default Unicode character set UTF-8 encoding supports wide range or charters but you can supply a specific encoding required in the project<para/>
            ======== EXAMPLES ===============================<para/>
            For Western Languages ANSI Encoding<para/>
            Windows-1252<para/>
            ASCI<para/>
            SO-8859-1<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.EntitiesStructureTestFolder(System.String)">
            <summary>
            In this attribute you can specify the folder name for text structure classes which define properties and validators for entity objects<para/>
            ======== DEFAULT ================================<para/>
            Structure<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.IsMultiLingual(System.Boolean)">
            <summary>
            If set to True, language translation support will be activated to translate the page contents to other languages<para/>
            Please read  Configuring M# for Multi Languages  for more information on setting up multi-lingual support<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable multi-language support for full websites<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.AvoidColonForFormElements(System.Boolean)">
            <summary>
            If set to True, the colons (:) at the end of each label for form input controls will not be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to generate colons (:) at the end of each label used for input control on form modules<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.CopyrightCompany(System.String)">
            <summary>
            In this field you can specify the company name which is used to generate the copyright headers in each class of the project.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to generate copyright headers to personalise the code<para/>
            ======== EXAMPLES ===============================<para/>
            Geeks Ltd<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.AvoidColonForViewElements(System.Boolean)">
            <summary>
            If set to True, the colons (:) at the end of each label in view module will not be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to generate colons (:) at the end of each label in view module<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.RequiredValidationMessageTemplate(System.String)">
            <summary>
            In this field you can specify a template for validation message.<para/>
            Tips:<para/>
            - Use {0} keyword to reference the message in you template<para/>
            - Html markup will not be rendered in message box style<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to apply special appearance style for validation messages.<para/>
            ======== EXAMPLES ===============================<para/>
            {0}<para/>
            {0}<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.BasePageClassName(System.String)">
            <summary>
            In this field you can specify a class name which will be inherited by each page class (.aspx.cs) created in M#.<para/>
            Tips<para/>
            - Inherit M# Page base class in your custom base class to retain the useful features.<para/>
            ======== DEFAULT ================================<para/>
            MSharp.Framework.UI.Page<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize the pages and need to use a base class e.g. To override cultureInitialization<para/>
            ======== EXAMPLES ===============================<para/>
            MyCustomClass<para/>
            MyProject.BaseClass<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.UseUtcDatetimeFormat(System.Boolean)">
            <summary>
            When set to True, System.DateTime value will be Converted the to Coordinated Universal Time (UTC).<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good to always store DateTime in UTC format for enterprise and globalized applications and display DateTime in local time zone.<para/>
            Use UTC especially in forums where you record DateTime automatically e.g. DatePosted, DateReplied etc. The benefit is that the records always sorted correctly<para/>
            ======== EXAMPLES ===============================<para/>
            You have a social website hosted on different servers in different zones and users around the world post contents using their local server.<para/>
            In this scenario, you should store DateTime in UTC format. This will help in keeping message threads in correct date order even the Time zone is different.<para/>
            But remember that you should always display dates in local time zone.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.Name(System.String)">
            <summary>
            In this field you can specify the name of the project. Which is also used to generate the assembly name<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory field which is set at the time of creating the project<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.GeneratedClassesFolder(System.String)">
            <summary>
            In this field you can specify a folder name for generated entity structure classes<para/>
            ======== DEFAULT ================================<para/>
            Entities<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to alter the name of the generated partial entity structure classes<para/>
            ======== EXAMPLES ===============================<para/>
            Structures<para/>
            Entities/Definitions<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.GeneratedDALFolder(System.String)">
            <summary>
            In this field you can specify the folder name for mapping classes i.e. Data Access Classes<para/>
            ======== DEFAULT ================================<para/>
            DAL (ADo.NET)<para/>
            Mappings(MS Entity Framework / NHibernate)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to alter the data access classes folder<para/>
            ======== EXAMPLES ===============================<para/>
            DAL/SQLDataAccess<para/>
            SQLDAL<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.RootUrl(System.String)">
            <summary>
            In this attribute you can specify the Location of the project<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is mandatory field and is specified at the time of creating a project<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.DataAccessNamespace(System.String)">
            <summary>
            In this field you can specify the data access class(es) namespace. These classes encapsulate the mappings of entity and database tables<para/>
            Tips:<para/>
            _ You will have to replace the &quot;providerFactoryType&quot; attribute of DataProviderModal section in web.config with the namespace you specify in this attribute<para/>
            ======== DEFAULT ================================<para/>
            AppData<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is advised to keep the default namespace as it may cause data access issues, but you can use any custom namespace to personalise the data access logic<para/>
            ======== EXAMPLES ===============================<para/>
            SqlDataAccess<para/>
            OLEDBDataAccess<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.DataAccessStrategy(MSharp.DataAccessStrategy)">
            <summary>
            In this field you can choose the data persistence infrastructure.  You can choose one of the three available frameworks<para/>
            - ADO.Net<para/>
            - MS Entity FrameWork<para/>
            - NHibernate<para/>
            ======== DEFAULT ================================<para/>
            Ado.Net<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to use the alternate data access strategy based on project and performance requirements.<para/>
            Please note that changing the data access strategy mid way through the development may cause discrepancies<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.ValidationStyle(System.String)">
            <summary>
            In this field you can specify the default validation style(s) to show the validation messages on pages. You can choose single or combination of the following styles<para/>
            - Error text after Control<para/>
            - Error text before Control<para/>
            - Error text before label<para/>
            - Error text after label<para/>
            - Callout box<para/>
            - Full message<para/>
            - Message Box<para/>
            - Summary Box<para/>
            Note:<para/>
            - Some combinations cannot be used e.g first four of above together<para/>
            ======== DEFAULT ================================<para/>
            Message Box,Error text after control<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customise the validation styles based on the appearance and design style of the website<para/>
            ======== EXAMPLES ===============================<para/>
            Message Box,Error text after label, Callout box<para/>
            Error text after label, Callout box<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.DefaultCurrency(System.String)">
            <summary>
            In this field you can specify the default currency sign which will appear beside monetary fields in modules<para/>
            ======== DEFAULT ================================<para/>
            £<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to manipulate a different currency in the project other than Pound Sterling (£)<para/>
            ======== EXAMPLES ===============================<para/>
            $<para/>
            &amp;euro;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.SolutionFile(System.String)">
            <summary>
            In this attribute you can specify the VS solution file name for the project<para/>
            ======== DEFAULT ================================<para/>
            The name is inferred from the Project name<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory field and is automatically specified at the time of creating a project<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.AvoidColonForSearchElements(System.Boolean)">
            <summary>
            If set to True, the colons (:) at the end of each label for search box input controls will not be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to generate colons (:) at the end of each label used for input control in search boxes<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.PageModuleContainerCss(System.String)">
            <summary>
            In this field, you can set css class(es) for module container element. A &quot;div&quot; html element is generated with the specified css class(es).<para/>
            This attribute can be overridden by specifying same attribute for master page template<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When a special appearance style is needed for the modules.<para/>
            ======== EXAMPLES ===============================<para/>
            border-round<para/>
            border-round box-thin-shadow<para/>
            c#: (Case != null) ? &quot;case-border&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.UnitTestsFramework(System.String)">
            <summary>
            In this field you can specify the framework to generate the unit tests. Below are the supported Unit test frameworks<para/>
            - VisualStudio<para/>
            - MbUnit<para/>
            ======== DEFAULT ================================<para/>
            Visual Studio<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to  generate unit test using MbUnit framework. It depends on the unit test requirement when you use which framework.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Project.AutoTask(System.String,System.String,System.Int32)">
            <summary>
             Adds an automated task plan.
            </summary>
        </member>
        <member name="M:MSharp.Property.Name(System.String)">
            <summary>
            In this Property you specify the name of the property which is generated in Modal to access this property.<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in Camel case e.g. ResidenceAddress, ProductBatch, IsAllowed etc.<para/>
            ======== DEFAULT ================================<para/>
            It is inferred from the title of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            ResidenceAddress<para/>
            IsAllowed<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Mandatory(System.Boolean)">
            <summary>
            If set to True, a required validation rule will be generated in Modal and a required field validation control will be generated on UI to require the input.<para/>
            This behaviour can be overridden in UI using same attribute of form element. But, if the property is marked as mandatory the rule will be applied in modal even if it is set to false in UI<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a field mandatory for an entity instance<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Title(System.String)">
            <summary>
            In this Property you specify the title of the property which is generated as the label in the module<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in normal case e.g. Residence address, Product batch, Is allowed? etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Residence address<para/>
            Is allowed?<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Unique(System.Boolean)">
            <summary>
            If set to True, a unique validation rule for this property will generated in the Modal which will prevent duplicate values.<para/>
            Also, a static method will be generated which finds and retunes an instance from the database by the property&apos;s value<para/>
            The method name is inferred from the property name. e.g Marking a property &quot;Email&quot; as unique will generate a method &quot;FindByEmail&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute when you want to make a property value unique<para/>
            ======== EXAMPLES ===============================<para/>
            Email Address<para/>
            Telephone Numbers<para/>
            User IDs<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Notes(System.String)">
            <summary>
            A description for the property to document any notes. Make your descriptions as descriptive as possible as they will be helpful later on to understand the Business Logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Attributes(System.String)">
            <summary>
            In this field you can specify custom C# attribute(s) for the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply custom C# attributes on the property.<para/>
            ======== EXAMPLES ===============================<para/>
            [Serializable]<para/>
            [XmlIgnore]<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.XmlIgnore(System.Boolean)">
            <summary>
            When set to True, the property will not be serialized when xml serialization will be performed on the instance<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform XML serialization and When you want to omit the property value<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Override(System.Boolean)">
            <summary>
            If set to true, Override keyword will be generated for the property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined a virtual property in the base class and want to override the property in the derived class<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Virtual(System.Boolean)">
            <summary>
            If set to True, &quot;Virtual&quot; keyword will be generated in the property definition<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are defining a base class and want to override this property in derived classes<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify a message which is displayed when the property value is null<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the property name<para/>
            e.g. Please provide a value for Email<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a dynamic validation message which requires business logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.DatabaseIndex(System.Nullable{System.Boolean})">
            <summary>
            If set to True, database index is generated for the property. Index are created to boost up the speed of data retrieval but downgrades the data writing speed if used unnecessary.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the property is going to be used rigorously to retrieve data from the database.<para/>
            ======== EXAMPLES ===============================<para/>
            Unique fields which are going to be parameterised often in data retrieval<para/>
            Identity Fields<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Calculated(System.Boolean)">
            <summary>
            If set to True,  the property is only generated in Modal entity class and no respective column is generated in database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to generate calculated properties especially when you need to display the value on UI<para/>
            ======== EXAMPLES ===============================<para/>
            You have FirstName and LastName as separate properties and want to create a property FullName which retunes the concatenation of both the FirstName and LastName Properties<para/>
            You want to show Customer balance which required calculation you can implement a  private method to calculate the balance and call that in calculated property to display it on UI<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Documentation(System.String)">
            <summary>
            In this field you can specify contents which are generated in the documentation summary tag of the poetry<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good practice to provide documentation of properties to make it more useable for consumer of the property or the developer who are going to manipulate it later on.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.HelpText(System.String)">
            <summary>
            In this property you can specify contends which are displayed as the help text for the property.<para/>
            This property is also available in form module<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            When you need to display a dynamic help text property which requires Business Logic.<para/>
            Use Form Module element attribute &quot;help text &quot; to specify static help text with html markup.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Getter(System.String)">
            <summary>
            In this field you can specify a C# expression to implement the get accessory of a calculated property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have a calculated property and want to implement custom get accessor<para/>
            ======== EXAMPLES ===============================<para/>
            CalculateBalance()<para/>
            FirstName + &quot; &quot; + LastName<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.Default(System.String)">
            <summary>
            In this field you can specify a static or c# expression based value which is set as the default value of the property in entity class constructor<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a default vale for a property<para/>
            ======== EXAMPLES ===============================<para/>
            You have a DateTime field DateCreated<para/>
            LocalTime.Now<para/>
            You have a field DicountCode which you want auto generate<para/>
            GenerateDiscountCode()<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.DefaultFormatString(System.String)">
            <summary>
            In this field you can specify the string format for a property which will be used to format the string on UI.<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            It is useful in cases of specifying a default format for DateTime and Numeric value to be printed on the screen using a default format string.<para/>
            ======== EXAMPLES ===============================<para/>
            You have DateTime property DateCreated which you want to show only short date on UI<para/>
            d<para/>
            You have DateTime property DateCreated which you want to show custom date format<para/>
            dd/MMM/yyyy<para/>
            You have Numeric field and want to add leading zeros if the value is less than 4 digits<para/>
            D4<para/>
            </summary>
        </member>
        <member name="M:MSharp.Property.IsReadOnlyInterfaceProperty(System.Nullable{System.Boolean})">
            <summary>
            If set to True, only the get accessor will be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is useful in scenarios when you want to have field which needs to be initialized at runtime time which should not be changed.<para/>
            Although, Constant variables are used as well but they cannot have dynamic value or initialized at runtime<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.HashPassword(System.Boolean)">
            <summary>
            Use this property if you wish to store the password fields values encrypted/hashed in your database.<para/>
            This will make your application more secure, since you do not store the passwords in the database in clear format<para/>
            Note:<para/>
            You will not be able to recover the user passwords anymore, you only can reset hashed passwords.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            The passwords are stored in clear format in the database.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Additional level of security.<para/>
            ======== EXAMPLES ===============================<para/>
            True<para/>
            Hashed password<para/>
            False<para/>
            Clear text password<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Name(System.String)">
            <summary>
            In this Property you specify the name of the property which is generated in Modal to access this property.<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in Camel case e.g. ResidenceAddress, ProductBatch, IsAllowed etc.<para/>
            ======== DEFAULT ================================<para/>
            It is inferred from the title of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            ResidenceAddress<para/>
            IsAllowed<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Accepts(MSharp.TextPattern)">
            <summary>
            Use this field to use an alternative text patterns for the text fields in the model. These patterns affect the appearance, behaviour and validation rules for this field.<para/>
            The available options are:<para/>
            - Email address<para/>
            - Internet URL<para/>
            - ISBN<para/>
            - Limited company number<para/>
            - Password<para/>
            - Scotland Limited Company Number<para/>
            - Social Security Number (USA)<para/>
            - U.K. Post code<para/>
            - U.K. Post code - 2 parts<para/>
            - U.S. Phone Number<para/>
            ======== DEFAULT ================================<para/>
            Blank, which means the text field is not going to have any special formatting/behaviour.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute to specialised text fields to one of the options above.<para/>
            ======== EXAMPLES ===============================<para/>
            Email address<para/>
            Password<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Mandatory(System.Boolean)">
            <summary>
            If set to True, a required validation rule will be generated in Modal and a required field validation control will be generated on UI to require the input.<para/>
            This behaviour can be overridden in UI using same attribute of form element. But, if the property is marked as mandatory the rule will be applied in modal even if it is set to false in UI<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to make a field mandatory for an entity instance<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Lines(System.Nullable{System.Int32})">
            <summary>
            Specifies the number of lines to use for the textboxes when rending the forms for this element on this entity.<para/>
            By default, every text field will be displayed in a   control, but if you enter a number larger than 1, then it will be rendered as a TextArea field.<para/>
            ======== DEFAULT ================================<para/>
            Blank (i.e. 1), all the text fields are rendered in one lines in forms.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In order to convert a text field to a TextArea in the forms.<para/>
            ======== EXAMPLES ===============================<para/>
            10  10 Lines<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.TrimValues(System.Boolean)">
            <summary>
            A Boolean field to specify whether the model should trim the string values, removing empty spaces at the beginning and the end of the string, before saving it into database.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            By default, M# trims all string values. If you want to change this behaviour, you have to set it to false.<para/>
            ======== EXAMPLES ===============================<para/>
            True<para/>
            Trims the string values.<para/>
            False<para/>
            Does not trim the string values.<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Title(System.String)">
            <summary>
            In this Property you specify the title of the property which is generated as the label in the module<para/>
            Note:<para/>
            - Specify unique name in the entity<para/>
            - Specify name in normal case e.g. Residence address, Product batch, Is allowed? etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Residence address<para/>
            Is allowed?<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Max(System.Nullable{System.Int32})">
            <summary>
            Specifies the capacity of this String property.<para/>
            In other word, the maximum number of characters which could be saved in this field.<para/>
            The application will generate an error message if you try to save an string longer that the value entered here in this field.<para/>
            ======== DEFAULT ================================<para/>
            200<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In case you want to save values with larger string sizes or smaller ones.<para/>
            ======== EXAMPLES ===============================<para/>
            2000<para/>
            A string field with maximum 2000 characters<para/>
            8<para/>
            A string field with maximum 8 characters<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Unique(System.Boolean)">
            <summary>
            If set to True, a unique validation rule for this property will generated in the Modal which will prevent duplicate values.<para/>
            Also, a static method will be generated which finds and retunes an instance from the database by the property&apos;s value<para/>
            The method name is inferred from the property name. e.g Marking a property &quot;Email&quot; as unique will generate a method &quot;FindByEmail&quot;<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute when you want to make a property value unique<para/>
            ======== EXAMPLES ===============================<para/>
            Email Address<para/>
            Telephone Numbers<para/>
            User IDs<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Notes(System.String)">
            <summary>
            A description for the property to document any notes. Make your descriptions as descriptive as possible as they will be helpful later on to understand the Business Logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Attributes(System.String)">
            <summary>
            In this field you can specify custom C# attribute(s) for the property.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply custom C# attributes on the property.<para/>
            ======== EXAMPLES ===============================<para/>
            [Serializable]<para/>
            [XmlIgnore]<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Override(System.Boolean)">
            <summary>
            If set to true, Override keyword will be generated for the property<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined a virtual property in the base class and want to override the property in the derived class<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Virtual(System.Boolean)">
            <summary>
            If set to True, &quot;Virtual&quot; keyword will be generated in the property definition<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are defining a base class and want to override this property in derived classes<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.RequiredValidationMessage(System.String)">
            <summary>
            In this field you can specify a message which is displayed when the property value is null<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the property name<para/>
            e.g. Please provide a value for Email<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display a dynamic validation message which requires business logic.<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.DatabaseIndex(System.Nullable{System.Boolean})">
            <summary>
            If set to True, database index is generated for the property. Index are created to boost up the speed of data retrieval but downgrades the data writing speed if used unnecessary.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the property is going to be used rigorously to retrieve data from the database.<para/>
            ======== EXAMPLES ===============================<para/>
            Unique fields which are going to be parameterised often in data retrieval<para/>
            Identity Fields<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Calculated(System.Boolean)">
            <summary>
            If set to True,  the property is only generated in Modal entity class and no respective column is generated in database table<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to generate calculated properties especially when you need to display the value on UI<para/>
            ======== EXAMPLES ===============================<para/>
            You have FirstName and LastName as separate properties and want to create a property FullName which retunes the concatenation of both the FirstName and LastName Properties<para/>
            You want to show Customer balance which required calculation you can implement a  private method to calculate the balance and call that in calculated property to display it on UI<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Documentation(System.String)">
            <summary>
            In this field you can specify contents which are generated in the documentation summary tag of the poetry<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is good practice to provide documentation of properties to make it more useable for consumer of the property or the developer who are going to manipulate it later on.<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.HelpText(System.String)">
            <summary>
            In this property you can specify contends which are displayed as the help text for the property.<para/>
            This property is also available in form module<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            When you need to display a dynamic help text property which requires Business Logic.<para/>
            Use Form Module element attribute &quot;help text &quot; to specify static help text with html markup.<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Getter(System.String)">
            <summary>
            In this field you can specify a C# expression to implement the get accessory of a calculated property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have a calculated property and want to implement custom get accessor<para/>
            ======== EXAMPLES ===============================<para/>
            CalculateBalance()<para/>
            FirstName + &quot; &quot; + LastName<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.Default(System.String)">
            <summary>
            In this field you can specify a static or c# expression based value which is set as the default value of the property in entity class constructor<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a default vale for a property<para/>
            ======== EXAMPLES ===============================<para/>
            You have a DateTime field DateCreated<para/>
            LocalTime.Now<para/>
            You have a field DicountCode which you want auto generate<para/>
            GenerateDiscountCode()<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.DefaultFormatString(System.String)">
            <summary>
            In this field you can specify the string format for a property which will be used to format the string on UI.<para/>
            ======== S       WHEN TO USE/SET IT? ============<para/>
            It is useful in cases of specifying a default format for DateTime and Numeric value to be printed on the screen using a default format string.<para/>
            ======== EXAMPLES ===============================<para/>
            You have DateTime property DateCreated which you want to show only short date on UI<para/>
            d<para/>
            You have DateTime property DateCreated which you want to show custom date format<para/>
            dd/MMM/yyyy<para/>
            You have Numeric field and want to add leading zeros if the value is less than 4 digits<para/>
            D4<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.IsReadOnlyInterfaceProperty(System.Nullable{System.Boolean})">
            <summary>
            If set to True, only the get accessor will be generated.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is useful in scenarios when you want to have field which needs to be initialized at runtime time which should not be changed.<para/>
            Although, Constant variables are used as well but they cannot have dynamic value or initialized at runtime<para/>
            </summary>
        </member>
        <member name="M:MSharp.StringProperty.#ctor(System.Nullable{System.Int32})">
            <param name="max">Maximum string length. If left empty, no validation or limit will be imposed.</param>
        </member>
        <member name="M:MSharp.UniquenessRule.ErrorMessage(System.String)">
            <summary>
            In this field you can specify plain text message which will be display when the uniqueness validation rule is failed. Be descriptive in specifying the merge which should convey the error meaningfully<para/>
            ======== DEFAULT ================================<para/>
            Inferred form the uniqueness rule<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Although the default error message is descriptive enough but you can specify a more specific error message if and when required.<para/>
            ======== EXAMPLES ===============================<para/>
            There is already a record with same category and product in the database<para/>
            There is already an address with the same house number, postcode and member in the database.<para/>
            </summary>
        </member>
        <member name="M:MSharp.UniquenessRuleElement.TreatNullAsValue(System.Boolean)">
            <summary>
            If set to True, the null value will be treated as valid value and unique rule will throw valuation even if more than one null value is passed in the properties related to uniqueness rule<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In scenarios where you allow user to pass in null values which are included in uniqueness rule.<para/>
            ======== EXAMPLES ===============================<para/>
            You save products with association of Category but some of products may not have the category associated. But you also don&apos;t want to add the same product twice without a category.<para/>
            You can set this attribute on uniqueness rule which will throw warning if the a product with null category is added more than once<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.MarkupTemplate(System.String)">
            <summary>
            Specify Html markup that will be used to layout the page. Use [#1#] as the placeholder for the first module on the page. or [#2#],... for the other modules.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to layout a page and customize the arrangement of the modules registered on this page<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            [#1#]<para/>
            [#2#]<para/>
            Example 2<para/>
            [#1#]<para/>
            [#2#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.BaseController(System.String)">
            <summary>
            Each page code behind class inherits MSharp.Framework.UI.Page class. Specifying any class name in this attribute will replace the base class of the code behind class of this page.<para/>
            ======== DEFAULT ================================<para/>
            MSharp.Framework.UI.Page<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to inherit a custom base class for the code behind class.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            MyCustomClass<para/>
            Example 2<para/>
            MyNamespace.CustomPageSecurity<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.CommentTag(System.String)">
            <summary>
            Any tag specified here will be shown before the page name in user interface section<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to tag a page for readability and ease of maintenance<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            01<para/>
            Example 2<para/>
            Secure<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.Name(System.String)">
            <summary>
            Sets the name of this page.  The ASPX page will be generated based on this name.<para/>
            Remember that it will be visible to the user in the browser address bar. Use a descriptive clear and short name.<para/>
            Notes:<para/>
            - M# will automatically replace space with hyphen.<para/>
            - Do not use Pascal or Camel casing. Use separate clear words in plain English.<para/>
            - A page&amp;#39;s name together with its full hierarchy (name of its parent page, grand parent, etc) should characterise the page.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Every page must have a name.<para/>
            ======== EXAMPLES ===============================<para/>
            Forgot password<para/>
            The name should be in clear English with capital casing for the first word and spaces between words.<para/>
            Users<para/>
            ¬<para/>
            Sign up<para/>
            ¬<para/>
            Forgot password<para/>
            The name should be set in the hierarchy context.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.BrowserTitle(System.String)">
            <summary>
            In this field you can specify a browser title for the page.<para/>
            The resulting text will be rendered in the output HTML page in   tag under   area.<para/>
            ======== DEFAULT ================================<para/>
            By default the generated title of each page will be generated as  the path to the page, separated with &quot; | &quot; , where each page/node in the path is represented by it&amp;#39;s title/name.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It&amp;#39;s important to set it to a SEO friendly value if this page is a public facing page and search engines need to index it.<para/>
            ======== EXAMPLES ===============================<para/>
            MyWebsite.com | Contact us<para/>
            c#: &quot;User edit - &quot; + App.Context.User.UserName<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.Layout(MSharp.MasterPage)">
            <summary>
            In this field you can specify the template of the page.<para/>
            Note:<para/>
            Be careful in selecting this template because your page totally is related to this template in visualization.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is mandatory and is set at the time of creating a page.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.Roles(MSharp.ProjectRole[])">
            <summary>
            Use this attribute to select role(s) allowed to access this page.<para/>
            Note:<para/>
            The page will only be accessible to the user of specified roles<para/>
            ======== DEFAULT ================================<para/>
            Guest<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enforce role based security.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.StyleDefinitions(System.String)">
            <summary>
            In this field you can define inline css classes and rules. All css classes defined here are generated on the page inside    tag<para/>
            Note:<para/>
            Always define css styles and rules in css files and try to avoid inline css style definitions<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            In a very specific case when you need to use inline css styles<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            .two-column-page { width:980px;}<para/>
            Example 2<para/>
            div.readmore &gt; a { font-size:9pt;}<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.ControllerCustomCode(System.String)">
            <summary>
            This field act as a Quick class code. The code specified in this attribute will be generated just after the code-behind class definition.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When start up section doesn&apos;t fulfil the requirement and you wan to write page level custom code.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            public Member Item { {get{Request.Get (); }}<para/>
            Example 2<para/>
            protected override void InitializeCulture()<para/>
            {<para/>
            //Culture Initialization Code<para/>
            }<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.ValidateRequest(System.Nullable{System.Boolean})">
            <summary>
            If this field is set to False the system stops to validate incoming requests.<para/>
            Note:<para/>
            Setting this to False could make it vulnerable to Cross Site Scripting<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is done in pages which you want to allow user enter HTML contents.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.EnableSSL(System.Nullable{System.Boolean})">
            <summary>
            If set to True, the page will be served only on https protocol<para/>
            If set to false, page is served on Http protocol only<para/>
            ======== DEFAULT ================================<para/>
            Auto, system<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to setup a page explicitly for secure or unsecure web protocol<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.RootCssClass(System.String)">
            <summary>
            In this field you can specify a css class of the page. Specifying a css class will generate a container element &quot;span&quot; with the given class and all the registered modules will be placed inside this container element.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply any page specific design or layout related css<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            two-column-form<para/>
            Example 2<para/>
            compact-view user-order-view<para/>
            Example 3<para/>
            c#: (Case != null) ? &quot;progress-list&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.ControllerAttributes(System.String)">
            <summary>
            Any attribute specified here will be generated in the @page directive.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this attribute to specify any attribute not available in M#.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            Debug=&quot;true&quot;<para/>
            Example 2<para/>
            EnableEventValidation=&quot;false&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ApplicationPage.UrlSegment(System.String)">
            <summary>
            Normally the children of this page get the name of this page as part of their url.<para/>
            If you want to remove this from its children&apos;s urls, then set UrlSegment to [#EMPTY#].<para/>
            Or if you want it to be shorter than its name, then provide a brief value.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            For example if your deep page has the value of  /administrator/cms/products/view/{id}<para/>
            you can use UrlSegment on the parent pages to turn it into:<para/>
            /admin/products/{id}<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.RepeatDataSource(System.String)">
            <summary>
            This is a C# expression field. In this field you can specify a collection type data source.<para/>
            If the data source is specified, M# generates an asp.net &quot;Repeater Control&quot; with the specified &quot;DataSource&quot; and placed the button as the &quot;ItemTemplate&quot; of the &quot;Repeater Control&quot;<para/>
            Tip:<para/>
            - You can access each public property / method of each element of the data source sequence in other attributes of the same button e.g. Image URL, Text etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This attribute is very useful when you want to render multiple button based on a “DataSource” e.g. List of users to link their profiles or Products of a category<para/>
            ======== EXAMPLES ===============================<para/>
            You want to render buttons for all the active users with FullName as the button text<para/>
            Repeat data source: Item.GetActiveEmployees()<para/>
            Text: C#: (Container.DataItem as Employee).FullName<para/>
            You want to render buttons for a category products with thumbnail images and link to the View Page<para/>
            Repeat data source: Item.Products<para/>
            Image URL: C#: (Container.DataItem as Product).Photo.Url()<para/>
            Query String: C#: (Container.DataItem as Product).ID<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.Text(System.String)">
            <summary>
            You should enter the display text of the button in this field.<para/>
            Supported formats:<para/>
            - Plain text<para/>
            - c# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            To set the display text of the button.<para/>
            ======== EXAMPLES ===============================<para/>
            Add user<para/>
            c#: string.Format(&quot;Add {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.CausesValidation(System.Boolean)">
            <summary>
            If set to True, the Validation will be performed on the module when the button is clicked.<para/>
            ======== DEFAULT ================================<para/>
            True (Except Cancel Button which is generated at the time of creating a module)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to perform validation on button click.<para/>
            ======== EXAMPLES ===============================<para/>
            For cancel button which you don&apos;t want to validate the page and just leave it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.IsDefault(System.Nullable{System.Boolean})">
            <summary>
            If Set to True, the button is made the default button on the page which is triggered when the return key is pressed.<para/>
            Note:<para/>
            You can only have one button as the default button in a module.<para/>
            When a button is set as Default button using this attribute then this attribute is set as False for all the other buttons<para/>
            ======== DEFAULT ================================<para/>
            False (Except Save button which is generated at the time of creating a Form Module )<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set the button as the default focused button.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.ConfirmQuestion(System.String)">
            <summary>
            If you enter a text in this field, the system will show a confirmation message to the end user when they click this button.<para/>
            If the user then selects No, the operation will be terminated and the button workflow will not run.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to confirm something when users clicks the button.<para/>
            It&amp;#39;s used mostly in Delete operations or any other sensitive action.<para/>
            ======== EXAMPLES ===============================<para/>
            Are you sure?<para/>
            c#: &quot;Are you sure you want to delete &quot; + Item + &quot;?&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.ImageUrl(System.String)">
            <summary>
            In this field you can set as Image URL for the button.<para/>
            Tips:<para/>
            - If this field is set, then the type of the button will be automatically set to Image.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify an image for the button.<para/>
            ======== EXAMPLES ===============================<para/>
            icons/delete.gif<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.MarkupTemplate(System.String)">
            <summary>
            In this field you can specify custom markup to wrap or place this button as required<para/>
            Note:<para/>
            You must use [#Button#] keyword to place the button in required position in the markup specified<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to implement custom markup to design a button look-n-feel<para/>
            ======== EXAMPLES ===============================<para/>
            [#Button#]<para/>
            [#Button#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.Style(MSharp.ButtonStyle)">
            <summary>
            In this field you can specify type of appearance for the button.<para/>
            Note:<para/>
            -<para/>
            If the text is set by c# expressions, the type can not be Image.<para/>
            ======== DEFAULT ================================<para/>
            If not set, the system automatically decides which type it should use.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a specific type of button.<para/>
            ======== EXAMPLES ===============================<para/>
            Set to &quot;Link&quot; if you want the button to be a link.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.Tooltip(System.String)">
            <summary>
            In this field you can specify contents which are shown as the tooltip of the button<para/>
            Supports:<para/>
            1. Static Text<para/>
            2. C# Expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display a tooltip for a button<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Add new user&quot;<para/>
            C#:Item.Summary()<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.SeperatorTemplate(System.String)">
            <summary>
            This property is used in junction with the previous property &quot;Repeat Data source&quot;.<para/>
            Contents specified in this property are places in the &quot;SeparatorTemplate&quot; of &quot;Asp.Net Repeater&quot; control.<para/>
            You can specify static or dynamic mark-up contents in this field.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to visually separate the button control to make it more detailed and sophisticated.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.Name(System.String)">
            <summary>
            In this field you specify the Name of the button.<para/>
            Tip:<para/>
            - The name should not begin with keyword &quot;btn&quot; as this is automatically applied<para/>
            - The Name must be given without spaces and in camel casing<para/>
            Default<para/>
            The text specified at the time of creating button.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to rename the button.<para/>
            ======== EXAMPLES ===============================<para/>
            AddNewEmployee<para/>
            ProcessPayment<para/>
            Cancel<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.CssClass(System.String)">
            <summary>
            In this field, You can apply a css class for this button.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Used when an special appearance style is needed for the button.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-button<para/>
            add-button add-user-button<para/>
            c#: (Case != null) ? &quot;selected-button&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.ExtraTagAttributes(System.String)">
            <summary>
            In this field you can specify attributes pre-defined / custom attributes for the buttons<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is rarely used, only when an extra attribute(s) are needed which cannot be specified using other attributes.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            OnClientClick=&quot;return btnCancel_Clicked(this);&quot;<para/>
            Example 2<para/>
            PostBackUrl=&quot;~/Pages/Members/Enter.aspx&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Button.Icon(System.String)">
            <summary>
            In this field you specify an icon for the button.<para/>
            Tip:<para/>
            - Font Awesome is supported.<para/>
            - Select your icon:  browse icons<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the button to look more user-friendly.<para/>
            ======== EXAMPLES ===============================<para/>
            fa-edit<para/>
            fa-edit fa-2x  (Note: for larger icon use fa-3x, fa-4x,...)<para/>
            myIconFile.png  (Note: Picked up from /public/img/icons/myIconFile.png<para/>
            /my/full/path/file.png<para/>
            </summary>
        </member>
        <member name="P:MSharp.Button.Ref">
            <summary>
            Gets a reference to this button that can be used in markup injection in the form of [#BUTTONS(...)#].
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.Markup(System.String)">
            <summary>
            In this field you should enter the HTML body of the content. All HTML and ASP.NET tags are acceptable.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field should be entered in order to show something in the content<para/>
            ======== EXAMPLES ===============================<para/>
            Welcome<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.Footer(System.String)">
            <summary>
            In this field you can specify the footer for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the bottom of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;The End!&quot;<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.CreatePhysicalModule(System.Nullable{System.Boolean})">
            <summary>
            If this field is set to False, a separate module will not be created.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the contents of the module are very simple<para/>
            ======== EXAMPLES ===============================<para/>
            Simple notification module required for temporary message displaying<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.Justification(System.String)">
            <summary>
            In this field you can specify the purpose of creating a generic module. Be descriptive in specifying this attribute.<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.KeepOriginalFormatting(System.Boolean)">
            <summary>
            When set to True, the generated code will not be formatted and will be generated left aligned.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is recommended to not to set it True, because it keeping the original formatting will make it difficult to read an understand<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.Multi_Lingual(System.Nullable{System.Boolean})">
            <summary>
            If set to True, Phrases on static phrases i.e. Label Text, Heading, columns, button texts will be translated by selected language<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable multi-lingual support on a single module. Please not that if the Multi-Lingual option in project settings is set then you do not need to set it explicitly.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.HeaderText(System.String)">
            <summary>
            In this field you can specify heading for the module. All contents are placed inside h2 tag.<para/>
            ======== DEFAULT ================================<para/>
            Inferred from the entity and type of module<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you wan to specify just the heading contents<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Employee Details<para/>
            C# Expression<para/>
            c#:Item.Name + &quot; Details&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.Name(System.String)">
            <summary>
            In this field you should enter the name of the module you want to create. This name should be a unique name for the module you have created.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field for the module.<para/>
            ======== EXAMPLES ===============================<para/>
            Form: User signup<para/>
            List: Content blocks<para/>
            View: User details<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.Header(System.String)">
            <summary>
            The markup to add at the beginning of this module&amp;#39;s content.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the top of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            Simple Markup<para/>
            Simple Heading!<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.NamespaceImports(MSharp.NamespaceImport[])">
            <summary>
            In this field you can choose namespace(s) you need to import in the page backend.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to work with a class frequently and the namespace is not imported by default<para/>
            ======== EXAMPLES ===============================<para/>
            you need to extract web control in the backend file of a list module in order to  manipulate the data<para/>
            System.Web.UI.WebControls<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.IsInUse(System.Nullable{System.Boolean})">
            <summary>
            In this field you can specify if the module is used and should be build or not.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If your module is used in a page directly, it will be built in build actions automatically.<para/>
            If your module is not used in a page directly, but you still want it to be built, you should check this property.<para/>
            ======== EXAMPLES ===============================<para/>
            Menu Modules<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.ControllerInterfaces(System.String)">
            <summary>
            The interfaces that this user control (module) should implement.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is particularly useful when using ICallbackEventHandler interface for AJAX call backs.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;ICallbackEventHandler, IAnotherInterface&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.MarkupWrapper(System.String)">
            <summary>
            In this field you can specify a wrapper template for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When want to customize the appearance of the module by adding extra markup around it.<para/>
            ======== EXAMPLES ===============================<para/>
            [#MODULE#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericModule.RootCssClass(System.String)">
            <summary>
            In this field you can enter the css class of the module.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply some css to the module.<para/>
            ======== EXAMPLES ===============================<para/>
            twtwo-column-form<para/>
            compact-view user-order-view<para/>
            c#: (Case != null) ? &quot;progress-list&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MasterPage.BaseControllerClass(System.String)">
            <summary>
            In this attribute you can specify a base class for the master page code behind class.<para/>
            ======== DEFAULT ================================<para/>
            MSharp.Framework.UI.MasterPage<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to implement custom functionality in the page class.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to implement your own logic for modal window handling or message box handling<para/>
            </summary>
        </member>
        <member name="M:MSharp.MasterPage.PageModuleContainerCss(System.String)">
            <summary>
            In this field, you can apply css classes for container element of a module.<para/>
            div element is generated with the specified class(es) and modules are placed inside this div element on each page using this master page<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            test-item<para/>
            short-item test-item<para/>
            </summary>
        </member>
        <member name="M:MSharp.MasterPage.Modal(System.Boolean)">
            <summary>
            If set to True, the pager of this master page will be generated as a modal window above the normal page when redirected to.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Modal master pages make application sophisticated and more robust and should be used to manipulate small amount of information i.e. input or output.<para/>
            Modal pages can also be used to display contents blocks or interactive messages.<para/>
            ======== EXAMPLES ===============================<para/>
            You can display a login page using modal master page<para/>
            You can display user&apos;s profile information in a modal page<para/>
            </summary>
        </member>
        <member name="M:MSharp.MasterPage.Name(System.String)">
            <summary>
            In this field you can specify the name of the template you want to create<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory field which is specified at the time of creating a master page<para/>
            ======== EXAMPLES ===============================<para/>
            A modal type master page for front end<para/>
            Fronend.Modal<para/>
            A master page main contents<para/>
            FrontendMain<para/>
            </summary>
        </member>
        <member name="M:MSharp.MasterPage.VirtualPath(System.String)">
            <summary>
            In this field you can specify the virtual path for a master page.<para/>
            ======== DEFAULT ================================<para/>
            ~/App_Templates/<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is mandatory and is populated based on default virtual path and master page name.<para/>
            Although it is advised that you shouldn&apos;t change the virtual path but can be used when the master page is place in a custom folder<para/>
            ======== EXAMPLES ===============================<para/>
            ~/App_Templates/ReportingTemplates/DailyRerpots<para/>
            ~/App_Templates/ReportingTemplates/Reports.Financial<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.CustomAttributes(System.String)">
            <summary>
            Menu items are generated as server side hyperlinks link buttons by default. you can set special attributes for the menu item.<para/>
            Notes:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to add a custom attribute to the button markup.<para/>
            ======== EXAMPLES ===============================<para/>
            OnClientClick = &quot;return PerformAnimation();&quot;<para/>
            DataTag = &quot; &quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.Text(System.String)">
            <summary>
            For dynamic text use &quot;c#:&quot; syntax. Consider using Server.HtmlEncode() for menu text (needs to be valid xml).<para/>
            Note:<para/>
            - Use &quot;item&quot; when &quot;Generate Links&quot; is not selected and &quot;ITEM&quot; when it is selected<para/>
            ======== DEFAULT ================================<para/>
            This field is mandatory for Dynamic menu items.<para/>
            For all other menu items, the name is inferred from the Text / target page name.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to set a name for Dynamic menu items.<para/>
            ======== EXAMPLES ===============================<para/>
            C#:Item.Name<para/>
            Profile<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.Parent(MSharp.MenuItem)">
            <summary>
            In this field you can select a menu Item which is the parent of this item. (this item will be shown as the child of the parent item).<para/>
            Note : Nothing if the item is root item.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display nested menus or when you want to group related menus under one main menu option<para/>
            ======== EXAMPLES ===============================<para/>
            Categories to sub categories<para/>
            Chapter and tutorials<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.CssClass(System.String)">
            <summary>
            In this field, you can set a css class for this item.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the item.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-item<para/>
            add-item add-user-item<para/>
            c#: (Case != null) ? &quot;selected-item&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.ImageUrl(System.String)">
            <summary>
            In this field you can set as Image URL for the menu item.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify an image for the menu item.<para/>
            ======== EXAMPLES ===============================<para/>
            icons/delete.gif<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.DataSource(System.String)">
            <summary>
            The C# code that evaluates to an IEnumerable .<para/>
            Note:<para/>
            - If this field is completed, then the item will be supposed as a dynamic menu item. otherwise it is a static menu item. Usage: Supports: 1. c# direct code. Example: 1.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to have a dynamic list of menu items based on the provided DataSource.<para/>
            ======== EXAMPLES ===============================<para/>
            Service.Categories<para/>
            Database.GetList ()<para/>
            Although this is valid, if you want to get all instances of a type, you should set the DataSourceType instead of DataSource.<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.DataSourceType(System.String)">
            <summary>
            In this field you can introduce the entity of the dynamic menu items you want to set to the menu item.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you are creating a dynamic menu item.<para/>
            ======== EXAMPLES ===============================<para/>
            Setting the DataSourceType to ProductCategory will list all instances of ProductCategory as menu items.<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.Key(System.String)">
            <summary>
            A unique key expression for this menu item.<para/>
            Notes:<para/>
            1. This key will be used to highlight the &quot;selected item&quot; of this menu by adding a css class of &quot;selected&quot; if the &quot;currently requested page or arguments&quot; match with this key.<para/>
            2. This expression or static key should match with the expression written in &quot;Selected item key&quot; of the menu itself.<para/>
            ======== DEFAULT ================================<para/>
            The default value will be the c# encoded text of the menu item (such as &quot;AboutUs&quot; for a link saying &quot;About us&quot;).<para/>
            For dynamic items with a data source, it will be the ID of the item.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When the default generated keys do not guarantee uniqueness of keys across all menu items, you will need to use this to ensure all generated menu items have unique Keys at runtime.<para/>
            For example use it when you have:<para/>
            - Multiple dynamic menu items on the same data source objects<para/>
            - Multiple static links to one page with different Query String parameters.<para/>
            ======== EXAMPLES ===============================<para/>
            ImageGallery<para/>
            A fixed constant key is used in this example<para/>
            c#:ITEM.ID<para/>
            The upper case &quot;ITEM&quot; keyword must be used when the menu is in &quot;Generate Links&quot; mode.<para/>
            c#:item.ID<para/>
            The lower case &quot;item&quot; keyword must be used when the menu is NOT in &quot;Generate Links&quot; mode.<para/>
            c#:ITEM.Name<para/>
            c#:item.Key + &quot;CustomText&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.Name(System.String)">
            <summary>
            In this field you can propose a name for the menu item.<para/>
            ======== DEFAULT ================================<para/>
            This field is mandatory for Dynamic menu items.<para/>
            For all other menu items, the name is inferred from the Text / target page name.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to set a name for Dynamic menu items.<para/>
            ======== EXAMPLES ===============================<para/>
            ImageGallery<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.ItemTemplate(System.String)">
            <summary>
            In this field you can specify the template for this menu item.<para/>
            You can use [#ITEM#] in a place you want the menu item to be put.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom template for this menu item.<para/>
            ======== EXAMPLES ===============================<para/>
            [#ITEM#]<para/>
            [#ITEM#]<para/>
            &quot; /&gt;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.HoverImageUrl(System.String)">
            <summary>
            In this field you can set as Hover Image URL for the menu item.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a hover image for the menu item.<para/>
            ======== EXAMPLES ===============================<para/>
            Buttons/categories-hover.gif<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuItem.Icon(System.String)">
            <summary>
            In this field you specify an icon for the menu item.<para/>
            Tip:<para/>
            - Font Awesome is supported.<para/>
            - Select your icon:  browse icons<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the menu item to look more user-friendly.<para/>
            ======== EXAMPLES ===============================<para/>
            fa-edit<para/>
            fa-edit fa-2x  (Note: for larger icon use fa-3x, fa-4x,...)<para/>
            myIconFile.png  (Note: Picked up from /public/img/icons/myIconFile.png<para/>
            /my/full/path/file.png<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.ExtraTagAttributes(System.String)">
            <summary>
            You can set special attributes in this field. M# generates an asp.net menu control with all the attributes specified here<para/>
            Tips:<para/>
            - Use this only for values that cannot be set through the M# interface.<para/>
            - Set &quot;Generate Links&quot; attribute to false in order to use this attribute<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to add a custom attribute to asp.net menu control.<para/>
            ======== EXAMPLES ===============================<para/>
            OnMenuItemClick=&quot;menu_MenuItemClick&quot;<para/>
            DataSource=&quot;App.Categories.GetActiveCategories()&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.Footer(System.String)">
            <summary>
            In this field you can specify the footer for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the bottom of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;The End!&quot;<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.KeepOriginalFormatting(System.Boolean)">
            <summary>
            When set to True, the generated code will not be formatted and will be generated left aligned.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is recommended to not to set it True, because it keeping the original formatting will make it difficult to read an understand<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.GenerateLinks(System.Boolean)">
            <summary>
            If set to False, an asp.net Menu control will be generated with menu items.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need use dynamic asp.net menu control with custom DataSource and menu item binding<para/>
            ======== EXAMPLES ===============================<para/>
            Rendering hierarchal menu using XML DataSourc<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.Multi_Lingual(System.Nullable{System.Boolean})">
            <summary>
            If set to True, Phrases on static phrases i.e. Label Text, Heading, columns, button texts will be translated by selected language<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable multi-lingual support on a single module. Please not that if the Multi-Lingual option in project settings is set then you do not need to set it explicitly.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.ItemTemplate(System.String)">
            <summary>
            In this field you can specify the template for all menu items of this menu.<para/>
            Tips<para/>
            - Use &quot;[#ITEM#]&quot; as a placeholder for the generated link.<para/>
            - Use this only in &quot;Generate Links&quot; mode.<para/>
            ======== DEFAULT ================================<para/>
            By default, the Item template is  [#ITEM#]<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify the template for all menu items of this menu.<para/>
            ======== EXAMPLES ===============================<para/>
            [#ITEM#]<para/>
            [#ITEM#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.HeaderText(System.String)">
            <summary>
            In this field you can specify heading for the module. All contents are placed inside h2 tag.<para/>
            ======== DEFAULT ================================<para/>
            Inferred from the entity and type of module<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you wan to specify just the heading contents<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Employee Details<para/>
            C# Expression<para/>
            c#:Item.Name + &quot; Details&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.ItemLayout(System.String)">
            <summary>
            In this attributer you specify customize the menu item makeup<para/>
            Tips<para/>
            - Use &quot;[#Link#]&quot; as a placeholder for the generated link.<para/>
            - Use this only in &quot;Generate Links&quot; mode.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need style the menu items for special appeared or need to display custom contents around the menu options<para/>
            ======== EXAMPLES ===============================<para/>
            [#Link#]<para/>
            My Custom Contents<para/>
            [#Link#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.SpecialSelectedKeyRule(System.String)">
            <summary>
            A C# statement that returns a string value specifying the key of the selected item based on a special criteria .<para/>
            That value will be matched with the &quot;Key&quot; attribute of every menu item and will highlight the matched item as selected (by adding css class of &quot;selected&quot; to that item).<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If you have any dynamic menu items in this menu, for properly highlighting the correct item, a correct expression should be specified here.<para/>
            ======== EXAMPLES ===============================<para/>
            if (Request.Has(&quot;.category&quot;))<para/>
            return Request[&quot;.category&quot;];<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.Name(System.String)">
            <summary>
            In this field you should enter the name of the module you want to create. This name should be a unique name for the module you have created.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field for the module.<para/>
            ======== EXAMPLES ===============================<para/>
            Form: User signup<para/>
            List: Content blocks<para/>
            View: User details<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.Header(System.String)">
            <summary>
            The markup to add at the beginning of this module&amp;#39;s content.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the top of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            Simple Markup<para/>
            Simple Heading!<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.NamespaceImports(MSharp.NamespaceImport[])">
            <summary>
            In this field you can choose namespace(s) you need to import in the page backend.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to work with a class frequently and the namespace is not imported by default<para/>
            ======== EXAMPLES ===============================<para/>
            you need to extract web control in the backend file of a list module in order to  manipulate the data<para/>
            System.Web.UI.WebControls<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.IsInUse(System.Nullable{System.Boolean})">
            <summary>
            In this field you can specify if the module is used and should be build or not.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If your module is used in a page directly, it will be built in build actions automatically.<para/>
            If your module is not used in a page directly, but you still want it to be built, you should check this property.<para/>
            ======== EXAMPLES ===============================<para/>
            Menu Modules<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.ControllerInterfaces(System.String)">
            <summary>
            The interfaces that this user control (module) should implement.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is particularly useful when using ICallbackEventHandler interface for AJAX call backs.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;ICallbackEventHandler, IAnotherInterface&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.MarkupWrapper(System.String)">
            <summary>
            In this field you can specify a wrapper template for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When want to customize the appearance of the module by adding extra markup around it.<para/>
            ======== EXAMPLES ===============================<para/>
            [#MODULE#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.RootCssClass(System.String)">
            <summary>
            In this field you can enter the css class of the module.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply some css to the module.<para/>
            ======== EXAMPLES ===============================<para/>
            twtwo-column-form<para/>
            compact-view user-order-view<para/>
            c#: (Case != null) ? &quot;progress-list&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.Item``1(System.String)">
            <summary>
            Adds a menu item that navigates to the specified page.
            </summary>
        </member>
        <member name="M:MSharp.MenuModule.Item``1">
            <summary>
            Adds a menu item that navigates to the specified page.
            The text of the menu item will be the same as the target page.
            </summary>
        </member>
        <member name="M:MSharp.Module.Footer(System.String)">
            <summary>
            In this field you can specify the footer for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the bottom of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;The End!&quot;<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.KeepOriginalFormatting(System.Boolean)">
            <summary>
            When set to True, the generated code will not be formatted and will be generated left aligned.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is recommended to not to set it True, because it keeping the original formatting will make it difficult to read an understand<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.Multi_Lingual(System.Nullable{System.Boolean})">
            <summary>
            If set to True, Phrases on static phrases i.e. Label Text, Heading, columns, button texts will be translated by selected language<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable multi-lingual support on a single module. Please not that if the Multi-Lingual option in project settings is set then you do not need to set it explicitly.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.HeaderText(System.String)">
            <summary>
            In this field you can specify heading for the module. All contents are placed inside h2 tag.<para/>
            ======== DEFAULT ================================<para/>
            Inferred from the entity and type of module<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you wan to specify just the heading contents<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Employee Details<para/>
            C# Expression<para/>
            c#:Item.Name + &quot; Details&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.Name(System.String)">
            <summary>
            In this field you should enter the name of the module you want to create. This name should be a unique name for the module you have created.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field for the module.<para/>
            ======== EXAMPLES ===============================<para/>
            Form: User signup<para/>
            List: Content blocks<para/>
            View: User details<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.Header(System.String)">
            <summary>
            The markup to add at the beginning of this module&amp;#39;s content.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the top of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            Simple Markup<para/>
            Simple Heading!<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.NamespaceImports(MSharp.NamespaceImport[])">
            <summary>
            In this field you can choose namespace(s) you need to import in the page backend.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to work with a class frequently and the namespace is not imported by default<para/>
            ======== EXAMPLES ===============================<para/>
            you need to extract web control in the backend file of a list module in order to  manipulate the data<para/>
            System.Web.UI.WebControls<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.IsInUse(System.Nullable{System.Boolean})">
            <summary>
            In this field you can specify if the module is used and should be build or not.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If your module is used in a page directly, it will be built in build actions automatically.<para/>
            If your module is not used in a page directly, but you still want it to be built, you should check this property.<para/>
            ======== EXAMPLES ===============================<para/>
            Menu Modules<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.ControllerInterfaces(System.String)">
            <summary>
            The interfaces that this user control (module) should implement.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is particularly useful when using ICallbackEventHandler interface for AJAX call backs.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;ICallbackEventHandler, IAnotherInterface&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.MarkupWrapper(System.String)">
            <summary>
            In this field you can specify a wrapper template for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When want to customize the appearance of the module by adding extra markup around it.<para/>
            ======== EXAMPLES ===============================<para/>
            [#MODULE#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.RootCssClass(System.String)">
            <summary>
            In this field you can enter the css class of the module.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply some css to the module.<para/>
            ======== EXAMPLES ===============================<para/>
            twtwo-column-form<para/>
            compact-view user-order-view<para/>
            c#: (Case != null) ? &quot;progress-list&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.Module.ViewModelProperty``1(System.String,System.String,System.Int32)">
            <summary>
            Creates a new property to be generated for this module's code.
            </summary> 
        </member>
        <member name="M:MSharp.Module.ViewModelProperty(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new property to be generated for this module's code.
            </summary> 
        </member>
        <member name="M:MSharp.ModuleBox.ContainerCssClass(System.String)">
            <summary>
            In this field, you can enter a custom css class for the wrapper of this group.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to wrap the group for a special appearance style.<para/>
            ======== EXAMPLES ===============================<para/>
            user-box-wrapper<para/>
            left-aside user-box-wrapper<para/>
            c#: (Case != null) ? &quot;first-box&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleBox.Name(System.String)">
            <summary>
            In this field you should provide a name for this group.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field for the group.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Top left box&quot;<para/>
            c#: &quot;Something &quot; + Item.Something<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleBox.Text(System.String)">
            <summary>
            In this field you should enter the display text of the group i.e. a heading for the box group.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            To set the display text of the group.<para/>
            ======== EXAMPLES ===============================<para/>
            Add user<para/>
            c#: string.Format(&quot;Add {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleBox.CssClass(System.String)">
            <summary>
            In this field, you can set a css class for this group.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== DEFAULT ================================<para/>
            By default the css class of the group is decided based on the Template property.<para/>
            Examples:<para/>
            - If the Template is set to &quot;Box with left icon&quot;, a css class of &quot;box-with-left-icon&quot; is applied.<para/>
            - If the Template is set to &quot;Properties box&quot;, a css class of &quot;properties-box&quot; is applied.<para/>
            - If the Template is set to &quot;Ajax Tab Panel&quot;, no css class is applied.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the group.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-group<para/>
            add-group add-user-group<para/>
            c#: (Case != null) ? &quot;selected-group&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleBox.Template(MSharp.BoxTemplate)">
            <summary>
            In this field you have a wide range of choices for the layout of the group.<para/>
            ======== DEFAULT ================================<para/>
            By default the template of the group is set to the &quot;Just H3 Header&quot; template.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field for the group.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Collapsible panel&quot;<para/>
            &quot;Simple wrapper (Span)&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleBox.ContainerLayout(System.String)">
            <summary>
            A piece of html containing [#GROUP#] that specifies the layout of the group.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify a custom layout for the group.<para/>
            ======== EXAMPLES ===============================<para/>
            Title<para/>
            [#GROUP#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleBox.NoText">
            <summary>
            Sets the text of this element to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.ModuleButton.RepeatDataSource(System.String)">
            <summary>
            This is a C# expression field. In this field you can specify a collection type data source.<para/>
            If the data source is specified, M# generates an asp.net &quot;Repeater Control&quot; with the specified &quot;DataSource&quot; and placed the button as the &quot;ItemTemplate&quot; of the &quot;Repeater Control&quot;<para/>
            Tip:<para/>
            - You can access each public property / method of each element of the data source sequence in other attributes of the same button e.g. Image URL, Text etc.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This attribute is very useful when you want to render multiple button based on a “DataSource” e.g. List of users to link their profiles or Products of a category<para/>
            ======== EXAMPLES ===============================<para/>
            You want to render buttons for all the active users with FullName as the button text<para/>
            Repeat data source: Item.GetActiveEmployees()<para/>
            Text: C#: (Container.DataItem as Employee).FullName<para/>
            You want to render buttons for a category products with thumbnail images and link to the View Page<para/>
            Repeat data source: Item.Products<para/>
            Image URL: C#: (Container.DataItem as Product).Photo.Url()<para/>
            Query String: C#: (Container.DataItem as Product).ID<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.Box(MSharp.ModuleBox)">
            <summary>
            In this field you can choose a box for the button. The button will be placed inside the box<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to fulfil special appearance style or functionality requirement<para/>
            ======== EXAMPLES ===============================<para/>
            You have two boxes, One to edit Personal detail and other to edit Contact details you can have two have button to be placed in each box<para/>
            You have find by postcode textbox and want to place the Find button and textbox control in one box.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.Text(System.String)">
            <summary>
            You should enter the display text of the button in this field.<para/>
            Supported formats:<para/>
            - Plain text<para/>
            - c# expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            To set the display text of the button.<para/>
            ======== EXAMPLES ===============================<para/>
            Add user<para/>
            c#: string.Format(&quot;Add {0}th user&quot;, App.Context.Users.Count() + 1)<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.CausesValidation(System.Boolean)">
            <summary>
            If set to True, the Validation will be performed on the module when the button is clicked.<para/>
            ======== DEFAULT ================================<para/>
            True (Except Cancel Button which is generated at the time of creating a module)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to perform validation on button click.<para/>
            ======== EXAMPLES ===============================<para/>
            For cancel button which you don&apos;t want to validate the page and just leave it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.IsDefault(System.Nullable{System.Boolean})">
            <summary>
            If Set to True, the button is made the default button on the page which is triggered when the return key is pressed.<para/>
            Note:<para/>
            You can only have one button as the default button in a module.<para/>
            When a button is set as Default button using this attribute then this attribute is set as False for all the other buttons<para/>
            ======== DEFAULT ================================<para/>
            False (Except Save button which is generated at the time of creating a Form Module )<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set the button as the default focused button.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.ConfirmQuestion(System.String)">
            <summary>
            If you enter a text in this field, the system will show a confirmation message to the end user when they click this button.<para/>
            If the user then selects No, the operation will be terminated and the button workflow will not run.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to confirm something when users clicks the button.<para/>
            It&amp;#39;s used mostly in Delete operations or any other sensitive action.<para/>
            ======== EXAMPLES ===============================<para/>
            Are you sure?<para/>
            c#: &quot;Are you sure you want to delete &quot; + Item + &quot;?&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.ImageUrl(System.String)">
            <summary>
            In this field you can set as Image URL for the button.<para/>
            Tips:<para/>
            - If this field is set, then the type of the button will be automatically set to Image.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to specify an image for the button.<para/>
            ======== EXAMPLES ===============================<para/>
            icons/delete.gif<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.MarkupTemplate(System.String)">
            <summary>
            In this field you can specify custom markup to wrap or place this button as required<para/>
            Note:<para/>
            You must use [#Button#] keyword to place the button in required position in the markup specified<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to implement custom markup to design a button look-n-feel<para/>
            ======== EXAMPLES ===============================<para/>
            [#Button#]<para/>
            [#Button#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.Style(MSharp.ButtonStyle)">
            <summary>
            In this field you can specify type of appearance for the button.<para/>
            Note:<para/>
            -<para/>
            If the text is set by c# expressions, the type can not be Image.<para/>
            ======== DEFAULT ================================<para/>
            If not set, the system automatically decides which type it should use.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a specific type of button.<para/>
            ======== EXAMPLES ===============================<para/>
            Set to &quot;Link&quot; if you want the button to be a link.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.Tooltip(System.String)">
            <summary>
            In this field you can specify contents which are shown as the tooltip of the button<para/>
            Supports:<para/>
            1. Static Text<para/>
            2. C# Expression<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display a tooltip for a button<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Add new user&quot;<para/>
            C#:Item.Summary()<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.SeperatorTemplate(System.String)">
            <summary>
            This property is used in junction with the previous property &quot;Repeat Data source&quot;.<para/>
            Contents specified in this property are places in the &quot;SeparatorTemplate&quot; of &quot;Asp.Net Repeater&quot; control.<para/>
            You can specify static or dynamic mark-up contents in this field.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to visually separate the button control to make it more detailed and sophisticated.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.Name(System.String)">
            <summary>
            In this field you specify the Name of the button.<para/>
            Tip:<para/>
            - The name should not begin with keyword &quot;btn&quot; as this is automatically applied<para/>
            - The Name must be given without spaces and in camel casing<para/>
            Default<para/>
            The text specified at the time of creating button.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to rename the button.<para/>
            ======== EXAMPLES ===============================<para/>
            AddNewEmployee<para/>
            ProcessPayment<para/>
            Cancel<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.CssClass(System.String)">
            <summary>
            In this field, You can apply a css class for this button.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Used when an special appearance style is needed for the button.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-button<para/>
            add-button add-user-button<para/>
            c#: (Case != null) ? &quot;selected-button&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.ExtraTagAttributes(System.String)">
            <summary>
            In this field you can specify attributes pre-defined / custom attributes for the buttons<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is rarely used, only when an extra attribute(s) are needed which cannot be specified using other attributes.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            OnClientClick=&quot;return btnCancel_Clicked(this);&quot;<para/>
            Example 2<para/>
            PostBackUrl=&quot;~/Pages/Members/Enter.aspx&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleButton.Icon(System.String)">
            <summary>
            In this field you specify an icon for the button.<para/>
            Tip:<para/>
            - Font Awesome is supported.<para/>
            - Select your icon:  browse icons<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the button to look more user-friendly.<para/>
            ======== EXAMPLES ===============================<para/>
            fa-edit<para/>
            fa-edit fa-2x  (Note: for larger icon use fa-3x, fa-4x,...)<para/>
            myIconFile.png  (Note: Picked up from /public/img/icons/myIconFile.png<para/>
            /my/full/path/file.png<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleCodeExtension.Title(System.String)">
            <summary>
            In this field you can type a description of the code you are going to write.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field<para/>
            ======== EXAMPLES ===============================<para/>
            Find and Replace Address<para/>
            Toggle Controls<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleCodeExtension.Event(MSharp.UIModuleEvent)">
            <summary>
            In this field you should specify the scope of the code you are writing.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Class code: if you are writing a method or property etc.<para/>
            CSS style : if you are writing a css style code.<para/>
            Initialization: If you want to write a code which will be added to OnInit method.<para/>
            JavaScript: If you want to write a JavaScript code.<para/>
            Load : If you want the code to be added to OnLoad method.<para/>
            Prerender: If you want the code to be added to OnPreRender<para/>
            ======== EXAMPLES ===============================<para/>
            You want to initialize control on load<para/>
            You want to write some class code to perform server side functionality<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleCodeExtension.Code(System.String)">
            <summary>
            In this field you should write your custom code. Depending the event you have selected for this custom code, the content of the code should be C#, JS, or CSS code.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to add a custom code to the module.<para/>
            ======== EXAMPLES ===============================<para/>
            public int Index { get { return 0; } }<para/>
            function Funa() {<para/>
            alert(&amp;#39;Hello!&amp;#39;);<para/>
            }<para/>
            .module-style { width:100% }<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleCodeExtension.Comments(System.String)">
            <summary>
            You may want to leave comments about the code you have written.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            You should use this field to leave comments about complex code functionality.<para/>
            ======== EXAMPLES ===============================<para/>
            Add css class to the selected row.<para/>
            Extracting control from a list row<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleCodeExtension.Disabled(System.Boolean)">
            <summary>
            If set to True, The code will be disabled.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to use your code in the module anymore but you don&apos;t like to remove it, you can simply check this field.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleCodeExtension.Criteria(System.String)">
            <summary>
            In this field you can specify the criteria in which you want the code to be run.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the code to be run only if one or more criteria are met.<para/>
            ======== EXAMPLES ===============================<para/>
            App.Context.User == null<para/>
            App.Context.User != null &amp;&amp; App.Context.User.IsInRole(&quot;Admin&quot;)<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleProperty.Name(System.String)">
            <summary>
            In this field you specify the name of the property. The property is accessed by this name in module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory property<para/>
            ======== EXAMPLES ===============================<para/>
            Products<para/>
            EmployeeAddress<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleProperty.Getter(System.String)">
            <summary>
            In this field you can specify the get accessor of a property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to have a read-only property<para/>
            ======== EXAMPLES ===============================<para/>
            You need to get the instance of an entity based on id which you will edit on the form<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleProperty.Setter(System.String)">
            <summary>
            In this attribute you can specify the get accessor of the property<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to set the property value which is return in get accessor or you have a private object you need to update from another module when it referenced.<para/>
            ======== EXAMPLES ===============================<para/>
            You have referenced a module of which you need to manipulate the property in set accessor<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleProperty.EntityType(System.String)">
            <summary>
            In this field you can select one of the entity types defined in the Modal. This replaces the Custom Type<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to have a property on an entity type defined in the Modal<para/>
            ======== EXAMPLES ===============================<para/>
            App.Employee<para/>
            IEnumerable<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleProperty.CustomType(System.String)">
            <summary>
            In this field you can specify the custom type of the property you want to assign .e.g. int, string, bool etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to create a property other than the entity types available in the Model<para/>
            ======== EXAMPLES ===============================<para/>
            You need a property of type bool<para/>
            bool<para/>
            you need a property of type string<para/>
            string<para/>
            you need a property of a custom type from a different namespace type string<para/>
            MyAPI.CustomType<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleProperty.FromRequestParam(System.String)">
            <summary>
            In this field you can specify a QueryString key from which the property will be calculated.<para/>
            Note:<para/>
            - For a property of complex type the the instance is get from database based on the QueryString supplied<para/>
            - For a property of custom type the the value is converted and calculated from the QueryString supplied<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            when you need to define the get accessor of the property from QueryString<para/>
            ======== EXAMPLES ===============================<para/>
            You have a property of a complex type App.Employee and you specify a QueryString &quot;id&quot;<para/>
            Request.Get (&quot;id&quot;);<para/>
            You have a a property of custom type int and you specified QueryString &quot;qty&quot;<para/>
            Request[&quot;qty&quot;].To ()<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleProperty.Disabled(System.Boolean)">
            <summary>
            If set to True, The code will be disabled.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to use your code in the module anymore but you don&apos;t like to remove it, you can simply check this field.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ModuleProperty.RetainInPost(System.Boolean)">
            <summary>
            If set to True, a hidden field will be generated to retain the value of this property in post (ajax) requests.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you set the value of this property in the container page (or module) later on when the module is posted back (e.g. Save button) that value gets lost.<para/>
            In that case if you set this to true, then the value will be retained in a hidden field on the client.<para/>
            ======== BEWARE =================================<para/>
            Values retained in the browser are available to the user and can be manually checked.<para/>
            Be careful if this can impose a security threat in your scenario.<para/>
            </summary>
        </member>
        <member name="M:MSharp.PageModule.ParameterSettings(System.String)">
            <summary>
            In this field you can specify the the value properties of the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to set custom attributes pr have public properties in the module which you want to initialize through tag properties / attributes.<para/>
            ======== EXAMPLES ===============================<para/>
            ValidationGroup = &quot;Login&quot;<para/>
            ShowDescription = &quot;true&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.PageSetting.Value(System.String)">
            <summary>
            In this field you can specify a value for the page settings key in plain text. The value can be anything based on the page settings e.g. A Module Name or simple string like &quot;true&quot;<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field and must be supplied when a page setting is applied<para/>
            ======== EXAMPLES ===============================<para/>
            A menu module name for page setting LeftMenu<para/>
            CategoryLeftMenu<para/>
            a simple string value for page settings ShowMenu<para/>
            &quot;false&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.PageSettingKey.Name(System.String)">
            <summary>
            In this field you can specify a string type value to define the name of the page setting key which is then used on the pages<para/>
            Tips:<para/>
            - Use descriptive and short names<para/>
            - Use Camel casing<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to define a page setting key to be used on pages for required functionality<para/>
            ======== EXAMPLES ===============================<para/>
            LeftMenu<para/>
            TopMenu<para/>
            SingleColumn<para/>
            </summary>
        </member>
        <member name="M:MSharp.ProjectRole.Name(System.String)">
            <summary>
            In this field you can specify a string value for name of the role. This name appears in the dropdown List of roles when you need to apply the role based security in the project<para/>
            Tips:<para/>
            - For the entity, you have defined this Role, must have implemented IUser interface (User entity created by default implements the IUser interface)<para/>
            - You must override the GetRoles method to return the name of the role you specified here in order<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply role based security in project<para/>
            ======== EXAMPLES ===============================<para/>
            Member<para/>
            Administrator<para/>
            Employee<para/>
            Customer<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.ExcelTemplate(System.String)">
            <summary>
            This field only works on List Module Element<para/>
            Specifies an alternative output format when this field is exported to Excel.<para/>
            By default every field is exported to Excel as it is displayed on the screen. This field allows you to use an alternative format for the Excel file.<para/>
            ======== DEFAULT ================================<para/>
            By default the Excel format of a field is the same as the format of the field itself.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you one to specify a different format string for the field when it&amp;#39;s formatted to Excel.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;{0:d}&quot;.FormatWith(Item.CreatedDate)<para/>
            Using a custom date format<para/>
            &quot;Unexportable&quot;<para/>
            A literal string<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.HeaderTemplate(System.String)">
            <summary>
            This attribute works only on  List Module Element<para/>
            The markup to appear in the header template of the element in the list.<para/>
            List elements including button and custom elements are placed inside   tag of the grid view control.<para/>
            Markup / Template specified in this field  will be places in   of the respective   tag<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to add a custom markup for the footer of the element in the list.<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            ======== HEADING ================================<para/>
            C# Expression<para/>
            [*Name*]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.DisplayMode(MSharp.DisplayMode)">
            <summary>
            This field works only in List Module<para/>
            This property sets the visibility options of a column in a list module. If at least one column in a list has a display mode value other than default, then<para/>
            it would become possible for the users to select the columns<para/>
            they would like to see in the list.<para/>
            There are four possible options for this attribute:<para/>
            1. Always: means this column must be always visible and users can not hide it<para/>
            2. Default: the default behaviour means it will be visible, but users can hide it<para/>
            3. Selectable: means this column will be initially hidden, but users can make it visible<para/>
            4. Hidden: means this column will be hidden and users will not be able to make it visible.<para/>
            ======== DEFAULT ================================<para/>
            &quot;Default&quot; means it will be visible, but users can hide/unhide it.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If you set the Display mode of one single columns, you will change the behaviour of the whole module.<para/>
            Use this field when you have too many columns in a list view and want to make the visibility of some of the columns optional.<para/>
            ======== EXAMPLES ===============================<para/>
            Always<para/>
            Selectable<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.LabelText(System.String)">
            <summary>
            In this field you can specify the label text for this element.<para/>
            Note:<para/>
            - If you are manually setting this field, The system will not automatically add &quot;:&quot; to the end of the label.<para/>
            - if you don&apos;t want to display a label then use [#EMPTY#] keyword<para/>
            ======== DEFAULT ================================<para/>
            This is a mandatory field for the elements.<para/>
            The label is set to the &quot;Title&quot; of the property by default.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to set a custom label for the element.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;Email Address&quot;<para/>
            c#: string.Format(&quot;Email address for {0}&quot; + Item.Name)<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.IsSortable(System.Boolean)">
            <summary>
            This field works only on List Module element<para/>
            This field specifies if this field in the list is going to be sortable or not.<para/>
            ======== DEFAULT ================================<para/>
            By default, all the data columns are sortable in the list.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            For custom columns, or columns where being sortable does not make sense. For example columns that contain a button.<para/>
            ======== EXAMPLES ===============================<para/>
            False<para/>
            Means this column should not be sortable<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.FooterFormula(MSharp.AggregateFormula)">
            <summary>
            This field only Works on List Module Element<para/>
            You can use this attribute to specify a formula to be displayed for a column at the footer row of a list.<para/>
            The possible formulas are:<para/>
            - Average<para/>
            - Sum<para/>
            - Max<para/>
            - Min<para/>
            - Count<para/>
            Note: You can use this in combination with FooterDisplayFormat.<para/>
            ======== DEFAULT ================================<para/>
            By default the FooterFormula is blank, which means no value will be displayed as the footer.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this value to specify a formula for the footers.<para/>
            ======== EXAMPLES ===============================<para/>
            Average<para/>
            Displays the average of the values<para/>
            Count<para/>
            Display the total number of the values<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.DisplayFormat(System.String)">
            <summary>
            You can specify the display format which you want to use for displaying the value of this field here. This field is useful when you want to display a Numerical, or DateTime value in a certain format. The display format string must use  Composite Formating  and be<para/>
            compatible with format strings you would use in  String.Format Method .<para/>
            ======== DEFAULT ================================<para/>
            The default value is normally {0} which means no formatting.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to display the value of a field in a format other than standard format.<para/>
            ======== EXAMPLES ===============================<para/>
            {0:0,0.00}<para/>
            Displays 1,234.57<para/>
            {0:dddd dd MMMM}<para/>
            Displays Friday 29 August<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.DisplayExpression(System.String)">
            <summary>
            The html (could be dynamic) to display the item in this element.<para/>
            Note:<para/>
            - If left empty the appropriate field will be added.<para/>
            Supports:<para/>
            1. HTML tags<para/>
            2. Server tags<para/>
            ======== DEFAULT ================================<para/>
            The default value is &quot;blank&quot; which means the .ToString() value of the field will be displayed.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to use an alternative control for a field, or create a complex markup for a field.<para/>
            ======== EXAMPLES ===============================<para/>
            Displays the value of the &quot;Name&quot; field.<para/>
            [*Name*]<para/>
            Displays the current time and date instead of the value of the element.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.EmptyMarkup(System.String)">
            <summary>
            Use this field to specify what should be displayed when<para/>
            the value for this field is empty. This is especially useful for highlighting missing data in a View or List module.<para/>
            ======== DEFAULT ================================<para/>
            By default, the missing values will be displayed as blank.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want some expression to be displayed when the value of a field is empty.<para/>
            ======== EXAMPLES ===============================<para/>
            N/A<para/>
            A literal string<para/>
            C#: DateTime.Now.ToString()<para/>
            A C# expression<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.SeperatorTemplate(System.String)">
            <summary>
            This field only works on list Module Element when the &quot;Render mode&quot; is set to List<para/>
            This is field you can specify html markup to be displayed as the separator of list items on UI<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply special appended styles<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.SortKey(System.String)">
            <summary>
            This field only works on List Module Element<para/>
            In this attribute you can specify a sort key for the list element header.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to enable sorting or want to apply same key for other elements or want to make it unique<para/>
            ======== EXAMPLES ===============================<para/>
            MaximumRIO<para/>
            Email<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.NeedsMerging(System.Nullable{System.Boolean})">
            <summary>
            This field only works on List Module Element<para/>
            If set to True, the element column will be merged in the previous column and both elements are shown in one heading<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to display two elements in one column of the list<para/>
            ======== EXAMPLES ===============================<para/>
            You want to display FirstName and Last Name in one column<para/>
            You want to display type of contact and contact number in same column<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.FooterMarkup(System.String)">
            <summary>
            This field only Works on List Module Element<para/>
            The markup to appear in the footer of the element in the list.<para/>
            Notes:<para/>
            - This        markup is only rendered if &quot;Footer row&quot; is checked on the list.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to add a custom markup for the footer of the list.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;test template&quot;<para/>
            [*Name*]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.FooterDisplayFormat(System.String)">
            <summary>
            This field only Works on List Module Element<para/>
            This attribute is used along with the FooterFormula.<para/>
            Use this attribute to specify the format for the value you specified in the FooterFormula.<para/>
            This attribute uses the  Composite Formatting  Numeric Format Strings.<para/>
            ======== DEFAULT ================================<para/>
            The default value for this field is {0} which implied that it will not use any formatting for the footer and simply outputs it to the screen.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you want to format the result of the FooterFormula in a certain format.<para/>
            ======== EXAMPLES ===============================<para/>
            {0:C2}<para/>
            Displays £123.46<para/>
            {0:0,0.00}<para/>
            Displays 1,234.57<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.ViewModelType(System.String)">
            <summary>
            In this field, you can specify the alternative control type you wish to use for this field.<para/>
            ======== DEFAULT ================================<para/>
            The default value is &quot;blank&quot; which is interpreted as Literal control.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to use a control other than the Literal control for a field.<para/>
            ======== EXAMPLES ===============================<para/>
            TextBox<para/>
            AutoComplete<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.ViewModelName(System.String)">
            <summary>
            An ID for when you want to specify an exact identifier for the controller you want to use in this view element.<para/>
            This field is usually used in combination with ControlType to use a control type other than the Text for the view element control.<para/>
            ======== DEFAULT ================================<para/>
            The default value for this field is null or blank.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to access a control from your code behind in order to get or set a value, you can specify a ControlID to find that control.<para/>
            ======== EXAMPLES ===============================<para/>
            txtClientName<para/>
            A Textbox ControlID<para/>
            lstShippingMethod<para/>
            A DropDownList ControlID<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.Box(MSharp.ModuleBox)">
            <summary>
            In this field, you can select the box which you want this view element to be moved. You must first create at least a box in the boxes section and then set it here.<para/>
            ======== DEFAULT ================================<para/>
            The default value for this field is blank. Which means by default, all the view elements are at the root of the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to group a number of view elements in different box/containers in the<para/>
            same view. For example, you can create a box named &quot;Address&quot; and then put fields like &quot;Street&quot;, &quot;City&quot;, Country&quot;, and &quot;Post Code&quot; inside that box.<para/>
            ======== EXAMPLES ===============================<para/>
            Left panel<para/>
            A name of a box<para/>
            &quot;Blank&quot;<para/>
            The element will be out of the boxes.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.SortingStatement(System.String)">
            <summary>
            This field on works for list Module Element<para/>
            Use this field if you want to specify a sort statement for this element other than the default sort statement.<para/>
            Tips:<para/>
            - Use &quot;|&quot; to separate multiple sort expressions.<para/>
            -<para/>
            You can add &quot; DESC&quot; to the end of each phrase to specify descending sort.<para/>
            ======== DEFAULT ================================<para/>
            By default, the items in the List Module will be sorted based on the the default sort order of the Type.<para/>
            That is, either by an explicitly defined SortOrder on that Type, or the ToString() of the object.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the items in the list to be sorted differently from the default setting of the type based on this element. For example when you have a custom column that combines multiple values but you want it to be sortable based on a certain formula.<para/>
            ======== EXAMPLES ===============================<para/>
            item.LastName DESC<para/>
            item.GetLastName()<para/>
            item.LastName + &quot;, &quot; + item.FirstName<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.CssClass(System.String)">
            <summary>
            In this field, you can set a css class for this element.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            Note:<para/>
            - For List elements (columns) when the Render mode is set to &quot;Grid&quot;, use the &quot;Grid column css class&quot; property to set a css class for the column.<para/>
            ======== DEFAULT ================================<para/>
            By default the element will have a css class of &quot;item&quot;.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the element.<para/>
            ======== EXAMPLES ===============================<para/>
            add-user-button<para/>
            add-button<para/>
            add-user-button<para/>
            c#: (Case != null) ? &quot;case-delete-button&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.GridColumnCssClass(System.String)">
            <summary>
            This field only Works on List Module Element<para/>
            In this field, you can set a css class for this grid.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When an special appearance style is needed for the grid.<para/>
            ======== EXAMPLES ===============================<para/>
            users-grid<para/>
            users-grid wide-users-grid<para/>
            c#: (Case != null) ? &quot;case-users-grid&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.ExportToExcel(System.Nullable{System.Boolean})">
            <summary>
            This field only works on List Module Element<para/>
            A Boolean value to specify if you want this field to be included when exporting the list to Excel file.<para/>
            ======== DEFAULT ================================<para/>
            The default value for this field is &quot;True&quot; which means this column will be included when exporting the list to Excel.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If you do not wish a certain column to be exported to Excel<para/>
            ======== EXAMPLES ===============================<para/>
            False<para/>
            Does not export to Excel<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewElement`1.NoLabelText">
            <summary>
            Sets the label text of this element to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.ViewModule`1.Markup(System.String)">
            <summary>
            The Html which specifies the template of the object view.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need a custom markup for the object view that cannot be achieved only by adding the elements to the object view.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;test template&quot;<para/>
            [*Name*]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.Footer(System.String)">
            <summary>
            In this field you can specify the footer for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the bottom of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;The End!&quot;<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.RequestParam(System.String)">
            <summary>
            In this field you can specify a QueryString key which is used to fetch the record from the database<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have passed id of the entity type instance based on which you want to display the view<para/>
            ======== EXAMPLES ===============================<para/>
            id<para/>
            product<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.KeepOriginalFormatting(System.Boolean)">
            <summary>
            When set to True, the generated code will not be formatted and will be generated left aligned.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is recommended to not to set it True, because it keeping the original formatting will make it difficult to read an understand<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.EmptyMarkup(System.String)">
            <summary>
            The html to show when the view is empty.<para/>
            Use [#EMPTY#] if you don&amp;#39;t want a system generated text.<para/>
            Usage:Supports:Example:<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to show a custom text or markup when the view is empty.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;There is no employee to display.&quot;<para/>
            [#EMPTY#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.Multi_Lingual(System.Nullable{System.Boolean})">
            <summary>
            If set to True, Phrases on static phrases i.e. Label Text, Heading, columns, button texts will be translated by selected language<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to enable multi-lingual support on a single module. Please not that if the Multi-Lingual option in project settings is set then you do not need to set it explicitly.<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.DataSource(System.String)">
            <summary>
            This field is a C# expression that requires an complex type object.  This object is used to display elements of the type<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to supply QueryString Key and want to specify a custom fetch object<para/>
            ======== EXAMPLES ===============================<para/>
            Database.Find ()<para/>
            Lesson.Default<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.HeaderText(System.String)">
            <summary>
            In this field you can specify heading for the module. All contents are placed inside h2 tag.<para/>
            ======== DEFAULT ================================<para/>
            Inferred from the entity and type of module<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you wan to specify just the heading contents<para/>
            ======== EXAMPLES ===============================<para/>
            Static Text<para/>
            Employee Details<para/>
            C# Expression<para/>
            c#:Item.Name + &quot; Details&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.SourceEvaluationCriteria(System.String)">
            <summary>
            Sometimes the DataSource of a module can only be evaluated in a special condition or otherwise it will throw an exception.<para/>
            You can write such condition here, so that if your specified criteria is not met, then the DataSource expression is not even evaluated.<para/>
            ======== EXAMPLE ================================<para/>
            Category != null<para/>
            Let&apos;s say your DataSource is «Category.Items», while sometimes Category can be null. In that case the DataSource would throw an exception if you didn&apos;t have this SourceEvaluationCriteria.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.Name(System.String)">
            <summary>
            In this field you should enter the name of the module you want to create. This name should be a unique name for the module you have created.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is a mandatory field for the module.<para/>
            ======== EXAMPLES ===============================<para/>
            Form: User signup<para/>
            List: Content blocks<para/>
            View: User details<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.HideEmptyElements(System.Boolean)">
            <summary>
            If set to True, the elements which are null or empty will not be displayed<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.Header(System.String)">
            <summary>
            The markup to add at the beginning of this module&amp;#39;s content.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want a markup to be generated at the top of this module.<para/>
            ======== EXAMPLES ===============================<para/>
            Simple Markup<para/>
            Simple Heading!<para/>
            On a form or view module.<para/>
            On a list module.<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.NamespaceImports(MSharp.NamespaceImport[])">
            <summary>
            In this field you can choose namespace(s) you need to import in the page backend.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to work with a class frequently and the namespace is not imported by default<para/>
            ======== EXAMPLES ===============================<para/>
            you need to extract web control in the backend file of a list module in order to  manipulate the data<para/>
            System.Web.UI.WebControls<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.IsInUse(System.Nullable{System.Boolean})">
            <summary>
            In this field you can specify if the module is used and should be build or not.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            If your module is used in a page directly, it will be built in build actions automatically.<para/>
            If your module is not used in a page directly, but you still want it to be built, you should check this property.<para/>
            ======== EXAMPLES ===============================<para/>
            Menu Modules<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.ControllerInterfaces(System.String)">
            <summary>
            The interfaces that this user control (module) should implement.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This is particularly useful when using ICallbackEventHandler interface for AJAX call backs.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;ICallbackEventHandler, IAnotherInterface&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.MarkupWrapper(System.String)">
            <summary>
            In this field you can specify a wrapper template for the module.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When want to customize the appearance of the module by adding extra markup around it.<para/>
            ======== EXAMPLES ===============================<para/>
            [#MODULE#]<para/>
            </summary>
        </member>
        <member name="M:MSharp.ViewModule`1.RootCssClass(System.String)">
            <summary>
            In this field you can enter the css class of the module.<para/>
            Tips:<para/>
            - css classes should always be lower case.<para/>
            - Use &quot;-&quot; to separate the words in the css class.<para/>
            - Use &quot; &quot; to separate multiple css classes.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply some css to the module.<para/>
            ======== EXAMPLES ===============================<para/>
            twtwo-column-form<para/>
            compact-view user-order-view<para/>
            c#: (Case != null) ? &quot;progress-list&quot; : &quot;&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallActivity.ClientCallbackHandler(System.String)">
            <summary>
            In this field you can write code to handle the client call-back of Ajax response. Use Anonymous Type result object to retrieve values returned in server response.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to update the client side based on the Ajax response.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            $(&quot;#txtTotalAmount&quot;).val(result.Sum);<para/>
            Example 2<para/>
            alert(result.Sum);<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallActivity.Description(System.String)">
            <summary>
            A description for the workflow activity to document its purpose. Make your descriptions as descriptive as possible as they will be generated as Comments above your code.<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallActivity.ServerSideHandler(System.String)">
            <summary>
            Write code to handle Server side Ajax call. Perform the server processing.Consume array of parameters and return an anonymous type object.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is mandatory.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            var firstNumber = arguments[0]; // Retrieving  Parameter<para/>
            var secondNumber = arguments[1]; // Retrieving Parameter<para/>
            Example 2<para/>
            var result = firstNumber.To () + secondNumber.To (); // Consuming Parameters<para/>
            Example 3<para/>
            return new { Sum = result }; //Returning Server Response<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallActivity.BreakExecution(System.Boolean)">
            <summary>
            If set to True, it will Restrict the execution of next actions. All the actions after this will not be executed.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want this action to stop the execution and exist the workflow<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallActivity.IsDisabled(System.Boolean)">
            <summary>
            If set to True, it will be ignored in the code generation and as far as the target code is concerned, it won&apos;t exist.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want that this activity stops running in the project, but you do not want to delete it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallActivity.ValidationError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch the validation exception and shows a warning to the user, instead of showing the error message on the screen.<para/>
            ValidationException is a special type of exception which is usually may be thrown by the model at the time of Validation and usually means a validation error. Catching this error at the workflow level is a mean to communicate with the user about the validation problem.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Almost all the time. Unless you don&apos;t want to handle the validation exceptions in the interface.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Catches the validation exceptions and shows a popup message<para/>
            False<para/>
            Let the validation exceptions to pass through and be handled elsewhere<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallActivity.UnhandledError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch all the exceptions and shows a pop-up warning to the user, instead of showing the error message on the screen.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you want to catch all the exceptions. Avoid overusing this option and use WarnOnValidationExceptions instead.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Shows an error message when an error happens when running this workflow step<para/>
            False<para/>
            Does not catch the exception and let the application catches the exception<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallParameter.ValueExpression(System.String)">
            <summary>
            A JavaScript expression to get the value of this parameter in client side.<para/>
            ======== EXAMPLES ===============================<para/>
            $(&quot;input.total&quot;).val()<para/>
            myJsVariableName<para/>
            </summary>
        </member>
        <member name="M:MSharp.AjaxCallParameter.Name(System.String)">
            <summary>
            Name of the parameter. Use parameter name as specific as possible as it provides a mean of better code read and maintenance<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is mandatory and is populated when a parameter is created.<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.RecordSuccess(System.Boolean)">
            <summary>
            When Set to True, the success message is recorded for the automated task each time it is successfully executed.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to log the task information on successfully execution<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.RecordFailure(System.Boolean)">
            <summary>
            When set to False, no information is logged in the ApplicationEvent database table.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Although, it is recommended to log the failures, but you can use it in scenarios where you don&apos;t want to log the task failure<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.IsDisabled(System.Boolean)">
            <summary>
            When set to True, the automated task is disabled and doesn&apos;t run<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to make the automated task inactive<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.Name(System.String)">
            <summary>
            In this field you specify the name of the automated task. You should always specify a meaningful and specific name because a method is generated with the name you specify here.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is mandatory and is required at the time  of creating an automated task<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            Send email queue item<para/>
            Example 2<para/>
            Process payment<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.Comments(System.String)">
            <summary>
            This is an optional free text field allows you to write a description of the code you have added for the automated task<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.FrequencyValue(System.Int32)">
            <summary>
            In this field you can specify a number value evaluating the timespan for the underlying automated task<para/>
            ======== DEFAULT ================================<para/>
            1<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            You should this field always until unless a custom frequency is required<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            10<para/>
            Example 2<para/>
            15<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.FrequencyUnit(MSharp.TimeUnit)">
            <summary>
            In this field you can select required time span frequency unit<para/>
            ======== DEFAULT ================================<para/>
            Minute<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When using Frequency value you can use this field to change the frequency unit<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.Run(System.String)">
            <summary>
            This attribute requires a C# expression. C# code specified here will be on the set time.<para/>
            Note:<para/>
            Avoid writing business logic in this code. Implement the business logic in Modal and then call the function here<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            This field is mandatory<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            MSharp.Framework.Services.EmailService.SendAll();<para/>
            Example 2<para/>
            App.Payment.ProcessPending();<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.CustomFrequencyValue(System.String)">
            <summary>
            A c# expression value evaluate the time span<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to run an automated task on a custom frequency<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            TimeSpan.FromSeconds(30)<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.ExecutionCriteria(System.String)">
            <summary>
            In this field you can specify the criteria in which you want Task to be run.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the Task to be run only if one or more criteria are met.<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            startTime.Hour &gt;= 9 &amp;&amp; startTime.Hour<para/>
            Example 2<para/>
            !LocalTime.Now.IsEnglishHoliday()<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.StartupDelay(System.String)">
            <summary>
            A timespan that it should wait initially before it starts the regular execution.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to delay the initial execution of an automated task<para/>
            ======== EXAMPLES ===============================<para/>
            Example 1<para/>
            &quot;TimeSpan.FromDays(5)&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.AutomatedTaskPlan.SyncGroup(System.String)">
            <summary>
            In this field you can specify a group name which will be usd to run all automated tasks within the same Sync group which will be executed sequentially with a lock.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to run more than one task simultaneously<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonActivity.Description(System.String)">
            <summary>
            A description for the workflow activity to document its purpose. Make your descriptions as descriptive as possible as they will be generated as Comments above your code.<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonActivity.IsDisabled(System.Boolean)">
            <summary>
            If set to True, it will be ignored in the code generation and as far as the target code is concerned, it won&apos;t exist.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want that this activity stops running in the project, but you do not want to delete it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonActivity.ValidationError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch the validation exception and shows a warning to the user, instead of showing the error message on the screen.<para/>
            ValidationException is a special type of exception which is usually may be thrown by the model at the time of Validation and usually means a validation error. Catching this error at the workflow level is a mean to communicate with the user about the validation problem.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Almost all the time. Unless you don&apos;t want to handle the validation exceptions in the interface.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Catches the validation exceptions and shows a popup message<para/>
            False<para/>
            Let the validation exceptions to pass through and be handled elsewhere<para/>
            </summary>
        </member>
        <member name="M:MSharp.CommonActivity.UnhandledError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch all the exceptions and shows a pop-up warning to the user, instead of showing the error message on the screen.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you want to catch all the exceptions. Avoid overusing this option and use WarnOnValidationExceptions instead.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Shows an error message when an error happens when running this workflow step<para/>
            False<para/>
            Does not catch the exception and let the application catches the exception<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericActivity.Code(System.String)">
            <summary>
            In this field you can specify C# expression required to perform an activity on the Form<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to perform custom actions on form objects<para/>
            ======== EXAMPLES ===============================<para/>
            var user = User.FindByEmail(txtEmail.Text);<para/>
            User.SendEmail()<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericActivity.IsJavascript(System.Boolean)">
            <summary>
            This field determines if the custom code is of JavaScript of C# type. If set to True, Code is generated inside &quot;Script&quot; tag on client side<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to write JavaScript code in this activity<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericActivity.Description(System.String)">
            <summary>
            A description for the workflow activity to document its purpose. Make your descriptions as descriptive as possible as they will be generated as Comments above your code.<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericActivity.IsUpdatePanelCompatible(System.Boolean)">
            <summary>
            If set to true, no trigger for update panel is generated. This attribute works in junction with form Module attribute &quot;Use update panel&quot;.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you don&apos;t want to generate a trigger for update panel<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericActivity.WellknownCode(MSharp.WellKnownCode)">
            <summary>
            In this code you select any defined well-known code. This attribute replaces the Code attribute<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to specify a well-known code instead of custom code<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericActivity.IsDisabled(System.Boolean)">
            <summary>
            If set to True, it will be ignored in the code generation and as far as the target code is concerned, it won&apos;t exist.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want that this activity stops running in the project, but you do not want to delete it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericActivity.ValidationError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch the validation exception and shows a warning to the user, instead of showing the error message on the screen.<para/>
            ValidationException is a special type of exception which is usually may be thrown by the model at the time of Validation and usually means a validation error. Catching this error at the workflow level is a mean to communicate with the user about the validation problem.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Almost all the time. Unless you don&apos;t want to handle the validation exceptions in the interface.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Catches the validation exceptions and shows a popup message<para/>
            False<para/>
            Let the validation exceptions to pass through and be handled elsewhere<para/>
            </summary>
        </member>
        <member name="M:MSharp.GenericActivity.UnhandledError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch all the exceptions and shows a pop-up warning to the user, instead of showing the error message on the screen.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you want to catch all the exceptions. Avoid overusing this option and use WarnOnValidationExceptions instead.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Shows an error message when an error happens when running this workflow step<para/>
            False<para/>
            Does not catch the exception and let the application catches the exception<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.RunClientSide(System.Boolean)">
            <summary>
            If set to True, the action will be generated as JavaScript code which will run on client side<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Most of the actions are generated appropriately as client or server side.<para/>
            You can use this attribute to run any action on client side<para/>
            ======== EXAMPLES ===============================<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.Permanent301Redirect(System.Boolean)">
            <summary>
            If set to True, the redirection response will be 301 which is a permanent redirect<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to apply a redirection on the page which is moved permanently t is also the best technique to update the page link to search engines<para/>
            ======== EXAMPLES ===============================<para/>
            You have moved your site to a new domain, and you want to make the transition as seamless as possible<para/>
            You are merging two websites and want to make sure that links to outdated URLs are redirected to the correct pages.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.PDFCustomization(System.String)">
            <summary>
            In this attribute you can specify a C# code to customize the PDF which will be generated for this navigation action<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to customize the document using PDFMaker variable<para/>
            ======== EXAMPLES ===============================<para/>
            You want to add left margin to the PDF Document<para/>
            (pdfMaker as Html2PdfConverter).PdfDocumentOptions.LeftMargin = 10;<para/>
            You want to add heading to thePDF Document<para/>
            (pdfMaker as Html2PdfConverter).PdfHeaderOptions.HeaderText = App.Settings.PDFTitle;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.Url(System.String)">
            <summary>
            You can enter a custom URL in this field to redirect the user to a custom page (which is not in your project)<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to redirect the user to a custom page not in the context of your application.<para/>
            ======== EXAMPLES ===============================<para/>
            www.google.com<para/>
            string.Format(&quot;www.google.com/?q={0}&quot;, App.Context.User.UserName)<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.IsDisabled(System.Boolean)">
            <summary>
            If set to True, it will be ignored in the code generation and as far as the target code is concerned, it won&apos;t exist.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want that this activity stops running in the project, but you do not want to delete it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.Target(MSharp.OpenIn)">
            <summary>
            This field specifies the window in which user will be redirected.<para/>
            ======== DEFAULT ================================<para/>
            By default, all navigation activities are opened in the same window that they are called from.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to open the new page in somewhere else or in popup form.<para/>
            ======== EXAMPLES ===============================<para/>
            Setting the Target to &quot;New browser window&quot; will open a new Window/tab with the specified URL.<para/>
            Setting the Target to &quot;Popup window&quot; will open the specified URL in a Modal window.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.ValidationError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch the validation exception and shows a warning to the user, instead of showing the error message on the screen.<para/>
            ValidationException is a special type of exception which is usually may be thrown by the model at the time of Validation and usually means a validation error. Catching this error at the workflow level is a mean to communicate with the user about the validation problem.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Almost all the time. Unless you don&apos;t want to handle the validation exceptions in the interface.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Catches the validation exceptions and shows a popup message<para/>
            False<para/>
            Let the validation exceptions to pass through and be handled elsewhere<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.UnhandledError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch all the exceptions and shows a pop-up warning to the user, instead of showing the error message on the screen.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you want to catch all the exceptions. Avoid overusing this option and use WarnOnValidationExceptions instead.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Shows an error message when an error happens when running this workflow step<para/>
            False<para/>
            Does not catch the exception and let the application catches the exception<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.SendReturnUrl(System.Boolean)">
            <summary>
            If this field is checked  it will add the current request&amp;#39;s URL as query string parameter of &quot;ReturnUrl&quot; to the destination.<para/>
            ======== DEFAULT ================================<para/>
            By default this field is not selected.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to send current request&amp;#39;s URL as query string to next page.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.RunServerSide(System.Boolean)">
            <summary>
            Check this field if you want the redirection process be done from the server code.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want the redirection process be done from the server code.<para/>
            ======== EXAMPLES ===============================<para/>
            When the calculation of the URL depends on the server code.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.PdfFileName(System.String)">
            <summary>
            In this field you can specify the name of the PDF file if you want to export a PDF in this activity.<para/>
            Tips:<para/>
            - You must update you App.Context.User property&apos;s Get accessor to enable PDF export of secure pages.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to export the target page contents in a PDF file<para/>
            ======== EXAMPLES ===============================<para/>
            Dynamic Name<para/>
            Item.Person.FullName.Replace(&quot; &quot;, &quot;_&quot;) +&quot;_&quot; + LocalTime.Now.ToString(&quot;dd_MM_yyy@HH_mm&quot;)<para/>
            Static Name<para/>
            Active_Members<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.WindowName(System.String)">
            <summary>
            This field is used when the Location property of the redirect does not suffice for our case.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to open a modal window by supplying window name which you can refer later<para/>
            ======== EXAMPLES ===============================<para/>
            Profile Details<para/>
            Product Details<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.ModalEffect(MSharp.OpenModalEffect)">
            <summary>
            In this attribute you can select the animation which will be run to display the modal window<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to add animation to make the navigation more interactive<para/>
            ======== EXAMPLES ===============================<para/>
            Slide<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.ModalWidth(System.String)">
            <summary>
            In this field you can specify the numeric value for width of the modal window<para/>
            ======== DEFAULT ================================<para/>
            Based on the contents<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Although, the modal window width is auto calculated based on the contents, but you can explicitly specify the width on occasions when its not appropriately set<para/>
            ======== EXAMPLES ===============================<para/>
            500<para/>
            700<para/>
            </summary>
        </member>
        <member name="M:MSharp.NavigateActivity.ModalHeight(System.String)">
            <summary>
            In this field you can specify the numeric value for height of the modal window<para/>
            ======== DEFAULT ================================<para/>
            Based on the contents<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Although, the modal window height is auto calculated based on the contents, but you can explicitly specify the height on occasions when its not appropriately set<para/>
            ======== EXAMPLES ===============================<para/>
            500<para/>
            700<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.Text(System.String)">
            <summary>
            In this field you should enter the message you want to show to the user.<para/>
            Supported formats:<para/>
            - Plain text<para/>
            - Page belongings<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            It is a mandatory field.<para/>
            ======== EXAMPLES ===============================<para/>
            &quot;User has been successfully added!&quot;<para/>
            &quot;User ([*UserName*]) has been successfully added!&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.GentleStyle(System.Boolean)">
            <summary>
            When set to True, a gentle bar fades in on the top of the page displaying the message. When set to False, a message box is shown instead<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to switch between message box and gentle style message display. Gentle style makes it a it sophisticated as you can style the message bar<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.Description(System.String)">
            <summary>
            A description for the workflow activity to document its purpose. Make your descriptions as descriptive as possible as they will be generated as Comments above your code.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.UseMessageBox(System.Boolean)">
            <summary>
            If set to True, a message box will be shown to display the message.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Set to False, when you need to show the message on the module. Message boxes are more prominent than the message on the module.<para/>
            But it depends on the design and style requirement of the page.<para/>
            ======== EXAMPLES ===============================<para/>
            You want to prompt the user a success message<para/>
            You want to prompt validation message<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.DisplayOnModule(System.Nullable{System.Boolean})">
            <summary>
            If set to True, e message will be written on the page rather than a shown as a message box. The message is displayed just after the contents of the module<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Set to Yes if you want to write the message on the page<para/>
            ======== EXAMPLES ===============================<para/>
            You update the details and display the message just after the module contents<para/>
            Example 2<para/>
            In this example, ....<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.IsDisabled(System.Boolean)">
            <summary>
            If set to True, it will be ignored in the code generation and as far as the target code is concerned, it won&apos;t exist.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want that this activity stops running in the project, but you do not want to delete it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.IsHtml(System.Boolean)">
            <summary>
            This field determines if the message in the Message field is an HTML text or plain text.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to provide a message containing HTML markup to the user.<para/>
            ======== EXAMPLES ===============================<para/>
            You should check this field if your message contains HTML markup such as:<para/>
            &quot; Edit Profile<para/>
            Your profile has been successfully updated&quot;<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.ValidationError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch the validation exception and shows a warning to the user, instead of showing the error message on the screen.<para/>
            ValidationException is a special type of exception which is usually may be thrown by the model at the time of Validation and usually means a validation error. Catching this error at the workflow level is a mean to communicate with the user about the validation problem.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Almost all the time. Unless you don&apos;t want to handle the validation exceptions in the interface.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Catches the validation exceptions and shows a popup message<para/>
            False<para/>
            Let the validation exceptions to pass through and be handled elsewhere<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.Exits(System.Boolean)">
            <summary>
            If this field is checked, the activity will terminate the execution of the rest of activities in the workflow.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to terminate the execution of the rest of activities in the workflow.<para/>
            ======== EXAMPLES ===============================<para/>
            You are showing an error message and the the rest of the activities in the workflow should not be executed.<para/>
            You are performing set of activities and need to exit is a criteria is fulfilled.<para/>
            </summary>
        </member>
        <member name="M:MSharp.NotificationActivity.UnhandledError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch all the exceptions and shows a pop-up warning to the user, instead of showing the error message on the screen.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you want to catch all the exceptions. Avoid overusing this option and use WarnOnValidationExceptions instead.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Shows an error message when an error happens when running this workflow step<para/>
            False<para/>
            Does not catch the exception and let the application catches the exception<para/>
            </summary>
        </member>
        <member name="M:MSharp.RuleCriterion.Roles(MSharp.ProjectRole[])">
            <summary>
            In this field you can select the roles to implement role based security / visibility rule<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you have defined roles in the project and want only particular role(s) to be able to access<para/>
            ======== EXAMPLES ===============================<para/>
            You have a page with sub pages which are used to manage admin related work and only want Admin user to access it<para/>
            You have a forum and want to have a delete button which only be visible to Admin users<para/>
            you have a forum and only want Members of the site to post the comments.<para/>
            </summary>
        </member>
        <member name="M:MSharp.RuleCriterion.Rule(System.String)">
            <summary>
            In this field you can specify complex business rule to implement security on different section in the website e.g. Modules, elements, Buttons etc<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to use the complex business rules to control the access of execution of actions in the website e.g. CanSee(), IsConnected, HasBalance etc<para/>
            ======== EXAMPLES ===============================<para/>
            You have a social network site and want to implement restriction on member profiles to be only viewed by a connected member<para/>
            App.Context.Member.IsConnected(Member)<para/>
            You have an ecommerce website on which members bid for only the product which is available to bidding and hasn&apos;t won by no one.<para/>
            Item.IsAvailable<para/>
            </summary>
        </member>
        <member name="M:MSharp.RuleCriterion.StandardRule(MSharp.CommonCriterion)">
            <summary>
            In this field you can select a standard rule to define a criteria.<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you need to implement a simple criteria based on the standard rule to apply a rule<para/>
            ======== EXAMPLES ===============================<para/>
            You have a back button which redirect to the previous page if the request has a return URL<para/>
            HasReturnURL<para/>
            You have a debug page which you want to access of the the request is from local network<para/>
            IsLocalRequest<para/>
            </summary>
        </member>
        <member name="M:MSharp.UpdateObjectActivity.Description(System.String)">
            <summary>
            A description for the workflow activity to document its purpose. Make your descriptions as descriptive as possible as they will be generated as Comments above your code.<para/>
            </summary>
        </member>
        <member name="M:MSharp.UpdateObjectActivity.IsDisabled(System.Boolean)">
            <summary>
            If set to True, it will be ignored in the code generation and as far as the target code is concerned, it won&apos;t exist.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want that this activity stops running in the project, but you do not want to delete it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.UpdateObjectActivity.ValidationError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch the validation exception and shows a warning to the user, instead of showing the error message on the screen.<para/>
            ValidationException is a special type of exception which is usually may be thrown by the model at the time of Validation and usually means a validation error. Catching this error at the workflow level is a mean to communicate with the user about the validation problem.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Almost all the time. Unless you don&apos;t want to handle the validation exceptions in the interface.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Catches the validation exceptions and shows a popup message<para/>
            False<para/>
            Let the validation exceptions to pass through and be handled elsewhere<para/>
            </summary>
        </member>
        <member name="M:MSharp.UpdateObjectActivity.UnhandledError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch all the exceptions and shows a pop-up warning to the user, instead of showing the error message on the screen.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you want to catch all the exceptions. Avoid overusing this option and use WarnOnValidationExceptions instead.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Shows an error message when an error happens when running this workflow step<para/>
            False<para/>
            Does not catch the exception and let the application catches the exception<para/>
            </summary>
        </member>
        <member name="M:MSharp.Workflow.RunInTransaction(System.Nullable{System.Boolean})">
            <summary>
            If you check this field. All activities will be run as a unique transaction<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want to perform all the actions in one transaction scope. This will rollback all the changes if an error occurs<para/>
            ======== EXAMPLES ===============================<para/>
            You running update on a payment transition with card details<para/>
            You save a user and send an email<para/>
            </summary>
        </member>
        <member name="M:MSharp.WorkflowActivity.Description(System.String)">
            <summary>
            A description for the workflow activity to document its purpose. Make your descriptions as descriptive as possible as they will be generated as Comments above your code.<para/>
            </summary>
        </member>
        <member name="M:MSharp.WorkflowActivity.IsDisabled(System.Boolean)">
            <summary>
            If set to True, it will be ignored in the code generation and as far as the target code is concerned, it won&apos;t exist.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            When you want that this activity stops running in the project, but you do not want to delete it.<para/>
            </summary>
        </member>
        <member name="M:MSharp.WorkflowActivity.ValidationError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch the validation exception and shows a warning to the user, instead of showing the error message on the screen.<para/>
            ValidationException is a special type of exception which is usually may be thrown by the model at the time of Validation and usually means a validation error. Catching this error at the workflow level is a mean to communicate with the user about the validation problem.<para/>
            ======== DEFAULT ================================<para/>
            True<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Almost all the time. Unless you don&apos;t want to handle the validation exceptions in the interface.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Catches the validation exceptions and shows a popup message<para/>
            False<para/>
            Let the validation exceptions to pass through and be handled elsewhere<para/>
            </summary>
        </member>
        <member name="M:MSharp.WorkflowActivity.UnhandledError(System.Nullable{System.Boolean})">
            <summary>
            If this field is checked, the system will catch all the exceptions and shows a pop-up warning to the user, instead of showing the error message on the screen.<para/>
            ======== DEFAULT ================================<para/>
            False<para/>
            ======== WHEN TO USE/SET IT? ====================<para/>
            Use this when you want to catch all the exceptions. Avoid overusing this option and use WarnOnValidationExceptions instead.<para/>
            ======== OPTIONS ================================<para/>
            True<para/>
            Shows an error message when an error happens when running this workflow step<para/>
            False<para/>
            Does not catch the exception and let the application catches the exception<para/>
            </summary>
        </member>
        <member name="M:MSharp.MetaExtensions.NoText``1(``0)">
            <summary>
            Sets the text of this button to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.MetaExtensions.NoLabel``1(``0)">
            <summary>
            Sets the text of this element to be [#EMPTY#] which means no text should be generated.
            </summary> 
        </member>
        <member name="M:MSharp.MetaExtensions.DismissWarning``1(``0,System.String)">
            <summary>
            Dismisses all M# warnings on this object.
            </summary>
        </member>
        <member name="M:MSharp.MetaExtensions.CalculatedFrom``1(``0,System.String)">
            <summary>
            Sets this property to calculated. Also sets its getter expression.
            </summary>
        </member>
    </members>
</doc>
